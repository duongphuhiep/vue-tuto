<?xml version="1.0" encoding="UTF-8"?>

<office:document xmlns:office="urn:oasis:names:tc:opendocument:xmlns:office:1.0" xmlns:style="urn:oasis:names:tc:opendocument:xmlns:style:1.0" xmlns:text="urn:oasis:names:tc:opendocument:xmlns:text:1.0" xmlns:table="urn:oasis:names:tc:opendocument:xmlns:table:1.0" xmlns:draw="urn:oasis:names:tc:opendocument:xmlns:drawing:1.0" xmlns:fo="urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:meta="urn:oasis:names:tc:opendocument:xmlns:meta:1.0" xmlns:number="urn:oasis:names:tc:opendocument:xmlns:datastyle:1.0" xmlns:svg="urn:oasis:names:tc:opendocument:xmlns:svg-compatible:1.0" xmlns:chart="urn:oasis:names:tc:opendocument:xmlns:chart:1.0" xmlns:dr3d="urn:oasis:names:tc:opendocument:xmlns:dr3d:1.0" xmlns:math="http://www.w3.org/1998/Math/MathML" xmlns:form="urn:oasis:names:tc:opendocument:xmlns:form:1.0" xmlns:script="urn:oasis:names:tc:opendocument:xmlns:script:1.0" xmlns:config="urn:oasis:names:tc:opendocument:xmlns:config:1.0" xmlns:ooo="http://openoffice.org/2004/office" xmlns:ooow="http://openoffice.org/2004/writer" xmlns:oooc="http://openoffice.org/2004/calc" xmlns:dom="http://www.w3.org/2001/xml-events" xmlns:xforms="http://www.w3.org/2002/xforms" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:rpt="http://openoffice.org/2005/report" xmlns:of="urn:oasis:names:tc:opendocument:xmlns:of:1.2" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:grddl="http://www.w3.org/2003/g/data-view#" xmlns:officeooo="http://openoffice.org/2009/office" xmlns:tableooo="http://openoffice.org/2009/table" xmlns:drawooo="http://openoffice.org/2010/draw" xmlns:calcext="urn:org:documentfoundation:names:experimental:calc:xmlns:calcext:1.0" xmlns:loext="urn:org:documentfoundation:names:experimental:office:xmlns:loext:1.0" xmlns:field="urn:openoffice:names:experimental:ooo-ms-interop:xmlns:field:1.0" xmlns:formx="urn:openoffice:names:experimental:ooxml-odf-interop:xmlns:form:1.0" xmlns:css3t="http://www.w3.org/TR/css3-text/" office:version="1.2" office:mimetype="application/vnd.oasis.opendocument.text">
 <office:meta><meta:creation-date>2017-01-31T23:59:53.709284717</meta:creation-date><dc:date>2017-02-01T00:54:37.116963706</dc:date><meta:editing-duration>PT40M59S</meta:editing-duration><meta:editing-cycles>15</meta:editing-cycles><meta:generator>LibreOffice/5.1.4.2$Linux_X86_64 LibreOffice_project/10m0$Build-2</meta:generator><meta:document-statistic meta:table-count="53" meta:image-count="3" meta:object-count="0" meta:page-count="65" meta:paragraph-count="2002" meta:word-count="14178" meta:character-count="92443" meta:non-whitespace-character-count="76380"/></office:meta>
 <office:settings>
  <config:config-item-set config:name="ooo:view-settings">
   <config:config-item config:name="ViewAreaTop" config:type="long">6475</config:config-item>
   <config:config-item config:name="ViewAreaLeft" config:type="long">0</config:config-item>
   <config:config-item config:name="ViewAreaWidth" config:type="long">46351</config:config-item>
   <config:config-item config:name="ViewAreaHeight" config:type="long">26335</config:config-item>
   <config:config-item config:name="ShowRedlineChanges" config:type="boolean">true</config:config-item>
   <config:config-item config:name="InBrowseMode" config:type="boolean">false</config:config-item>
   <config:config-item-map-indexed config:name="Views">
    <config:config-item-map-entry>
     <config:config-item config:name="ViewId" config:type="string">view2</config:config-item>
     <config:config-item config:name="ViewLeft" config:type="long">27310</config:config-item>
     <config:config-item config:name="ViewTop" config:type="long">20032</config:config-item>
     <config:config-item config:name="VisibleLeft" config:type="long">0</config:config-item>
     <config:config-item config:name="VisibleTop" config:type="long">6475</config:config-item>
     <config:config-item config:name="VisibleRight" config:type="long">46350</config:config-item>
     <config:config-item config:name="VisibleBottom" config:type="long">32808</config:config-item>
     <config:config-item config:name="ZoomType" config:type="short">0</config:config-item>
     <config:config-item config:name="ViewLayoutColumns" config:type="short">0</config:config-item>
     <config:config-item config:name="ViewLayoutBookMode" config:type="boolean">false</config:config-item>
     <config:config-item config:name="ZoomFactor" config:type="short">85</config:config-item>
     <config:config-item config:name="IsSelectedFrame" config:type="boolean">false</config:config-item>
    </config:config-item-map-entry>
   </config:config-item-map-indexed>
  </config:config-item-set>
  <config:config-item-set config:name="ooo:configuration-settings">
   <config:config-item config:name="PrintProspect" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintLeftPages" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintPageBackground" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintControls" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintAnnotationMode" config:type="short">0</config:config-item>
   <config:config-item config:name="PrintGraphics" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintRightPages" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintFaxName" config:type="string"/>
   <config:config-item config:name="PrintPaperFromSetup" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintTextPlaceholder" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ApplyParagraphMarkFormatToNumbering" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintReversed" config:type="boolean">false</config:config-item>
   <config:config-item config:name="TabOverMargin" config:type="boolean">false</config:config-item>
   <config:config-item config:name="EmbedFonts" config:type="boolean">false</config:config-item>
   <config:config-item config:name="SurroundTextWrapSmall" config:type="boolean">false</config:config-item>
   <config:config-item config:name="BackgroundParaOverDrawings" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ClippedPictures" config:type="boolean">false</config:config-item>
   <config:config-item config:name="FloattableNomargins" config:type="boolean">false</config:config-item>
   <config:config-item config:name="UnbreakableNumberings" config:type="boolean">false</config:config-item>
   <config:config-item config:name="EmbedSystemFonts" config:type="boolean">false</config:config-item>
   <config:config-item config:name="TabOverflow" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintTables" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintSingleJobs" config:type="boolean">false</config:config-item>
   <config:config-item config:name="SmallCapsPercentage66" config:type="boolean">false</config:config-item>
   <config:config-item config:name="CollapseEmptyCellPara" config:type="boolean">true</config:config-item>
   <config:config-item config:name="MathBaselineAlignment" config:type="boolean">true</config:config-item>
   <config:config-item config:name="AddFrameOffsets" config:type="boolean">false</config:config-item>
   <config:config-item config:name="IsLabelDocument" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrinterName" config:type="string"/>
   <config:config-item config:name="OutlineLevelYieldsNumbering" config:type="boolean">false</config:config-item>
   <config:config-item config:name="IgnoreFirstLineIndentInNumbering" config:type="boolean">false</config:config-item>
   <config:config-item config:name="UpdateFromTemplate" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintBlackFonts" config:type="boolean">false</config:config-item>
   <config:config-item config:name="TableRowKeep" config:type="boolean">false</config:config-item>
   <config:config-item config:name="EmbeddedDatabaseName" config:type="string"/>
   <config:config-item config:name="IgnoreTabsAndBlanksForLineCalculation" config:type="boolean">false</config:config-item>
   <config:config-item config:name="UseOldPrinterMetrics" config:type="boolean">false</config:config-item>
   <config:config-item config:name="InvertBorderSpacing" config:type="boolean">false</config:config-item>
   <config:config-item config:name="SaveGlobalDocumentLinks" config:type="boolean">false</config:config-item>
   <config:config-item config:name="TabsRelativeToIndent" config:type="boolean">true</config:config-item>
   <config:config-item config:name="Rsid" config:type="int">2410818</config:config-item>
   <config:config-item config:name="PrintProspectRTL" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintEmptyPages" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ApplyUserData" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintHiddenText" config:type="boolean">false</config:config-item>
   <config:config-item config:name="AddParaTableSpacingAtStart" config:type="boolean">true</config:config-item>
   <config:config-item config:name="FieldAutoUpdate" config:type="boolean">true</config:config-item>
   <config:config-item config:name="UseOldNumbering" config:type="boolean">false</config:config-item>
   <config:config-item config:name="AddParaTableSpacing" config:type="boolean">true</config:config-item>
   <config:config-item config:name="CharacterCompressionType" config:type="short">0</config:config-item>
   <config:config-item config:name="SaveVersionOnClose" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ChartAutoUpdate" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrinterIndependentLayout" config:type="string">high-resolution</config:config-item>
   <config:config-item config:name="IsKernAsianPunctuation" config:type="boolean">false</config:config-item>
   <config:config-item config:name="UseFormerObjectPositioning" config:type="boolean">false</config:config-item>
   <config:config-item config:name="AddVerticalFrameOffsets" config:type="boolean">false</config:config-item>
   <config:config-item config:name="SubtractFlysAnchoredAtFlys" config:type="boolean">false</config:config-item>
   <config:config-item config:name="AddParaSpacingToTableCells" config:type="boolean">true</config:config-item>
   <config:config-item config:name="AddExternalLeading" config:type="boolean">true</config:config-item>
   <config:config-item config:name="CurrentDatabaseDataSource" config:type="string"/>
   <config:config-item config:name="AllowPrintJobCancel" config:type="boolean">true</config:config-item>
   <config:config-item config:name="ProtectForm" config:type="boolean">false</config:config-item>
   <config:config-item config:name="UseFormerLineSpacing" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintDrawings" config:type="boolean">true</config:config-item>
   <config:config-item config:name="UseFormerTextWrapping" config:type="boolean">false</config:config-item>
   <config:config-item config:name="UnxForceZeroExtLeading" config:type="boolean">false</config:config-item>
   <config:config-item config:name="TabAtLeftIndentForParagraphsInList" config:type="boolean">false</config:config-item>
   <config:config-item config:name="RedlineProtectionKey" config:type="base64Binary"/>
   <config:config-item config:name="PropLineSpacingShrinksFirstLine" config:type="boolean">true</config:config-item>
   <config:config-item config:name="ConsiderTextWrapOnObjPos" config:type="boolean">false</config:config-item>
   <config:config-item config:name="RsidRoot" config:type="int">1234646</config:config-item>
   <config:config-item config:name="StylesNoDefault" config:type="boolean">false</config:config-item>
   <config:config-item config:name="LinkUpdateMode" config:type="short">1</config:config-item>
   <config:config-item config:name="AlignTabStopPosition" config:type="boolean">true</config:config-item>
   <config:config-item config:name="DoNotJustifyLinesWithManualBreak" config:type="boolean">false</config:config-item>
   <config:config-item config:name="DoNotResetParaAttrsForNumFont" config:type="boolean">false</config:config-item>
   <config:config-item config:name="CurrentDatabaseCommandType" config:type="int">0</config:config-item>
   <config:config-item config:name="LoadReadonly" config:type="boolean">false</config:config-item>
   <config:config-item config:name="DoNotCaptureDrawObjsOnPage" config:type="boolean">false</config:config-item>
   <config:config-item config:name="CurrentDatabaseCommand" config:type="string"/>
   <config:config-item config:name="PrinterSetup" config:type="base64Binary"/>
   <config:config-item config:name="ClipAsCharacterAnchoredWriterFlyFrames" config:type="boolean">false</config:config-item>
  </config:config-item-set>
 </office:settings>
 <office:scripts>
  <office:script script:language="ooo:Basic">
   <ooo:libraries xmlns:ooo="http://openoffice.org/2004/office" xmlns:xlink="http://www.w3.org/1999/xlink"/>
  </office:script>
 </office:scripts>
 <office:font-face-decls>
  <style:font-face style:name="OpenSymbol" svg:font-family="OpenSymbol" style:font-charset="x-symbol"/>
  <style:font-face style:name="Roboto Mono" svg:font-family="&apos;Roboto Mono&apos;, Monaco, courier, monospace"/>
  <style:font-face style:name="Source Sans Pro" svg:font-family="&apos;Source Sans Pro&apos;, &apos;Helvetica Neue&apos;, Arial, sans-serif"/>
  <style:font-face style:name="FreeSans1" svg:font-family="FreeSans" style:font-family-generic="swiss"/>
  <style:font-face style:name="Courier New" svg:font-family="&apos;Courier New&apos;" style:font-family-generic="modern" style:font-pitch="fixed"/>
  <style:font-face style:name="Liberation Mono" svg:font-family="&apos;Liberation Mono&apos;" style:font-family-generic="modern" style:font-pitch="fixed"/>
  <style:font-face style:name="DejaVu Serif" svg:font-family="&apos;DejaVu Serif&apos;" style:font-family-generic="roman" style:font-pitch="variable"/>
  <style:font-face style:name="Liberation Sans" svg:font-family="&apos;Liberation Sans&apos;" style:font-family-generic="swiss" style:font-pitch="variable"/>
  <style:font-face style:name="FreeSans" svg:font-family="FreeSans" style:font-family-generic="system" style:font-pitch="variable"/>
  <style:font-face style:name="Tahoma" svg:font-family="Tahoma" style:font-family-generic="system" style:font-pitch="variable"/>
 </office:font-face-decls>
 <office:styles>
  <style:default-style style:family="graphic">
   <style:graphic-properties svg:stroke-color="#3465a4" draw:fill-color="#729fcf" fo:wrap-option="no-wrap" draw:shadow-offset-x="0.3cm" draw:shadow-offset-y="0.3cm" draw:start-line-spacing-horizontal="0.283cm" draw:start-line-spacing-vertical="0.283cm" draw:end-line-spacing-horizontal="0.283cm" draw:end-line-spacing-vertical="0.283cm" style:flow-with-text="false"/>
   <style:paragraph-properties style:text-autospace="ideograph-alpha" style:line-break="strict" style:writing-mode="lr-tb" style:font-independent-line-spacing="false">
    <style:tab-stops/>
   </style:paragraph-properties>
   <style:text-properties style:use-window-font-color="true" style:font-name="DejaVu Serif" fo:font-size="13pt" fo:language="en" fo:country="US" style:letter-kerning="true" style:font-name-asian="Tahoma" style:font-size-asian="12pt" style:language-asian="zh" style:country-asian="CN" style:font-name-complex="FreeSans" style:font-size-complex="12pt" style:language-complex="hi" style:country-complex="IN"/>
  </style:default-style>
  <style:default-style style:family="paragraph">
   <style:paragraph-properties fo:orphans="2" fo:widows="2" fo:hyphenation-ladder-count="no-limit" style:text-autospace="ideograph-alpha" style:punctuation-wrap="hanging" style:line-break="strict" style:tab-stop-distance="1cm" style:writing-mode="page"/>
   <style:text-properties style:use-window-font-color="true" style:font-name="DejaVu Serif" fo:font-size="13pt" fo:language="en" fo:country="US" style:letter-kerning="true" style:font-name-asian="Tahoma" style:font-size-asian="12pt" style:language-asian="zh" style:country-asian="CN" style:font-name-complex="FreeSans" style:font-size-complex="12pt" style:language-complex="hi" style:country-complex="IN" fo:hyphenate="false" fo:hyphenation-remain-char-count="2" fo:hyphenation-push-char-count="2"/>
  </style:default-style>
  <style:default-style style:family="table">
   <style:table-properties table:border-model="collapsing"/>
  </style:default-style>
  <style:default-style style:family="table-row">
   <style:table-row-properties fo:keep-together="auto"/>
  </style:default-style>
  <style:style style:name="Standard" style:family="paragraph" style:class="text"/>
  <style:style style:name="Heading" style:family="paragraph" style:parent-style-name="Standard" style:next-style-name="Text_20_body" style:class="text">
   <style:paragraph-properties fo:margin-top="0.423cm" fo:margin-bottom="0.212cm" loext:contextual-spacing="false" fo:keep-with-next="always"/>
   <style:text-properties style:font-name="Liberation Sans" fo:font-family="&apos;Liberation Sans&apos;" style:font-family-generic="swiss" style:font-pitch="variable" fo:font-size="14pt" style:font-name-asian="Tahoma" style:font-family-asian="Tahoma" style:font-family-generic-asian="system" style:font-pitch-asian="variable" style:font-size-asian="14pt" style:font-name-complex="FreeSans" style:font-family-complex="FreeSans" style:font-family-generic-complex="system" style:font-pitch-complex="variable" style:font-size-complex="14pt"/>
  </style:style>
  <style:style style:name="Text_20_body" style:display-name="Text body" style:family="paragraph" style:parent-style-name="Standard" style:class="text">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0.247cm" loext:contextual-spacing="false" fo:line-height="120%"/>
  </style:style>
  <style:style style:name="List" style:family="paragraph" style:parent-style-name="Text_20_body" style:class="list">
   <style:text-properties style:font-size-asian="12pt" style:font-name-complex="FreeSans1" style:font-family-complex="FreeSans" style:font-family-generic-complex="swiss"/>
  </style:style>
  <style:style style:name="Caption" style:family="paragraph" style:parent-style-name="Standard" style:class="extra">
   <style:paragraph-properties fo:margin-top="0.212cm" fo:margin-bottom="0.212cm" loext:contextual-spacing="false" text:number-lines="false" text:line-number="0"/>
   <style:text-properties fo:font-size="13pt" fo:font-style="italic" style:font-size-asian="12pt" style:font-style-asian="italic" style:font-name-complex="FreeSans1" style:font-family-complex="FreeSans" style:font-family-generic-complex="swiss" style:font-size-complex="12pt" style:font-style-complex="italic"/>
  </style:style>
  <style:style style:name="Index" style:family="paragraph" style:parent-style-name="Standard" style:class="index">
   <style:paragraph-properties text:number-lines="false" text:line-number="0"/>
   <style:text-properties style:font-size-asian="12pt" style:font-name-complex="FreeSans1" style:font-family-complex="FreeSans" style:font-family-generic-complex="swiss"/>
  </style:style>
  <style:style style:name="Heading_20_1" style:display-name="Heading 1" style:family="paragraph" style:parent-style-name="Heading" style:next-style-name="Text_20_body" style:default-outline-level="1" style:list-style-name="" style:class="text">
   <style:paragraph-properties fo:margin-top="0.423cm" fo:margin-bottom="0.212cm" loext:contextual-spacing="false"/>
   <style:text-properties style:font-name="DejaVu Serif" fo:font-family="&apos;DejaVu Serif&apos;" style:font-family-generic="roman" style:font-pitch="variable" fo:font-size="24pt" fo:font-weight="bold" style:font-name-asian="Tahoma" style:font-family-asian="Tahoma" style:font-family-generic-asian="system" style:font-pitch-asian="variable" style:font-size-asian="24pt" style:font-weight-asian="bold" style:font-name-complex="FreeSans" style:font-family-complex="FreeSans" style:font-family-generic-complex="system" style:font-pitch-complex="variable" style:font-size-complex="24pt" style:font-weight-complex="bold"/>
  </style:style>
  <style:style style:name="Heading_20_2" style:display-name="Heading 2" style:family="paragraph" style:parent-style-name="Heading" style:next-style-name="Text_20_body" style:default-outline-level="2" style:list-style-name="" style:class="text">
   <style:paragraph-properties fo:margin-top="0.353cm" fo:margin-bottom="0.212cm" loext:contextual-spacing="false"/>
   <style:text-properties style:font-name="DejaVu Serif" fo:font-family="&apos;DejaVu Serif&apos;" style:font-family-generic="roman" style:font-pitch="variable" fo:font-size="18pt" fo:font-weight="bold" style:font-name-asian="Tahoma" style:font-family-asian="Tahoma" style:font-family-generic-asian="system" style:font-pitch-asian="variable" style:font-size-asian="18pt" style:font-weight-asian="bold" style:font-name-complex="FreeSans" style:font-family-complex="FreeSans" style:font-family-generic-complex="system" style:font-pitch-complex="variable" style:font-size-complex="18pt" style:font-weight-complex="bold"/>
  </style:style>
  <style:style style:name="Table_20_Contents" style:display-name="Table Contents" style:family="paragraph" style:parent-style-name="Standard" style:class="extra">
   <style:paragraph-properties text:number-lines="false" text:line-number="0"/>
  </style:style>
  <style:style style:name="Table_20_Heading" style:display-name="Table Heading" style:family="paragraph" style:parent-style-name="Table_20_Contents" style:class="extra">
   <style:paragraph-properties fo:text-align="center" style:justify-single-word="false" text:number-lines="false" text:line-number="0"/>
   <style:text-properties fo:font-weight="bold" style:font-weight-asian="bold" style:font-weight-complex="bold"/>
  </style:style>
  <style:style style:name="Preformatted_20_Text" style:display-name="Preformatted Text" style:family="paragraph" style:parent-style-name="Standard" style:class="html">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" loext:contextual-spacing="false"/>
   <style:text-properties style:font-name="Liberation Mono" fo:font-family="&apos;Liberation Mono&apos;" style:font-family-generic="modern" style:font-pitch="fixed" fo:font-size="12pt" style:font-name-asian="Courier New" style:font-family-asian="&apos;Courier New&apos;" style:font-family-generic-asian="modern" style:font-pitch-asian="fixed" style:font-size-asian="12pt" style:font-name-complex="Liberation Mono" style:font-family-complex="&apos;Liberation Mono&apos;" style:font-family-generic-complex="modern" style:font-pitch-complex="fixed" style:font-size-complex="12pt"/>
  </style:style>
  <style:style style:name="Heading_20_3" style:display-name="Heading 3" style:family="paragraph" style:parent-style-name="Heading" style:next-style-name="Text_20_body" style:default-outline-level="3" style:list-style-name="" style:class="text">
   <style:paragraph-properties fo:margin-top="0.247cm" fo:margin-bottom="0.212cm" loext:contextual-spacing="false"/>
   <style:text-properties style:font-name="DejaVu Serif" fo:font-family="&apos;DejaVu Serif&apos;" style:font-family-generic="roman" style:font-pitch="variable" fo:font-size="14pt" fo:font-weight="bold" style:font-name-asian="Tahoma" style:font-family-asian="Tahoma" style:font-family-generic-asian="system" style:font-pitch-asian="variable" style:font-size-asian="14pt" style:font-weight-asian="bold" style:font-name-complex="FreeSans" style:font-family-complex="FreeSans" style:font-family-generic-complex="system" style:font-pitch-complex="variable" style:font-size-complex="14pt" style:font-weight-complex="bold"/>
  </style:style>
  <style:style style:name="Title" style:family="paragraph" style:parent-style-name="Heading" style:next-style-name="Text_20_body" style:class="chapter">
   <style:paragraph-properties fo:text-align="center" style:justify-single-word="false"/>
   <style:text-properties fo:font-size="28pt" fo:font-weight="bold" style:font-size-asian="28pt" style:font-weight-asian="bold" style:font-size-complex="28pt" style:font-weight-complex="bold"/>
  </style:style>
  <style:style style:name="Quotations" style:family="paragraph" style:parent-style-name="Standard" style:class="html">
   <style:paragraph-properties fo:margin-left="1cm" fo:margin-right="1cm" fo:margin-top="0cm" fo:margin-bottom="0.499cm" loext:contextual-spacing="false" fo:text-indent="0cm" style:auto-text-indent="false"/>
  </style:style>
  <style:style style:name="Heading_20_4" style:display-name="Heading 4" style:family="paragraph" style:parent-style-name="Heading" style:next-style-name="Text_20_body" style:default-outline-level="4" style:list-style-name="" style:class="text">
   <style:paragraph-properties fo:margin-top="0.212cm" fo:margin-bottom="0.212cm" loext:contextual-spacing="false"/>
   <style:text-properties style:font-name="DejaVu Serif" fo:font-family="&apos;DejaVu Serif&apos;" style:font-family-generic="roman" style:font-pitch="variable" fo:font-size="13pt" fo:font-weight="bold" style:font-name-asian="Tahoma" style:font-family-asian="Tahoma" style:font-family-generic-asian="system" style:font-pitch-asian="variable" style:font-size-asian="12pt" style:font-weight-asian="bold" style:font-name-complex="FreeSans" style:font-family-complex="FreeSans" style:font-family-generic-complex="system" style:font-pitch-complex="variable" style:font-size-complex="12pt" style:font-weight-complex="bold"/>
  </style:style>
  <style:style style:name="Strong_20_Emphasis" style:display-name="Strong Emphasis" style:family="text">
   <style:text-properties fo:font-weight="bold" style:font-weight-asian="bold" style:font-weight-complex="bold"/>
  </style:style>
  <style:style style:name="Source_20_Text" style:display-name="Source Text" style:family="text">
   <style:text-properties style:font-name="Liberation Mono" fo:font-family="&apos;Liberation Mono&apos;" style:font-family-generic="modern" style:font-pitch="fixed" style:font-name-asian="Courier New" style:font-family-asian="&apos;Courier New&apos;" style:font-family-generic-asian="modern" style:font-pitch-asian="fixed" style:font-name-complex="Liberation Mono" style:font-family-complex="&apos;Liberation Mono&apos;" style:font-family-generic-complex="modern" style:font-pitch-complex="fixed"/>
  </style:style>
  <style:style style:name="Internet_20_link" style:display-name="Internet link" style:family="text">
   <style:text-properties fo:color="#000080" fo:language="zxx" fo:country="none" style:text-underline-style="solid" style:text-underline-width="auto" style:text-underline-color="font-color" style:language-asian="zxx" style:country-asian="none" style:language-complex="zxx" style:country-complex="none"/>
  </style:style>
  <style:style style:name="Numbering_20_Symbols" style:display-name="Numbering Symbols" style:family="text"/>
  <style:style style:name="Bullet_20_Symbols" style:display-name="Bullet Symbols" style:family="text">
   <style:text-properties style:font-name="OpenSymbol" fo:font-family="OpenSymbol" style:font-charset="x-symbol" style:font-name-asian="OpenSymbol" style:font-family-asian="OpenSymbol" style:font-charset-asian="x-symbol" style:font-name-complex="OpenSymbol" style:font-family-complex="OpenSymbol" style:font-charset-complex="x-symbol"/>
  </style:style>
  <style:style style:name="Emphasis" style:family="text">
   <style:text-properties fo:font-style="italic" style:font-style-asian="italic" style:font-style-complex="italic"/>
  </style:style>
  <style:style style:name="Graphics" style:family="graphic">
   <style:graphic-properties text:anchor-type="paragraph" svg:x="0cm" svg:y="0cm" style:wrap="dynamic" style:number-wrapped-paragraphs="no-limit" style:wrap-contour="false" style:vertical-pos="top" style:vertical-rel="paragraph" style:horizontal-pos="center" style:horizontal-rel="paragraph"/>
  </style:style>
  <text:outline-style style:name="Outline">
   <text:outline-level-style text:level="1" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="0.762cm" fo:text-indent="-0.762cm" fo:margin-left="0.762cm"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="2" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="1.016cm" fo:text-indent="-1.016cm" fo:margin-left="1.016cm"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="3" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="1.27cm" fo:text-indent="-1.27cm" fo:margin-left="1.27cm"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="4" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="1.524cm" fo:text-indent="-1.524cm" fo:margin-left="1.524cm"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="5" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="1.778cm" fo:text-indent="-1.778cm" fo:margin-left="1.778cm"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="6" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="2.032cm" fo:text-indent="-2.032cm" fo:margin-left="2.032cm"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="7" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="2.286cm" fo:text-indent="-2.286cm" fo:margin-left="2.286cm"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="8" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="2.54cm" fo:text-indent="-2.54cm" fo:margin-left="2.54cm"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="9" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="2.794cm" fo:text-indent="-2.794cm" fo:margin-left="2.794cm"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="10" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="3.048cm" fo:text-indent="-3.048cm" fo:margin-left="3.048cm"/>
    </style:list-level-properties>
   </text:outline-level-style>
  </text:outline-style>
  <text:notes-configuration text:note-class="footnote" style:num-format="1" text:start-value="0" text:footnotes-position="page" text:start-numbering-at="document"/>
  <text:notes-configuration text:note-class="endnote" style:num-format="i" text:start-value="0"/>
  <text:linenumbering-configuration text:number-lines="false" text:offset="0.499cm" style:num-format="1" text:number-position="left" text:increment="5"/>
 </office:styles>
 <office:automatic-styles>
  <style:style style:name="Table26" style:family="table">
   <style:table-properties style:width="18.703cm" table:align="left"/>
  </style:style>
  <style:style style:name="Table26.A" style:family="table-column">
   <style:table-column-properties style:column-width="11.703cm"/>
  </style:style>
  <style:style style:name="Table26.A1" style:family="table-cell">
   <style:table-cell-properties style:vertical-align="middle" fo:padding="0cm" fo:border="none"/>
  </style:style>
  <style:style style:name="Table27" style:family="table">
   <style:table-properties style:width="18.396cm" table:align="left"/>
  </style:style>
  <style:style style:name="Table27.A" style:family="table-column">
   <style:table-column-properties style:column-width="18.396cm"/>
  </style:style>
  <style:style style:name="Table27.A1" style:family="table-cell">
   <style:table-cell-properties style:vertical-align="middle" fo:padding="0cm" fo:border="none"/>
  </style:style>
  <style:style style:name="Table28" style:family="table">
   <style:table-properties style:width="18.112cm" fo:margin-left="0cm" table:align="left"/>
  </style:style>
  <style:style style:name="Table28.A" style:family="table-column">
   <style:table-column-properties style:column-width="19.112cm"/>
  </style:style>
  <style:style style:name="Table28.A1" style:family="table-cell">
   <style:table-cell-properties style:vertical-align="middle" fo:padding="0cm" fo:border="none"/>
  </style:style>
  <style:style style:name="Table29" style:family="table">
   <style:table-properties style:width="18.012cm" table:align="left"/>
  </style:style>
  <style:style style:name="Table29.A" style:family="table-column">
   <style:table-column-properties style:column-width="9.012cm"/>
  </style:style>
  <style:style style:name="Table29.A1" style:family="table-cell">
   <style:table-cell-properties style:vertical-align="middle" fo:padding="0cm" fo:border="none"/>
  </style:style>
  <style:style style:name="Table30" style:family="table">
   <style:table-properties style:width="18.302cm" table:align="left"/>
  </style:style>
  <style:style style:name="Table30.A" style:family="table-column">
   <style:table-column-properties style:column-width="18.302cm"/>
  </style:style>
  <style:style style:name="Table30.A1" style:family="table-cell">
   <style:table-cell-properties style:vertical-align="middle" fo:padding="0cm" fo:border="none"/>
  </style:style>
  <style:style style:name="Table31" style:family="table">
   <style:table-properties style:width="18.283cm" table:align="left"/>
  </style:style>
  <style:style style:name="Table31.A" style:family="table-column">
   <style:table-column-properties style:column-width="8.283cm"/>
  </style:style>
  <style:style style:name="Table31.A1" style:family="table-cell">
   <style:table-cell-properties style:vertical-align="middle" fo:padding="0cm" fo:border="none"/>
  </style:style>
  <style:style style:name="Table32" style:family="table">
   <style:table-properties style:width="18.205cm" table:align="left"/>
  </style:style>
  <style:style style:name="Table32.A" style:family="table-column">
   <style:table-column-properties style:column-width="7.205cm"/>
  </style:style>
  <style:style style:name="Table32.A1" style:family="table-cell">
   <style:table-cell-properties style:vertical-align="middle" fo:padding="0cm" fo:border="none"/>
  </style:style>
  <style:style style:name="Table33" style:family="table">
   <style:table-properties style:width="18.899cm" table:align="left"/>
  </style:style>
  <style:style style:name="Table33.A" style:family="table-column">
   <style:table-column-properties style:column-width="10.899cm"/>
  </style:style>
  <style:style style:name="Table33.A1" style:family="table-cell">
   <style:table-cell-properties style:vertical-align="middle" fo:padding="0cm" fo:border="none"/>
  </style:style>
  <style:style style:name="Table34" style:family="table">
   <style:table-properties style:width="18.382cm" table:align="left"/>
  </style:style>
  <style:style style:name="Table34.A" style:family="table-column">
   <style:table-column-properties style:column-width="11.382cm"/>
  </style:style>
  <style:style style:name="Table34.A1" style:family="table-cell">
   <style:table-cell-properties style:vertical-align="middle" fo:padding="0cm" fo:border="none"/>
  </style:style>
  <style:style style:name="Table35" style:family="table">
   <style:table-properties style:width="18.895cm" table:align="left"/>
  </style:style>
  <style:style style:name="Table35.A" style:family="table-column">
   <style:table-column-properties style:column-width="8.895cm"/>
  </style:style>
  <style:style style:name="Table35.A1" style:family="table-cell">
   <style:table-cell-properties style:vertical-align="middle" fo:padding="0cm" fo:border="none"/>
  </style:style>
  <style:style style:name="Table36" style:family="table">
   <style:table-properties style:width="18.41cm" table:align="left"/>
  </style:style>
  <style:style style:name="Table36.A" style:family="table-column">
   <style:table-column-properties style:column-width="7.41cm"/>
  </style:style>
  <style:style style:name="Table36.A1" style:family="table-cell">
   <style:table-cell-properties style:vertical-align="middle" fo:padding="0cm" fo:border="none"/>
  </style:style>
  <style:style style:name="Table37" style:family="table">
   <style:table-properties style:width="18.283cm" table:align="left"/>
  </style:style>
  <style:style style:name="Table37.A" style:family="table-column">
   <style:table-column-properties style:column-width="10.283cm"/>
  </style:style>
  <style:style style:name="Table37.A1" style:family="table-cell">
   <style:table-cell-properties style:vertical-align="middle" fo:padding="0cm" fo:border="none"/>
  </style:style>
  <style:style style:name="Table38" style:family="table">
   <style:table-properties style:width="18.393cm" table:align="left"/>
  </style:style>
  <style:style style:name="Table38.A" style:family="table-column">
   <style:table-column-properties style:column-width="9.393cm"/>
  </style:style>
  <style:style style:name="Table38.A1" style:family="table-cell">
   <style:table-cell-properties style:vertical-align="middle" fo:padding="0cm" fo:border="none"/>
  </style:style>
  <style:style style:name="Table39" style:family="table">
   <style:table-properties style:width="18.655cm" table:align="left"/>
  </style:style>
  <style:style style:name="Table39.A" style:family="table-column">
   <style:table-column-properties style:column-width="3.655cm"/>
  </style:style>
  <style:style style:name="Table39.A1" style:family="table-cell">
   <style:table-cell-properties style:vertical-align="middle" fo:padding="0cm" fo:border="none"/>
  </style:style>
  <style:style style:name="Table40" style:family="table">
   <style:table-properties style:width="18.281cm" table:align="left"/>
  </style:style>
  <style:style style:name="Table40.A" style:family="table-column">
   <style:table-column-properties style:column-width="7.281cm"/>
  </style:style>
  <style:style style:name="Table40.A1" style:family="table-cell">
   <style:table-cell-properties style:vertical-align="middle" fo:padding="0cm" fo:border="none"/>
  </style:style>
  <style:style style:name="Table41" style:family="table">
   <style:table-properties style:width="18.4cm" table:align="left"/>
  </style:style>
  <style:style style:name="Table41.A" style:family="table-column">
   <style:table-column-properties style:column-width="9.4cm"/>
  </style:style>
  <style:style style:name="Table41.A1" style:family="table-cell">
   <style:table-cell-properties style:vertical-align="middle" fo:padding="0cm" fo:border="none"/>
  </style:style>
  <style:style style:name="Table42" style:family="table">
   <style:table-properties style:width="18.102cm" table:align="left"/>
  </style:style>
  <style:style style:name="Table42.A" style:family="table-column">
   <style:table-column-properties style:column-width="11.102cm"/>
  </style:style>
  <style:style style:name="Table42.A1" style:family="table-cell">
   <style:table-cell-properties style:vertical-align="middle" fo:padding="0cm" fo:border="none"/>
  </style:style>
  <style:style style:name="Table43" style:family="table">
   <style:table-properties style:width="18.661cm" table:align="left"/>
  </style:style>
  <style:style style:name="Table43.A" style:family="table-column">
   <style:table-column-properties style:column-width="9.661cm"/>
  </style:style>
  <style:style style:name="Table43.A1" style:family="table-cell">
   <style:table-cell-properties style:vertical-align="middle" fo:padding="0cm" fo:border="none"/>
  </style:style>
  <style:style style:name="Table44" style:family="table">
   <style:table-properties style:width="18.008cm" table:align="left"/>
  </style:style>
  <style:style style:name="Table44.A" style:family="table-column">
   <style:table-column-properties style:column-width="10.008cm"/>
  </style:style>
  <style:style style:name="Table44.A1" style:family="table-cell">
   <style:table-cell-properties style:vertical-align="middle" fo:padding="0cm" fo:border="none"/>
  </style:style>
  <style:style style:name="Table45" style:family="table">
   <style:table-properties style:width="18.37cm" table:align="left"/>
  </style:style>
  <style:style style:name="Table45.A" style:family="table-column">
   <style:table-column-properties style:column-width="12.37cm"/>
  </style:style>
  <style:style style:name="Table45.A1" style:family="table-cell">
   <style:table-cell-properties style:vertical-align="middle" fo:padding="0cm" fo:border="none"/>
  </style:style>
  <style:style style:name="Table46" style:family="table">
   <style:table-properties style:width="18.483cm" table:align="left"/>
  </style:style>
  <style:style style:name="Table46.A" style:family="table-column">
   <style:table-column-properties style:column-width="15.483cm"/>
  </style:style>
  <style:style style:name="Table46.A1" style:family="table-cell">
   <style:table-cell-properties style:vertical-align="middle" fo:padding="0cm" fo:border="none"/>
  </style:style>
  <style:style style:name="Table47" style:family="table">
   <style:table-properties style:width="18.478cm" table:align="left"/>
  </style:style>
  <style:style style:name="Table47.A" style:family="table-column">
   <style:table-column-properties style:column-width="12.478cm"/>
  </style:style>
  <style:style style:name="Table47.A1" style:family="table-cell">
   <style:table-cell-properties style:vertical-align="middle" fo:padding="0cm" fo:border="none"/>
  </style:style>
  <style:style style:name="Table48" style:family="table">
   <style:table-properties style:width="18.79cm" table:align="left"/>
  </style:style>
  <style:style style:name="Table48.A" style:family="table-column">
   <style:table-column-properties style:column-width="10.79cm"/>
  </style:style>
  <style:style style:name="Table48.A1" style:family="table-cell">
   <style:table-cell-properties style:vertical-align="middle" fo:padding="0cm" fo:border="none"/>
  </style:style>
  <style:style style:name="Table49" style:family="table">
   <style:table-properties style:width="18.685cm" table:align="left"/>
  </style:style>
  <style:style style:name="Table49.A" style:family="table-column">
   <style:table-column-properties style:column-width="6.685cm"/>
  </style:style>
  <style:style style:name="Table49.A1" style:family="table-cell">
   <style:table-cell-properties style:vertical-align="middle" fo:padding="0cm" fo:border="none"/>
  </style:style>
  <style:style style:name="Table50" style:family="table">
   <style:table-properties style:width="18.722cm" table:align="left"/>
  </style:style>
  <style:style style:name="Table50.A" style:family="table-column">
   <style:table-column-properties style:column-width="6.722cm"/>
  </style:style>
  <style:style style:name="Table50.A1" style:family="table-cell">
   <style:table-cell-properties style:vertical-align="middle" fo:padding="0cm" fo:border="none"/>
  </style:style>
  <style:style style:name="Table1" style:family="table">
   <style:table-properties style:width="18.892cm" table:align="left"/>
  </style:style>
  <style:style style:name="Table1.A" style:family="table-column">
   <style:table-column-properties style:column-width="10.892cm"/>
  </style:style>
  <style:style style:name="Table1.A1" style:family="table-cell">
   <style:table-cell-properties style:vertical-align="middle" fo:padding="0cm" fo:border="none"/>
  </style:style>
  <style:style style:name="Table2" style:family="table">
   <style:table-properties style:width="18.694cm" table:align="left"/>
  </style:style>
  <style:style style:name="Table2.A" style:family="table-column">
   <style:table-column-properties style:column-width="7.694cm"/>
  </style:style>
  <style:style style:name="Table2.A1" style:family="table-cell">
   <style:table-cell-properties style:vertical-align="middle" fo:padding="0cm" fo:border="none"/>
  </style:style>
  <style:style style:name="Table3" style:family="table">
   <style:table-properties style:width="18.911cm" table:align="left"/>
  </style:style>
  <style:style style:name="Table3.A" style:family="table-column">
   <style:table-column-properties style:column-width="5.911cm"/>
  </style:style>
  <style:style style:name="Table3.A1" style:family="table-cell">
   <style:table-cell-properties style:vertical-align="middle" fo:padding="0cm" fo:border="none"/>
  </style:style>
  <style:style style:name="Table4" style:family="table">
   <style:table-properties style:width="18.765cm" table:align="left"/>
  </style:style>
  <style:style style:name="Table4.A" style:family="table-column">
   <style:table-column-properties style:column-width="8.765cm"/>
  </style:style>
  <style:style style:name="Table4.A1" style:family="table-cell">
   <style:table-cell-properties style:vertical-align="middle" fo:padding="0cm" fo:border="none"/>
  </style:style>
  <style:style style:name="Table5" style:family="table">
   <style:table-properties style:width="18.206cm" table:align="left"/>
  </style:style>
  <style:style style:name="Table5.A" style:family="table-column">
   <style:table-column-properties style:column-width="13.206cm"/>
  </style:style>
  <style:style style:name="Table5.A1" style:family="table-cell">
   <style:table-cell-properties style:vertical-align="middle" fo:padding="0cm" fo:border="none"/>
  </style:style>
  <style:style style:name="Table6" style:family="table">
   <style:table-properties style:width="18.213cm" table:align="left"/>
  </style:style>
  <style:style style:name="Table6.A" style:family="table-column">
   <style:table-column-properties style:column-width="9.213cm"/>
  </style:style>
  <style:style style:name="Table6.A1" style:family="table-cell">
   <style:table-cell-properties style:vertical-align="middle" fo:padding="0cm" fo:border="none"/>
  </style:style>
  <style:style style:name="Table7" style:family="table">
   <style:table-properties style:width="18.328cm" table:align="left"/>
  </style:style>
  <style:style style:name="Table7.A" style:family="table-column">
   <style:table-column-properties style:column-width="12.328cm"/>
  </style:style>
  <style:style style:name="Table7.A1" style:family="table-cell">
   <style:table-cell-properties style:vertical-align="middle" fo:padding="0cm" fo:border="none"/>
  </style:style>
  <style:style style:name="Table8" style:family="table">
   <style:table-properties style:width="18.331cm" table:align="left"/>
  </style:style>
  <style:style style:name="Table8.A" style:family="table-column">
   <style:table-column-properties style:column-width="9.331cm"/>
  </style:style>
  <style:style style:name="Table8.A1" style:family="table-cell">
   <style:table-cell-properties style:vertical-align="middle" fo:padding="0cm" fo:border="none"/>
  </style:style>
  <style:style style:name="Table9" style:family="table">
   <style:table-properties style:width="18.579cm" table:align="left"/>
  </style:style>
  <style:style style:name="Table9.A" style:family="table-column">
   <style:table-column-properties style:column-width="5.579cm"/>
  </style:style>
  <style:style style:name="Table9.A1" style:family="table-cell">
   <style:table-cell-properties style:vertical-align="middle" fo:padding="0cm" fo:border="none"/>
  </style:style>
  <style:style style:name="Table10" style:family="table">
   <style:table-properties style:width="18.479cm" table:align="left"/>
  </style:style>
  <style:style style:name="Table10.A" style:family="table-column">
   <style:table-column-properties style:column-width="7.479cm"/>
  </style:style>
  <style:style style:name="Table10.A1" style:family="table-cell">
   <style:table-cell-properties style:vertical-align="middle" fo:padding="0cm" fo:border="none"/>
  </style:style>
  <style:style style:name="Table11" style:family="table">
   <style:table-properties style:width="18.465cm" table:align="left"/>
  </style:style>
  <style:style style:name="Table11.A" style:family="table-column">
   <style:table-column-properties style:column-width="9.465cm"/>
  </style:style>
  <style:style style:name="Table11.A1" style:family="table-cell">
   <style:table-cell-properties style:vertical-align="middle" fo:padding="0cm" fo:border="none"/>
  </style:style>
  <style:style style:name="Table12" style:family="table">
   <style:table-properties style:width="18.061cm" table:align="left"/>
  </style:style>
  <style:style style:name="Table12.A" style:family="table-column">
   <style:table-column-properties style:column-width="8.061cm"/>
  </style:style>
  <style:style style:name="Table12.A1" style:family="table-cell">
   <style:table-cell-properties style:vertical-align="middle" fo:padding="0cm" fo:border="none"/>
  </style:style>
  <style:style style:name="Table13" style:family="table">
   <style:table-properties style:width="18.366cm" table:align="left"/>
  </style:style>
  <style:style style:name="Table13.A" style:family="table-column">
   <style:table-column-properties style:column-width="6.366cm"/>
  </style:style>
  <style:style style:name="Table13.A1" style:family="table-cell">
   <style:table-cell-properties style:vertical-align="middle" fo:padding="0cm" fo:border="none"/>
  </style:style>
  <style:style style:name="Table14" style:family="table">
   <style:table-properties style:width="18.645cm" table:align="left"/>
  </style:style>
  <style:style style:name="Table14.A" style:family="table-column">
   <style:table-column-properties style:column-width="10.645cm"/>
  </style:style>
  <style:style style:name="Table14.A1" style:family="table-cell">
   <style:table-cell-properties style:vertical-align="middle" fo:padding="0cm" fo:border="none"/>
  </style:style>
  <style:style style:name="Table15" style:family="table">
   <style:table-properties style:width="18.284cm" table:align="left"/>
  </style:style>
  <style:style style:name="Table15.A" style:family="table-column">
   <style:table-column-properties style:column-width="4.284cm"/>
  </style:style>
  <style:style style:name="Table15.A1" style:family="table-cell">
   <style:table-cell-properties style:vertical-align="middle" fo:padding="0cm" fo:border="none"/>
  </style:style>
  <style:style style:name="Table16" style:family="table">
   <style:table-properties style:width="18.821cm" table:align="left"/>
  </style:style>
  <style:style style:name="Table16.A" style:family="table-column">
   <style:table-column-properties style:column-width="10.821cm"/>
  </style:style>
  <style:style style:name="Table16.A1" style:family="table-cell">
   <style:table-cell-properties style:vertical-align="middle" fo:padding="0cm" fo:border="none"/>
  </style:style>
  <style:style style:name="Table17" style:family="table">
   <style:table-properties style:width="18.386cm" table:align="left"/>
  </style:style>
  <style:style style:name="Table17.A" style:family="table-column">
   <style:table-column-properties style:column-width="13.386cm"/>
  </style:style>
  <style:style style:name="Table17.A1" style:family="table-cell">
   <style:table-cell-properties style:vertical-align="middle" fo:padding="0cm" fo:border="none"/>
  </style:style>
  <style:style style:name="Table18" style:family="table">
   <style:table-properties style:width="18.671cm" table:align="left"/>
  </style:style>
  <style:style style:name="Table18.A" style:family="table-column">
   <style:table-column-properties style:column-width="4.671cm"/>
  </style:style>
  <style:style style:name="Table18.A1" style:family="table-cell">
   <style:table-cell-properties style:vertical-align="middle" fo:padding="0cm" fo:border="none"/>
  </style:style>
  <style:style style:name="Table19" style:family="table">
   <style:table-properties style:width="18.696cm" table:align="left"/>
  </style:style>
  <style:style style:name="Table19.A" style:family="table-column">
   <style:table-column-properties style:column-width="5.696cm"/>
  </style:style>
  <style:style style:name="Table19.A1" style:family="table-cell">
   <style:table-cell-properties style:vertical-align="middle" fo:padding="0cm" fo:border="none"/>
  </style:style>
  <style:style style:name="Table20" style:family="table">
   <style:table-properties style:width="18.978cm" table:align="left"/>
  </style:style>
  <style:style style:name="Table20.A" style:family="table-column">
   <style:table-column-properties style:column-width="5.978cm"/>
  </style:style>
  <style:style style:name="Table20.A1" style:family="table-cell">
   <style:table-cell-properties style:vertical-align="middle" fo:padding="0cm" fo:border="none"/>
  </style:style>
  <style:style style:name="Table21" style:family="table">
   <style:table-properties style:width="18.199cm" table:align="left"/>
  </style:style>
  <style:style style:name="Table21.A" style:family="table-column">
   <style:table-column-properties style:column-width="12.199cm"/>
  </style:style>
  <style:style style:name="Table21.A1" style:family="table-cell">
   <style:table-cell-properties style:vertical-align="middle" fo:padding="0cm" fo:border="none"/>
  </style:style>
  <style:style style:name="Table22" style:family="table">
   <style:table-properties style:width="18.146cm" table:align="left"/>
  </style:style>
  <style:style style:name="Table22.A" style:family="table-column">
   <style:table-column-properties style:column-width="8.146cm"/>
  </style:style>
  <style:style style:name="Table22.A1" style:family="table-cell">
   <style:table-cell-properties style:vertical-align="middle" fo:padding="0cm" fo:border="none"/>
  </style:style>
  <style:style style:name="Table23" style:family="table">
   <style:table-properties style:width="18.881cm" table:align="left"/>
  </style:style>
  <style:style style:name="Table23.A" style:family="table-column">
   <style:table-column-properties style:column-width="7.881cm"/>
  </style:style>
  <style:style style:name="Table23.A1" style:family="table-cell">
   <style:table-cell-properties style:vertical-align="middle" fo:padding="0cm" fo:border="none"/>
  </style:style>
  <style:style style:name="Table24" style:family="table">
   <style:table-properties style:width="18.992cm" table:align="left"/>
  </style:style>
  <style:style style:name="Table24.A" style:family="table-column">
   <style:table-column-properties style:column-width="8.992cm"/>
  </style:style>
  <style:style style:name="Table24.A1" style:family="table-cell">
   <style:table-cell-properties style:vertical-align="middle" fo:padding="0cm" fo:border="none"/>
  </style:style>
  <style:style style:name="Table25" style:family="table">
   <style:table-properties style:width="18.79cm" table:align="left"/>
  </style:style>
  <style:style style:name="Table25.A" style:family="table-column">
   <style:table-column-properties style:column-width="10.79cm"/>
  </style:style>
  <style:style style:name="Table25.A1" style:family="table-cell">
   <style:table-cell-properties style:vertical-align="middle" fo:padding="0cm" fo:border="none"/>
  </style:style>
  <style:style style:name="Table51" style:family="table">
   <style:table-properties style:width="18.586cm" table:align="left"/>
  </style:style>
  <style:style style:name="Table51.A" style:family="table-column">
   <style:table-column-properties style:column-width="5.128cm"/>
  </style:style>
  <style:style style:name="Table51.B" style:family="table-column">
   <style:table-column-properties style:column-width="3.45cm"/>
  </style:style>
  <style:style style:name="Table51.C" style:family="table-column">
   <style:table-column-properties style:column-width="9.008cm"/>
  </style:style>
  <style:style style:name="Table51.A1" style:family="table-cell">
   <style:table-cell-properties style:vertical-align="middle" fo:padding="0.049cm" fo:border="none"/>
  </style:style>
  <style:style style:name="Table52" style:family="table">
   <style:table-properties style:width="18.47cm" table:align="left"/>
  </style:style>
  <style:style style:name="Table52.A" style:family="table-column">
   <style:table-column-properties style:column-width="6.108cm"/>
  </style:style>
  <style:style style:name="Table52.B" style:family="table-column">
   <style:table-column-properties style:column-width="4.362cm"/>
  </style:style>
  <style:style style:name="Table52.A1" style:family="table-cell">
   <style:table-cell-properties style:vertical-align="middle" fo:padding="0.049cm" fo:border="none"/>
  </style:style>
  <style:style style:name="Table53" style:family="table">
   <style:table-properties style:width="18.286cm" table:align="left"/>
  </style:style>
  <style:style style:name="Table53.A" style:family="table-column">
   <style:table-column-properties style:column-width="8.162cm"/>
  </style:style>
  <style:style style:name="Table53.B" style:family="table-column">
   <style:table-column-properties style:column-width="5.124cm"/>
  </style:style>
  <style:style style:name="Table53.A1" style:family="table-cell">
   <style:table-cell-properties style:vertical-align="middle" fo:padding="0.049cm" fo:border="none"/>
  </style:style>
  <style:style style:name="P1" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:paragraph-properties fo:margin-left="0cm" fo:margin-right="0cm" fo:orphans="2" fo:widows="2" fo:text-indent="0cm" style:auto-text-indent="false"/>
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" fo:color="#34495e" style:font-name="Source Sans Pro" fo:font-size="13pt" fo:letter-spacing="normal" fo:font-style="normal" fo:font-weight="normal"/>
  </style:style>
  <style:style style:name="P2" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:paragraph-properties fo:margin-left="0cm" fo:margin-right="0cm" fo:orphans="2" fo:widows="2" fo:text-indent="0cm" style:auto-text-indent="false"/>
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" fo:color="#34495e" fo:letter-spacing="normal"/>
  </style:style>
  <style:style style:name="P3" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:paragraph-properties fo:margin-left="0cm" fo:margin-right="0cm" fo:orphans="2" fo:widows="2" fo:text-indent="0cm" style:auto-text-indent="false"/>
  </style:style>
  <style:style style:name="P4" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:paragraph-properties fo:margin-left="0cm" fo:margin-right="0cm" fo:orphans="2" fo:widows="2" fo:text-indent="0cm" style:auto-text-indent="false" fo:padding-left="0.794cm" fo:padding-right="0cm" fo:padding-top="0cm" fo:padding-bottom="0cm" fo:border-left="3pt solid #ff6666" fo:border-right="none" fo:border-top="none" fo:border-bottom="none"/>
  </style:style>
  <style:style style:name="P5" style:family="paragraph" style:parent-style-name="Preformatted_20_Text">
   <style:paragraph-properties fo:margin-left="0cm" fo:margin-right="0cm" fo:margin-top="0cm" fo:margin-bottom="0cm" loext:contextual-spacing="false" fo:text-indent="0cm" style:auto-text-indent="false"/>
   <style:text-properties fo:color="#b3b3b3" style:font-name="Roboto Mono"/>
  </style:style>
  <style:style style:name="P6" style:family="paragraph" style:parent-style-name="Preformatted_20_Text">
   <style:paragraph-properties fo:margin-left="0cm" fo:margin-right="0cm" fo:margin-top="0cm" fo:margin-bottom="0cm" loext:contextual-spacing="false" fo:text-indent="0cm" style:auto-text-indent="false"/>
   <style:text-properties fo:color="#525252" style:font-name="Roboto Mono"/>
  </style:style>
  <style:style style:name="P7" style:family="paragraph" style:parent-style-name="Preformatted_20_Text">
   <style:paragraph-properties fo:margin-left="0cm" fo:margin-right="0cm" fo:margin-top="0cm" fo:margin-bottom="0cm" loext:contextual-spacing="false" fo:text-indent="0cm" style:auto-text-indent="false"/>
   <style:text-properties fo:color="#2973b7" style:font-name="Roboto Mono"/>
  </style:style>
  <style:style style:name="P8" style:family="paragraph" style:parent-style-name="Heading_20_1">
   <style:paragraph-properties fo:margin-left="0cm" fo:margin-right="0cm" fo:margin-top="0cm" fo:margin-bottom="0cm" loext:contextual-spacing="false" fo:orphans="2" fo:widows="2" fo:text-indent="0cm" style:auto-text-indent="false"/>
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" fo:color="#2c3e50" style:font-name="Source Sans Pro" fo:letter-spacing="normal" fo:font-style="normal" fo:font-weight="bold"/>
  </style:style>
  <style:style style:name="P9" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:paragraph-properties fo:margin-left="0cm" fo:margin-right="0cm" fo:margin-top="0cm" fo:margin-bottom="0cm" loext:contextual-spacing="false" fo:orphans="2" fo:widows="2" fo:text-indent="0cm" style:auto-text-indent="false"/>
  </style:style>
  <style:style style:name="P10" style:family="paragraph" style:parent-style-name="Heading_20_2">
   <style:paragraph-properties fo:margin-left="0cm" fo:margin-right="0cm" fo:margin-top="1.191cm" fo:margin-bottom="1.191cm" loext:contextual-spacing="false" fo:text-indent="0cm" style:auto-text-indent="false" fo:padding-left="0cm" fo:padding-right="0cm" fo:padding-top="0cm" fo:padding-bottom="0.049cm" fo:border-left="none" fo:border-right="none" fo:border-top="none" fo:border-bottom="0.06pt solid #dddddd"/>
   <style:text-properties fo:color="#2c3e50" fo:font-weight="bold"/>
  </style:style>
  <style:style style:name="P11" style:family="paragraph" style:parent-style-name="Heading_20_2">
   <style:paragraph-properties fo:margin-left="0cm" fo:margin-right="0cm" fo:margin-top="1.191cm" fo:margin-bottom="1.191cm" loext:contextual-spacing="false" fo:orphans="2" fo:widows="2" fo:text-indent="0cm" style:auto-text-indent="false" fo:padding-left="0cm" fo:padding-right="0cm" fo:padding-top="0cm" fo:padding-bottom="0.049cm" fo:border-left="none" fo:border-right="none" fo:border-top="none" fo:border-bottom="0.06pt solid #dddddd"/>
  </style:style>
  <style:style style:name="P12" style:family="paragraph" style:parent-style-name="Heading_20_3">
   <style:paragraph-properties fo:margin-left="0cm" fo:margin-right="0cm" fo:margin-top="1.376cm" fo:margin-bottom="1.376cm" loext:contextual-spacing="false" fo:text-indent="0cm" style:auto-text-indent="false"/>
  </style:style>
  <style:style style:name="P13" style:family="paragraph" style:parent-style-name="Heading_20_3">
   <style:paragraph-properties fo:margin-left="0cm" fo:margin-right="0cm" fo:margin-top="1.376cm" fo:margin-bottom="1.376cm" loext:contextual-spacing="false" fo:text-indent="0cm" style:auto-text-indent="false"/>
   <style:text-properties fo:color="#2c3e50" fo:font-weight="bold"/>
  </style:style>
  <style:style style:name="P14" style:family="paragraph" style:parent-style-name="Preformatted_20_Text">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" loext:contextual-spacing="false"/>
   <style:text-properties fo:color="#525252"/>
  </style:style>
  <style:style style:name="P15" style:family="paragraph" style:parent-style-name="Preformatted_20_Text">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" loext:contextual-spacing="false"/>
   <style:text-properties fo:color="#525252" style:font-name="Roboto Mono"/>
  </style:style>
  <style:style style:name="P16" style:family="paragraph" style:parent-style-name="Preformatted_20_Text">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" loext:contextual-spacing="false"/>
   <style:text-properties fo:color="#b3b3b3" style:font-name="Roboto Mono"/>
  </style:style>
  <style:style style:name="P17" style:family="paragraph" style:parent-style-name="Preformatted_20_Text">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" loext:contextual-spacing="false"/>
   <style:text-properties fo:color="#2973b7" style:font-name="Roboto Mono"/>
  </style:style>
  <style:style style:name="P18" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" loext:contextual-spacing="false"/>
  </style:style>
  <style:style style:name="P19" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" loext:contextual-spacing="false" fo:orphans="2" fo:widows="2"/>
  </style:style>
  <style:style style:name="P20" style:family="paragraph" style:parent-style-name="Heading_20_1">
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" fo:color="#2c3e50" style:font-name="Source Sans Pro" fo:letter-spacing="normal" fo:font-style="normal" fo:font-weight="bold"/>
  </style:style>
  <style:style style:name="P21" style:family="paragraph" style:parent-style-name="Heading_20_1">
   <style:text-properties officeooo:rsid="00183293" officeooo:paragraph-rsid="00183293"/>
  </style:style>
  <style:style style:name="P22" style:family="paragraph" style:parent-style-name="Heading_20_1">
   <style:text-properties officeooo:rsid="001cee37" officeooo:paragraph-rsid="001cee37"/>
  </style:style>
  <style:style style:name="P23" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:text-properties officeooo:rsid="001670f0" officeooo:paragraph-rsid="001670f0"/>
  </style:style>
  <style:style style:name="P24" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:text-properties officeooo:rsid="00183293" officeooo:paragraph-rsid="00183293"/>
  </style:style>
  <style:style style:name="P25" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:text-properties officeooo:rsid="001cee37" officeooo:paragraph-rsid="001cee37"/>
  </style:style>
  <style:style style:name="P26" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:paragraph-properties fo:orphans="2" fo:widows="2"/>
  </style:style>
  <style:style style:name="P27" style:family="paragraph" style:parent-style-name="Preformatted_20_Text">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0.499cm" loext:contextual-spacing="false"/>
  </style:style>
  <style:style style:name="P28" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L3">
   <style:paragraph-properties fo:orphans="2" fo:widows="2"/>
  </style:style>
  <style:style style:name="P29" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L4">
   <style:paragraph-properties fo:orphans="2" fo:widows="2"/>
  </style:style>
  <style:style style:name="P30" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L6"/>
  <style:style style:name="P31" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L7"/>
  <style:style style:name="P32" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L8"/>
  <style:style style:name="P33" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L9"/>
  <style:style style:name="P34" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L10"/>
  <style:style style:name="P35" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L11"/>
  <style:style style:name="P36" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L12"/>
  <style:style style:name="P37" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L13"/>
  <style:style style:name="P38" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L1">
   <style:paragraph-properties fo:margin-left="0cm" fo:margin-right="0cm" fo:orphans="2" fo:widows="2" fo:text-indent="0cm" style:auto-text-indent="false"/>
  </style:style>
  <style:style style:name="P39" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L2">
   <style:paragraph-properties fo:margin-left="0cm" fo:margin-right="0cm" fo:orphans="2" fo:widows="2" fo:text-indent="0cm" style:auto-text-indent="false"/>
  </style:style>
  <style:style style:name="P40" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L5">
   <style:paragraph-properties fo:margin-left="0cm" fo:margin-right="0cm" fo:orphans="2" fo:widows="2" fo:text-indent="0cm" style:auto-text-indent="false"/>
  </style:style>
  <style:style style:name="P41" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L2">
   <style:paragraph-properties fo:margin-left="0cm" fo:margin-right="0cm" fo:orphans="2" fo:widows="2" fo:text-indent="0cm" style:auto-text-indent="false"/>
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" fo:color="#34495e" style:font-name="Source Sans Pro" fo:font-size="13pt" fo:letter-spacing="normal" fo:font-style="normal" fo:font-weight="normal"/>
  </style:style>
  <style:style style:name="P42" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L3">
   <style:paragraph-properties fo:margin-left="0cm" fo:margin-right="0cm" fo:margin-top="0cm" fo:margin-bottom="0cm" loext:contextual-spacing="false" fo:orphans="2" fo:widows="2" fo:text-indent="0cm" style:auto-text-indent="false"/>
  </style:style>
  <style:style style:name="P43" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L4">
   <style:paragraph-properties fo:margin-left="0cm" fo:margin-right="0cm" fo:margin-top="0cm" fo:margin-bottom="0cm" loext:contextual-spacing="false" fo:orphans="2" fo:widows="2" fo:text-indent="0cm" style:auto-text-indent="false"/>
  </style:style>
  <style:style style:name="P44" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L3">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" loext:contextual-spacing="false" fo:orphans="2" fo:widows="2"/>
  </style:style>
  <style:style style:name="P45" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L4">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" loext:contextual-spacing="false" fo:orphans="2" fo:widows="2"/>
  </style:style>
  <style:style style:name="P46" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L7">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" loext:contextual-spacing="false"/>
  </style:style>
  <style:style style:name="P47" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L9">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" loext:contextual-spacing="false"/>
  </style:style>
  <style:style style:name="P48" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L12">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" loext:contextual-spacing="false"/>
  </style:style>
  <style:style style:name="P49" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L13">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" loext:contextual-spacing="false"/>
  </style:style>
  <style:style style:name="P50" style:family="paragraph" style:parent-style-name="Preformatted_20_Text" style:list-style-name="L11">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0.499cm" loext:contextual-spacing="false"/>
  </style:style>
  <style:style style:name="T1" style:family="text">
   <style:text-properties fo:color="#e96900"/>
  </style:style>
  <style:style style:name="T2" style:family="text">
   <style:text-properties fo:color="#e96900" style:font-name="Roboto Mono"/>
  </style:style>
  <style:style style:name="T3" style:family="text">
   <style:text-properties style:font-name="Roboto Mono"/>
  </style:style>
  <style:style style:name="T4" style:family="text">
   <style:text-properties fo:color="#0092db"/>
  </style:style>
  <style:style style:name="T5" style:family="text">
   <style:text-properties fo:color="#0092db" style:font-name="Roboto Mono"/>
  </style:style>
  <style:style style:name="T6" style:family="text">
   <style:text-properties fo:color="#42b983"/>
  </style:style>
  <style:style style:name="T7" style:family="text">
   <style:text-properties fo:color="#42b983" style:font-name="Roboto Mono"/>
  </style:style>
  <style:style style:name="T8" style:family="text">
   <style:text-properties fo:color="#b3b3b3"/>
  </style:style>
  <style:style style:name="T9" style:family="text">
   <style:text-properties fo:color="#b3b3b3" style:font-name="Roboto Mono"/>
  </style:style>
  <style:style style:name="T10" style:family="text">
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" fo:color="#34495e" style:font-name="Source Sans Pro" fo:font-size="13pt" fo:letter-spacing="normal" fo:font-style="normal" fo:font-weight="normal"/>
  </style:style>
  <style:style style:name="T11" style:family="text">
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" fo:color="#34495e" style:font-name="Roboto Mono" fo:font-size="13pt" fo:letter-spacing="normal" fo:font-style="normal" fo:font-weight="normal" fo:background-color="#f8f8f8" loext:char-shading-value="0"/>
  </style:style>
  <style:style style:name="T12" style:family="text">
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" fo:color="#34495e" style:font-name="Roboto Mono" fo:font-size="13pt" fo:letter-spacing="normal" fo:font-style="normal" fo:font-weight="normal" fo:background-color="#efefef" loext:char-shading-value="0"/>
  </style:style>
  <style:style style:name="T13" style:family="text">
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" fo:color="#2c3e50" style:font-name="Source Sans Pro" fo:font-size="13pt" fo:letter-spacing="normal" fo:font-style="normal" fo:font-weight="bold"/>
  </style:style>
  <style:style style:name="T14" style:family="text">
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" fo:color="#2c3e50" style:font-name="Source Sans Pro" fo:letter-spacing="normal" fo:font-style="normal" fo:font-weight="bold"/>
  </style:style>
  <style:style style:name="T15" style:family="text">
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" fo:color="#2c3e50" style:text-line-through-style="none" style:text-line-through-type="none" style:font-name="Source Sans Pro" fo:font-size="13pt" fo:letter-spacing="normal" fo:font-style="normal" style:text-underline-style="none" fo:font-weight="bold" style:text-blinking="false"/>
  </style:style>
  <style:style style:name="T16" style:family="text">
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" fo:color="#42b983" style:text-line-through-style="none" style:text-line-through-type="none" style:font-name="Source Sans Pro" fo:font-size="13pt" fo:letter-spacing="normal" fo:font-style="normal" style:text-underline-style="none" fo:font-weight="bold" style:text-blinking="false"/>
  </style:style>
  <style:style style:name="T17" style:family="text">
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" fo:color="#7f8c8d" style:font-name="Source Sans Pro" fo:font-size="13pt" fo:letter-spacing="normal" fo:font-style="normal" fo:font-weight="normal"/>
  </style:style>
  <style:style style:name="T18" style:family="text">
   <style:text-properties fo:color="#ae81ff"/>
  </style:style>
  <style:style style:name="T19" style:family="text">
   <style:text-properties fo:color="#ae81ff" style:font-name="Roboto Mono"/>
  </style:style>
  <style:style style:name="T20" style:family="text">
   <style:text-properties fo:color="#2973b7"/>
  </style:style>
  <style:style style:name="T21" style:family="text">
   <style:text-properties fo:color="#2973b7" style:font-name="Roboto Mono"/>
  </style:style>
  <style:style style:name="T22" style:family="text">
   <style:text-properties fo:color="#a6e22e"/>
  </style:style>
  <style:style style:name="T23" style:family="text">
   <style:text-properties fo:color="#2c3e50" fo:font-weight="bold"/>
  </style:style>
  <style:style style:name="T24" style:family="text">
   <style:text-properties fo:color="#2c3e50" style:font-name="Roboto Mono" fo:font-weight="bold" fo:background-color="#f8f8f8" loext:char-shading-value="0"/>
  </style:style>
  <style:style style:name="fr1" style:family="graphic" style:parent-style-name="Graphics">
   <style:graphic-properties fo:margin-left="0.794cm" fo:margin-right="0.794cm" fo:margin-top="0.794cm" fo:margin-bottom="0.794cm" style:vertical-pos="top" style:vertical-rel="baseline" style:horizontal-pos="from-left" style:horizontal-rel="paragraph-content" fo:padding="0cm" fo:border="none" style:mirror="none" fo:clip="rect(0cm, 0cm, 0cm, 0cm)" draw:luminance="0%" draw:contrast="0%" draw:red="0%" draw:green="0%" draw:blue="0%" draw:gamma="100%" draw:color-inversion="false" draw:image-opacity="100%" draw:color-mode="standard"/>
  </style:style>
  <style:style style:name="fr2" style:family="graphic" style:parent-style-name="Graphics">
   <style:graphic-properties fo:margin-left="0cm" fo:margin-right="0cm" fo:margin-top="0cm" fo:margin-bottom="0cm" style:vertical-pos="top" style:vertical-rel="baseline" style:horizontal-pos="center" style:horizontal-rel="paragraph" fo:padding="0cm" fo:border="none" style:mirror="none" fo:clip="rect(0cm, 0cm, 0cm, 0cm)" draw:luminance="0%" draw:contrast="0%" draw:red="0%" draw:green="0%" draw:blue="0%" draw:gamma="100%" draw:color-inversion="false" draw:image-opacity="100%" draw:color-mode="standard"/>
  </style:style>
  <text:list-style style:name="L1">
   <text:list-level-style-bullet text:level="1" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="2" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="1.995cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="3" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="3.242cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="4" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="4.489cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="5" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="5.736cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="6" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="6.983cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="7" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="8.23cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="8" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="9.478cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="9" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="10.725cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="10" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="11.972cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
  </text:list-style>
  <text:list-style style:name="L2">
   <text:list-level-style-number text:level="1" text:style-name="Numbering_20_Symbols" style:num-suffix="." style:num-format="1">
    <style:list-level-properties/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="2" text:style-name="Numbering_20_Symbols" style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="1.995cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="3" text:style-name="Numbering_20_Symbols" style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="3.242cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="4" text:style-name="Numbering_20_Symbols" style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="4.489cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="5" text:style-name="Numbering_20_Symbols" style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="5.736cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="6" text:style-name="Numbering_20_Symbols" style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="6.983cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="7" text:style-name="Numbering_20_Symbols" style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="8.23cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="8" text:style-name="Numbering_20_Symbols" style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="9.478cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="9" text:style-name="Numbering_20_Symbols" style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="10.725cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="10" text:style-name="Numbering_20_Symbols" style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="11.972cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
  </text:list-style>
  <text:list-style style:name="L3">
   <text:list-level-style-bullet text:level="1" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="2" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="1.995cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="3" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="3.242cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="4" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="4.489cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="5" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="5.736cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="6" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="6.983cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="7" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="8.23cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="8" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="9.478cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="9" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="10.725cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="10" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="11.972cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
  </text:list-style>
  <text:list-style style:name="L4">
   <text:list-level-style-bullet text:level="1" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="2" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="1.995cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="3" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="3.242cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="4" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="4.489cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="5" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="5.736cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="6" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="6.983cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="7" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="8.23cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="8" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="9.478cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="9" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="10.725cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="10" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="11.972cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
  </text:list-style>
  <text:list-style style:name="L5">
   <text:list-level-style-bullet text:level="1" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="2" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="1.995cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="3" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="3.242cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="4" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="4.489cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="5" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="5.736cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="6" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="6.983cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="7" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="8.23cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="8" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="9.478cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="9" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="10.725cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="10" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="11.972cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
  </text:list-style>
  <text:list-style style:name="L6">
   <text:list-level-style-bullet text:level="1" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="0.748cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="2" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="1.995cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="3" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="3.242cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="4" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="4.489cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="5" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="5.736cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="6" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="6.983cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="7" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="8.23cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="8" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="9.478cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="9" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="10.725cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="10" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="11.972cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
  </text:list-style>
  <text:list-style style:name="L7">
   <text:list-level-style-bullet text:level="1" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="0.748cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="2" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="1.995cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="3" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="3.242cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="4" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="4.489cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="5" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="5.736cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="6" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="6.983cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="7" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="8.23cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="8" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="9.478cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="9" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="10.725cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="10" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="11.972cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
  </text:list-style>
  <text:list-style style:name="L8">
   <text:list-level-style-bullet text:level="1" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="0.748cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="2" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="1.995cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="3" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="3.242cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="4" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="4.489cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="5" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="5.736cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="6" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="6.983cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="7" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="8.23cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="8" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="9.478cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="9" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="10.725cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="10" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="11.972cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
  </text:list-style>
  <text:list-style style:name="L9">
   <text:list-level-style-bullet text:level="1" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="0.748cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="2" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="1.995cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="3" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="3.242cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="4" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="4.489cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="5" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="5.736cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="6" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="6.983cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="7" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="8.23cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="8" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="9.478cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="9" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="10.725cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="10" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="11.972cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
  </text:list-style>
  <text:list-style style:name="L10">
   <text:list-level-style-number text:level="1" text:style-name="Numbering_20_Symbols" style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="0.748cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="2" text:style-name="Numbering_20_Symbols" style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="1.995cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="3" text:style-name="Numbering_20_Symbols" style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="3.242cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="4" text:style-name="Numbering_20_Symbols" style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="4.489cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="5" text:style-name="Numbering_20_Symbols" style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="5.736cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="6" text:style-name="Numbering_20_Symbols" style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="6.983cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="7" text:style-name="Numbering_20_Symbols" style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="8.23cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="8" text:style-name="Numbering_20_Symbols" style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="9.478cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="9" text:style-name="Numbering_20_Symbols" style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="10.725cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="10" text:style-name="Numbering_20_Symbols" style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="11.972cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
  </text:list-style>
  <text:list-style style:name="L11">
   <text:list-level-style-number text:level="1" text:style-name="Numbering_20_Symbols" style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="0.748cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
   <text:list-level-style-bullet text:level="2" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="1.995cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="3" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="3.242cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="4" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="4.489cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="5" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="5.736cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="6" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="6.983cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="7" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="8.23cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="8" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="9.478cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="9" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="10.725cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="10" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="11.972cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
  </text:list-style>
  <text:list-style style:name="L12">
   <text:list-level-style-bullet text:level="1" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="0.748cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="2" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="1.995cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="3" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="3.242cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="4" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="4.489cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="5" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="5.736cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="6" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="6.983cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="7" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="8.23cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="8" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="9.478cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="9" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="10.725cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="10" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="11.972cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
  </text:list-style>
  <text:list-style style:name="L13">
   <text:list-level-style-number text:level="1" text:style-name="Numbering_20_Symbols" style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="0.748cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="2" text:style-name="Numbering_20_Symbols" style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="1.995cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="3" text:style-name="Numbering_20_Symbols" style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="3.242cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="4" text:style-name="Numbering_20_Symbols" style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="4.489cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="5" text:style-name="Numbering_20_Symbols" style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="5.736cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="6" text:style-name="Numbering_20_Symbols" style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="6.983cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="7" text:style-name="Numbering_20_Symbols" style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="8.23cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="8" text:style-name="Numbering_20_Symbols" style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="9.478cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="9" text:style-name="Numbering_20_Symbols" style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="10.725cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="10" text:style-name="Numbering_20_Symbols" style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="11.972cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
  </text:list-style>
  <style:page-layout style:name="pm1">
   <style:page-layout-properties fo:page-width="21.001cm" fo:page-height="29.7cm" style:num-format="1" style:print-orientation="portrait" fo:margin-top="1cm" fo:margin-bottom="1cm" fo:margin-left="1cm" fo:margin-right="1cm" style:writing-mode="lr-tb" style:footnote-max-height="0cm">
    <style:footnote-sep style:width="0.018cm" style:distance-before-sep="0.101cm" style:distance-after-sep="0.101cm" style:line-style="solid" style:adjustment="left" style:rel-width="25%" style:color="#000000"/>
   </style:page-layout-properties>
   <style:header-style/>
   <style:footer-style/>
  </style:page-layout>
 </office:automatic-styles>
 <office:master-styles>
  <style:master-page style:name="Standard" style:page-layout-name="pm1"/>
 </office:master-styles>
 <office:body>
  <office:text text:use-soft-page-breaks="true">
   <office:forms form:automatic-focus="false" form:apply-design-mode="false"/>
   <text:sequence-decls>
    <text:sequence-decl text:display-outline-level="0" text:name="Illustration"/>
    <text:sequence-decl text:display-outline-level="0" text:name="Table"/>
    <text:sequence-decl text:display-outline-level="0" text:name="Text"/>
    <text:sequence-decl text:display-outline-level="0" text:name="Drawing"/>
   </text:sequence-decls>
   <text:p text:style-name="Title">VUEJS</text:p>
   <text:h text:style-name="P8" text:outline-level="1">Components</text:h>
   <text:h text:style-name="P11" text:outline-level="2"><text:bookmark text:name="Dynamic-Components"/><text:a xlink:type="simple" xlink:href="https://vuejs.org/v2/guide/components.html#Dynamic-Components" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="T15">Dynamic Components</text:span></text:a></text:h>
   <text:p text:style-name="P3"><text:span text:style-name="T10">You can use the same mount point and dynamically switch between multiple components using the reserved </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">&lt;component&gt;</text:span></text:span><text:span text:style-name="T10"> element and dynamically bind to its </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">is</text:span></text:span><text:span text:style-name="T10"> attribute:</text:span></text:p>
   <table:table table:name="Table26" table:style-name="Table26">
    <table:table-column table:style-name="Table26.A"/>
    <table:table-row>
     <table:table-cell table:style-name="Table26.A1" office:value-type="string">
      <text:p text:style-name="P6"><text:span text:style-name="T1">var</text:span> vm = <text:span text:style-name="T1">new</text:span> Vue({</text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T3">el: </text:span><text:span text:style-name="T7">&apos;#example&apos;</text:span><text:span text:style-name="T3">,</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T3">data: {</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="4"/><text:span text:style-name="T3">currentView: </text:span><text:span text:style-name="T7">&apos;home&apos;</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T3">},</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T3">components: {</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="4"/><text:span text:style-name="T3">home: { </text:span><text:span text:style-name="T9">/* ... */</text:span><text:span text:style-name="T3"> },</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="4"/><text:span text:style-name="T3">posts: { </text:span><text:span text:style-name="T9">/* ... */</text:span><text:span text:style-name="T3"> },</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="4"/><text:span text:style-name="T3">archive: { </text:span><text:span text:style-name="T9">/* ... */</text:span><text:span text:style-name="T3"> }</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T3">}</text:span></text:p>
      <text:p text:style-name="P15">})</text:p>
     </table:table-cell>
    </table:table-row>
   </table:table>
   <table:table table:name="Table27" table:style-name="Table27">
    <table:table-column table:style-name="Table27.A"/>
    <table:table-row>
     <table:table-cell table:style-name="Table27.A1" office:value-type="string">
      <text:p text:style-name="P7">&lt;component v-bind:is=<text:span text:style-name="T6">&quot;currentView&quot;</text:span>&gt;</text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T9">&lt;!-- component changes when vm.currentView changes! --&gt;</text:span></text:p>
      <text:p text:style-name="P17">&lt;/component&gt;</text:p>
     </table:table-cell>
    </table:table-row>
   </table:table>
   <text:p text:style-name="P1">If you prefer, you can also bind directly to component objects:</text:p>
   <table:table table:name="Table28" table:style-name="Table28">
    <table:table-column table:style-name="Table28.A"/>
    <table:table-row>
     <table:table-cell table:style-name="Table28.A1" office:value-type="string">
      <text:p text:style-name="P6"><text:span text:style-name="T1">var</text:span> Home = {</text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T3">template: </text:span><text:span text:style-name="T7">&apos;&lt;p&gt;Welcome home!&lt;/p&gt;&apos;</text:span></text:p>
      <text:p text:style-name="P15">}</text:p>
      <text:p text:style-name="P15"><text:span text:style-name="T1">var</text:span> vm = <text:span text:style-name="T1">new</text:span> Vue({</text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T3">el: </text:span><text:span text:style-name="T7">&apos;#example&apos;</text:span><text:span text:style-name="T3">,</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T3">data: {</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="4"/><text:span text:style-name="T3">currentView: Home</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T3">}</text:span></text:p>
      <text:p text:style-name="P15">})</text:p>
     </table:table-cell>
    </table:table-row>
   </table:table>
   <text:h text:style-name="P12" text:outline-level="3"><text:bookmark text:name="keep-alive"/><text:span text:style-name="Source_20_Text"><text:span text:style-name="T24">keep-alive</text:span></text:span></text:h>
   <text:p text:style-name="P3"><text:span text:style-name="T10">If you want to keep the switched-out components in memory so that you can preserve their state or avoid re-rendering, you can wrap a dynamic component in a </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">&lt;keep-alive&gt;</text:span></text:span><text:span text:style-name="T10"> element:</text:span></text:p>
   <table:table table:name="Table29" table:style-name="Table29">
    <table:table-column table:style-name="Table29.A"/>
    <table:table-row>
     <table:table-cell table:style-name="Table29.A1" office:value-type="string">
      <text:p text:style-name="P7">&lt;keep-alive&gt;</text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T21">&lt;component :is=</text:span><text:span text:style-name="T7">&quot;currentView&quot;</text:span><text:span text:style-name="T21">&gt;</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="4"/><text:span text:style-name="T9">&lt;!-- inactive components will be </text:span><text:soft-page-break/><text:span text:style-name="T9">cached! --&gt;</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T21">&lt;/component&gt;</text:span></text:p>
      <text:p text:style-name="P17">&lt;/keep-alive&gt;</text:p>
     </table:table-cell>
    </table:table-row>
   </table:table>
   <text:p text:style-name="P3"><text:span text:style-name="T10">Check out more details on </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">&lt;keep-alive&gt;</text:span></text:span><text:span text:style-name="T10"> in the </text:span><text:a xlink:type="simple" xlink:href="https://vuejs.org/v2/api/#keep-alive" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="T16">API reference</text:span></text:a><text:span text:style-name="T10">.</text:span></text:p>
   <text:h text:style-name="P10" text:outline-level="2"><text:bookmark text:name="Misc"/>Misc</text:h>
   <text:h text:style-name="P13" text:outline-level="3"><text:bookmark text:name="Authoring-Reusable-Components"/>Authoring Reusable Components</text:h>
   <text:p text:style-name="P1">When authoring components, it’s good to keep in mind whether you intend to reuse it somewhere else later. It’s OK for one-off components to be tightly coupled, but reusable components should define a clean public interface and make no assumptions about the context it’s used in.</text:p>
   <text:p text:style-name="P1">The API for a Vue component comes in three parts - props, events, and slots:</text:p>
   <text:list xml:id="list1228590601401530400" text:style-name="L1">
    <text:list-item>
     <text:p text:style-name="P38"><text:span text:style-name="Strong_20_Emphasis"><text:span text:style-name="T13">Props</text:span></text:span><text:span text:style-name="T10"> allow the external environment to pass data into the component</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P38"><text:span text:style-name="Strong_20_Emphasis"><text:span text:style-name="T13">Events</text:span></text:span><text:span text:style-name="T10"> allow the component to trigger side effects in the external environment</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P38"><text:span text:style-name="Strong_20_Emphasis"><text:span text:style-name="T13">Slots</text:span></text:span><text:span text:style-name="T10"> allow the external environment to compose the component with extra content.</text:span></text:p>
    </text:list-item>
   </text:list>
   <text:p text:style-name="P3"><text:span text:style-name="T10">With the dedicated shorthand syntaxes for </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">v-bind</text:span></text:span><text:span text:style-name="T10"> and </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">v-on</text:span></text:span><text:span text:style-name="T10">, the intents can be clearly and succinctly conveyed in the template:</text:span></text:p>
   <table:table table:name="Table30" table:style-name="Table30">
    <table:table-column table:style-name="Table30.A"/>
    <table:table-row>
     <table:table-cell table:style-name="Table30.A1" office:value-type="string">
      <text:p text:style-name="P7">&lt;my-component</text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T3">:foo=</text:span><text:span text:style-name="T7">&quot;baz&quot;</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T3">:bar=</text:span><text:span text:style-name="T7">&quot;qux&quot;</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T3">@event-a=</text:span><text:span text:style-name="T7">&quot;doThis&quot;</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T3">@event-b=</text:span><text:span text:style-name="T7">&quot;doThat&quot;</text:span></text:p>
      <text:p text:style-name="P15">&gt;</text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T21">&lt;img slot=</text:span><text:span text:style-name="T7">&quot;icon&quot;</text:span><text:span text:style-name="T21"> src=</text:span><text:span text:style-name="T7">&quot;...&quot;</text:span><text:span text:style-name="T21">&gt;</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T21">&lt;p slot=</text:span><text:span text:style-name="T7">&quot;main-text&quot;</text:span><text:span text:style-name="T21">&gt;</text:span><text:span text:style-name="T3">Hello!</text:span><text:span text:style-name="T21">&lt;/p&gt;</text:span></text:p>
      <text:p text:style-name="P17">&lt;/my-component&gt;</text:p>
     </table:table-cell>
    </table:table-row>
   </table:table>
   <text:h text:style-name="P13" text:outline-level="3"><text:bookmark text:name="Child-Component-Refs"/>Child Component Refs</text:h>
   <text:p text:style-name="P3"><text:span text:style-name="T10">Despite the existence of props and events, sometimes you might still need to directly access a child component in JavaScript. To achieve this you have to assign a reference ID to the child component using </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">ref</text:span></text:span><text:span text:style-name="T10">. For example:</text:span></text:p>
   <table:table table:name="Table31" table:style-name="Table31">
    <table:table-column table:style-name="Table31.A"/>
    <text:soft-page-break/>
    <table:table-row>
     <table:table-cell table:style-name="Table31.A1" office:value-type="string">
      <text:p text:style-name="P7">&lt;div id=<text:span text:style-name="T6">&quot;parent&quot;</text:span>&gt;</text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T21">&lt;user-profile ref=</text:span><text:span text:style-name="T7">&quot;profile&quot;</text:span><text:span text:style-name="T21">&gt;&lt;/user-profile&gt;</text:span></text:p>
      <text:p text:style-name="P17">&lt;/div&gt;</text:p>
     </table:table-cell>
    </table:table-row>
   </table:table>
   <table:table table:name="Table32" table:style-name="Table32">
    <table:table-column table:style-name="Table32.A"/>
    <table:table-row>
     <table:table-cell table:style-name="Table32.A1" office:value-type="string">
      <text:p text:style-name="P6"><text:span text:style-name="T1">var</text:span> parent = <text:span text:style-name="T1">new</text:span> Vue({ el: <text:span text:style-name="T6">&apos;#parent&apos;</text:span> })</text:p>
      <text:p text:style-name="P16">// access child component instance</text:p>
      <text:p text:style-name="P15"><text:span text:style-name="T1">var</text:span> child = parent.$refs.profile</text:p>
     </table:table-cell>
    </table:table-row>
   </table:table>
   <text:p text:style-name="P3"><text:span text:style-name="T10">When </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">ref</text:span></text:span><text:span text:style-name="T10"> is used together with </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">v-for</text:span></text:span><text:span text:style-name="T10">, the ref you get will be an array or an object containing the child components mirroring the data source.</text:span></text:p>
   <text:p text:style-name="P4"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T12">$refs</text:span></text:span><text:span text:style-name="T10"> are only populated after the component has been rendered, and it is not reactive. It is only meant as an escape hatch for direct child manipulation - you should avoid using </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T12">$refs</text:span></text:span><text:span text:style-name="T10"> in templates or computed properties.</text:span></text:p>
   <text:h text:style-name="P13" text:outline-level="3"><text:bookmark text:name="Async-Components"/>Async Components</text:h>
   <text:p text:style-name="P1">In large applications, we may need to divide the app into smaller chunks and only load a component from the server when it’s actually needed. To make that easier, Vue allows you to define your component as a factory function that asynchronously resolves your component definition. Vue will only trigger the factory function when the component actually needs to be rendered and will cache the result for future re-renders. For example:</text:p>
   <table:table table:name="Table33" table:style-name="Table33">
    <table:table-column table:style-name="Table33.A"/>
    <table:table-row>
     <table:table-cell table:style-name="Table33.A1" office:value-type="string">
      <text:p text:style-name="P6">Vue.component(<text:span text:style-name="T6">&apos;async-example&apos;</text:span>, <text:span text:style-name="T4">function</text:span> (resolve, reject) {</text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T3">setTimeout(</text:span><text:span text:style-name="T5">function</text:span><text:span text:style-name="T3"> () {</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="4"/><text:span text:style-name="T9">// Pass the component definition to the resolve callback</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="4"/><text:span text:style-name="T3">resolve({</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="6"/><text:span text:style-name="T3">template: </text:span><text:span text:style-name="T7">&apos;&lt;div&gt;I am async!&lt;/div&gt;&apos;</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="4"/><text:span text:style-name="T3">})</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T3">}, </text:span><text:span text:style-name="T19">1000</text:span><text:span text:style-name="T3">)</text:span></text:p>
      <text:p text:style-name="P15">})</text:p>
     </table:table-cell>
    </table:table-row>
   </table:table>
   <text:p text:style-name="P3"><text:span text:style-name="T10">The factory function receives a </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">resolve</text:span></text:span><text:span text:style-name="T10"> callback, which should be called when you have retrieved your component definition from the server. You can also call </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">reject(reason)</text:span></text:span><text:span text:style-name="T10"> to indicate the load has failed. The </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">setTimeout</text:span></text:span><text:span text:style-name="T10"> here is simply for demonstration; How to retrieve the component is entirely up to you. One recommended approach is to use async components together with </text:span><text:a xlink:type="simple" xlink:href="http://webpack.github.io/docs/code-splitting.html" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="T16">Webpack’s code-splitting feature</text:span></text:a><text:span text:style-name="T10">:</text:span></text:p>
   <table:table table:name="Table34" table:style-name="Table34">
    <table:table-column table:style-name="Table34.A"/>
    <table:table-row>
     <table:table-cell table:style-name="Table34.A1" office:value-type="string">
      <text:p text:style-name="P6">Vue.component(<text:span text:style-name="T6">&apos;async-webpack-example&apos;</text:span>, <text:span text:style-name="T4">function</text:span> (resolve) {</text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T9">// This special require syntax will instruct Webpack to</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T9">// automatically split your built code into bundles </text:span><text:soft-page-break/><text:span text:style-name="T9">which</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T9">// are loaded over Ajax requests.</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T7">require</text:span><text:span text:style-name="T3">([</text:span><text:span text:style-name="T7">&apos;./my-async-component&apos;</text:span><text:span text:style-name="T3">], resolve)</text:span></text:p>
      <text:p text:style-name="P15">})</text:p>
     </table:table-cell>
    </table:table-row>
   </table:table>
   <text:p text:style-name="P3"><text:span text:style-name="T10">You can also return a </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">Promise</text:span></text:span><text:span text:style-name="T10"> in the factory function, so with Webpack 2 + ES2015 syntax you can do:</text:span></text:p>
   <table:table table:name="Table35" table:style-name="Table35">
    <table:table-column table:style-name="Table35.A"/>
    <table:table-row>
     <table:table-cell table:style-name="Table35.A1" office:value-type="string">
      <text:p text:style-name="P6">Vue.component(</text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T7">&apos;async-webpack-example&apos;</text:span><text:span text:style-name="T3">,</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T3">() =&gt; System.import(</text:span><text:span text:style-name="T7">&apos;./my-async-component&apos;</text:span><text:span text:style-name="T3">)</text:span></text:p>
      <text:p text:style-name="P15">)</text:p>
     </table:table-cell>
    </table:table-row>
   </table:table>
   <text:p text:style-name="P4"><text:span text:style-name="T10">If you’re a </text:span><text:span text:style-name="Strong_20_Emphasis"><text:span text:style-name="T13">Browserify</text:span></text:span><text:span text:style-name="T10"> user that would like to use async components, its creator has unfortunately </text:span><text:a xlink:type="simple" xlink:href="https://github.com/substack/node-browserify/issues/58#issuecomment-21978224" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="T16">made it clear</text:span></text:a><text:span text:style-name="T10"> that async loading “is not something that Browserify will ever support.” Officially, at least. The Browserify community has found </text:span><text:a xlink:type="simple" xlink:href="https://github.com/vuejs/vuejs.org/issues/620" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="T16">some workarounds</text:span></text:a><text:span text:style-name="T10">, which may be helpful for existing and complex applications. For all other scenarios, we recommend simply using Webpack for built-in, first-class async support.</text:span></text:p>
   <text:h text:style-name="P13" text:outline-level="3"><text:bookmark text:name="Component-Naming-Conventions"/>Component Naming Conventions</text:h>
   <text:p text:style-name="P1">When registering components (or props), you can use kebab-case, camelCase, or TitleCase. Vue doesn’t care.</text:p>
   <table:table table:name="Table36" table:style-name="Table36">
    <table:table-column table:style-name="Table36.A"/>
    <table:table-row>
     <table:table-cell table:style-name="Table36.A1" office:value-type="string">
      <text:p text:style-name="P5">// in a component definition</text:p>
      <text:p text:style-name="P15">components: {</text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T9">// register using kebab-case</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T7">&apos;kebab-cased-component&apos;</text:span><text:span text:style-name="T3">: { </text:span><text:span text:style-name="T9">/* ... */</text:span><text:span text:style-name="T3"> },</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T9">// register using camelCase</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T7">&apos;camelCasedComponent&apos;</text:span><text:span text:style-name="T3">: { </text:span><text:span text:style-name="T9">/* ... */</text:span><text:span text:style-name="T3"> },</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T9">// register using TitleCase</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T7">&apos;TitleCasedComponent&apos;</text:span><text:span text:style-name="T3">: { </text:span><text:span text:style-name="T9">/* ... */</text:span><text:span text:style-name="T3"> }</text:span></text:p>
      <text:p text:style-name="P15">}</text:p>
     </table:table-cell>
    </table:table-row>
   </table:table>
   <text:p text:style-name="P1">Within HTML templates though, you have to use the kebab-case equivalents:</text:p>
   <table:table table:name="Table37" table:style-name="Table37">
    <table:table-column table:style-name="Table37.A"/>
    <table:table-row>
     <table:table-cell table:style-name="Table37.A1" office:value-type="string">
      <text:p text:style-name="P5">&lt;!-- always use kebab-case in HTML templates --&gt;</text:p>
      <text:p text:style-name="P17">&lt;kebab-cased-component&gt;&lt;/kebab-cased-component&gt;</text:p>
      <text:p text:style-name="P17">&lt;camel-cased-component&gt;&lt;/camel-cased-component&gt;</text:p>
      <text:p text:style-name="P17">&lt;title-cased-component&gt;&lt;/title-cased-component&gt;</text:p>
     </table:table-cell>
    </table:table-row>
   </table:table>
   <text:p text:style-name="P3"><text:soft-page-break/><text:span text:style-name="T10">When using </text:span><text:span text:style-name="Emphasis"><text:span text:style-name="T17">string</text:span></text:span><text:span text:style-name="T10"> templates however, we’re not bound by HTML’s case-insensitive restrictions. That means even in the template, you reference your components and props using camelCase, TitleCase, or kebab-case:</text:span></text:p>
   <table:table table:name="Table38" table:style-name="Table38">
    <table:table-column table:style-name="Table38.A"/>
    <table:table-row>
     <table:table-cell table:style-name="Table38.A1" office:value-type="string">
      <text:p text:style-name="P5">&lt;!-- use whatever you want in string templates! --&gt;</text:p>
      <text:p text:style-name="P17">&lt;my-component&gt;&lt;/my-component&gt;</text:p>
      <text:p text:style-name="P17">&lt;myComponent&gt;&lt;/myComponent&gt;</text:p>
      <text:p text:style-name="P17">&lt;MyComponent&gt;&lt;/MyComponent&gt;</text:p>
     </table:table-cell>
    </table:table-row>
   </table:table>
   <text:p text:style-name="P3"><text:span text:style-name="T10">If your component isn’t passed content via </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">slot</text:span></text:span><text:span text:style-name="T10"> elements, you can even make it self-closing with a </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">/</text:span></text:span><text:span text:style-name="T10"> after the name:</text:span></text:p>
   <table:table table:name="Table39" table:style-name="Table39">
    <table:table-column table:style-name="Table39.A"/>
    <table:table-row>
     <table:table-cell table:style-name="Table39.A1" office:value-type="string">
      <text:p text:style-name="P7">&lt;my-component/&gt;</text:p>
     </table:table-cell>
    </table:table-row>
   </table:table>
   <text:p text:style-name="P3"><text:span text:style-name="T10">Again, this </text:span><text:span text:style-name="Emphasis"><text:span text:style-name="T17">only</text:span></text:span><text:span text:style-name="T10"> works within string templates, as self-closing custom elements are not valid HTML and your browser’s native parser will not understand them.</text:span></text:p>
   <text:h text:style-name="P13" text:outline-level="3"><text:bookmark text:name="Recursive-Components"/>Recursive Components</text:h>
   <text:p text:style-name="P3"><text:span text:style-name="T10">Components can recursively invoke themselves in their own template. However, they can only do so with the </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">name</text:span></text:span><text:span text:style-name="T10"> option:</text:span></text:p>
   <table:table table:name="Table40" table:style-name="Table40">
    <table:table-column table:style-name="Table40.A"/>
    <table:table-row>
     <table:table-cell table:style-name="Table40.A1" office:value-type="string">
      <text:p text:style-name="P6">name: <text:span text:style-name="T6">&apos;unique-name-of-my-component&apos;</text:span></text:p>
     </table:table-cell>
    </table:table-row>
   </table:table>
   <text:p text:style-name="P3"><text:span text:style-name="T10">When you register a component globally using </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">Vue.component</text:span></text:span><text:span text:style-name="T10">, the global ID is automatically set as the component’s </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">name</text:span></text:span><text:span text:style-name="T10"> option.</text:span></text:p>
   <table:table table:name="Table41" table:style-name="Table41">
    <table:table-column table:style-name="Table41.A"/>
    <table:table-row>
     <table:table-cell table:style-name="Table41.A1" office:value-type="string">
      <text:p text:style-name="P6">Vue.component(<text:span text:style-name="T6">&apos;unique-name-of-my-component&apos;</text:span>, {</text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T9">// ...</text:span></text:p>
      <text:p text:style-name="P15">})</text:p>
     </table:table-cell>
    </table:table-row>
   </table:table>
   <text:p text:style-name="P1">If you’re not careful, recursive components can also lead to infinite loops:</text:p>
   <table:table table:name="Table42" table:style-name="Table42">
    <table:table-column table:style-name="Table42.A"/>
    <table:table-row>
     <table:table-cell table:style-name="Table42.A1" office:value-type="string">
      <text:p text:style-name="P6">name: <text:span text:style-name="T6">&apos;stack-overflow&apos;</text:span>,</text:p>
      <text:p text:style-name="P15">template: <text:span text:style-name="T6">&apos;&lt;div&gt;&lt;stack-overflow&gt;&lt;/stack-overflow&gt;&lt;/div&gt;&apos;</text:span></text:p>
     </table:table-cell>
    </table:table-row>
   </table:table>
   <text:p text:style-name="P3"><text:span text:style-name="T10">A component like the above will result in a “max stack size exceeded” error, so make sure recursive invocation is conditional (i.e. uses a </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">v-if</text:span></text:span><text:span text:style-name="T10"> that will eventually be </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">false</text:span></text:span><text:span text:style-name="T10">).</text:span></text:p>
   <text:h text:style-name="P13" text:outline-level="3"><text:bookmark text:name="Circular-References-Between-Components"/>Circular References Between Components</text:h>
   <text:p text:style-name="P3"><text:span text:style-name="T10">Let’s say you’re building a file directory tree, like in Finder or File Explorer. You might have a </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">tree-folder</text:span></text:span><text:span text:style-name="T10"> component with this template:</text:span></text:p>
   <table:table table:name="Table43" table:style-name="Table43">
    <table:table-column table:style-name="Table43.A"/>
    <text:soft-page-break/>
    <table:table-row>
     <table:table-cell table:style-name="Table43.A1" office:value-type="string">
      <text:p text:style-name="P7">&lt;p&gt;</text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T21">&lt;span&gt;</text:span><text:span text:style-name="T3">{{ folder.name }}</text:span><text:span text:style-name="T21">&lt;/span&gt;</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T21">&lt;tree-folder-contents :children=</text:span><text:span text:style-name="T7">&quot;folder.children&quot;</text:span><text:span text:style-name="T21">/&gt;</text:span></text:p>
      <text:p text:style-name="P17">&lt;/p&gt;</text:p>
     </table:table-cell>
    </table:table-row>
   </table:table>
   <text:p text:style-name="P3"><text:span text:style-name="T10">Then a </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">tree-folder-contents</text:span></text:span><text:span text:style-name="T10"> component with this template:</text:span></text:p>
   <table:table table:name="Table44" table:style-name="Table44">
    <table:table-column table:style-name="Table44.A"/>
    <table:table-row>
     <table:table-cell table:style-name="Table44.A1" office:value-type="string">
      <text:p text:style-name="P7">&lt;ul&gt;</text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T21">&lt;li v-for=</text:span><text:span text:style-name="T7">&quot;child in children&quot;</text:span><text:span text:style-name="T21">&gt;</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="4"/><text:span text:style-name="T21">&lt;tree-folder v-if=</text:span><text:span text:style-name="T7">&quot;child.children&quot;</text:span><text:span text:style-name="T21"> :folder=</text:span><text:span text:style-name="T7">&quot;child&quot;</text:span><text:span text:style-name="T21">/&gt;</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="4"/><text:span text:style-name="T21">&lt;span v-else&gt;</text:span><text:span text:style-name="T3">{{ child.name }}</text:span><text:span text:style-name="T21">&lt;/span&gt;</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T21">&lt;/li&gt;</text:span></text:p>
      <text:p text:style-name="P17">&lt;/ul&gt;</text:p>
     </table:table-cell>
    </table:table-row>
   </table:table>
   <text:p text:style-name="P3"><text:span text:style-name="T10">When you look closely, you’ll see that these components will actually be each other’s descendent </text:span><text:span text:style-name="Emphasis"><text:span text:style-name="T17">and</text:span></text:span><text:span text:style-name="T10"> ancestor in the render tree - a paradox! When registering components globally with </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">Vue.component</text:span></text:span><text:span text:style-name="T10">, this paradox is resolved for you automatically. If that’s you, you can stop reading here.</text:span></text:p>
   <text:p text:style-name="P3"><text:span text:style-name="T10">However, if you’re requiring/importing components using a </text:span><text:span text:style-name="Strong_20_Emphasis"><text:span text:style-name="T13">module system</text:span></text:span><text:span text:style-name="T10">, e.g. via Webpack or Browserify, you’ll get an error:</text:span></text:p>
   <table:table table:name="Table45" table:style-name="Table45">
    <table:table-column table:style-name="Table45.A"/>
    <table:table-row>
     <table:table-cell table:style-name="Table45.A1" office:value-type="string">
      <text:p text:style-name="P6">Failed to mount component: template or render function not defined.</text:p>
     </table:table-cell>
    </table:table-row>
   </table:table>
   <text:p text:style-name="P3"><text:span text:style-name="T10">To explain what’s happening, I’ll call our components A and B. The module system sees that it needs A, but first A needs B, but B needs A, but A needs B, etc, etc. It’s stuck in a loop, not knowing how to fully resolve either component without first resolving the other. To fix this, we need to give the module system a point at which it can say, “A needs B </text:span><text:span text:style-name="Emphasis"><text:span text:style-name="T17">eventually</text:span></text:span><text:span text:style-name="T10">, but there’s no need to resolve B first.”</text:span></text:p>
   <text:p text:style-name="P3"><text:span text:style-name="T10">In our case, I’ll make that point the </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">tree-folder</text:span></text:span><text:span text:style-name="T10"> component. We know the child that creates the paradox is the </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">tree-folder-contents</text:span></text:span><text:span text:style-name="T10"> component, so we’ll wait until the </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">beforeCreate</text:span></text:span><text:span text:style-name="T10"> lifecycle hook to register it:</text:span></text:p>
   <table:table table:name="Table46" table:style-name="Table46">
    <table:table-column table:style-name="Table46.A"/>
    <table:table-row>
     <table:table-cell table:style-name="Table46.A1" office:value-type="string">
      <text:p text:style-name="P6">beforeCreate: <text:span text:style-name="T4">function</text:span> () {</text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T2">this</text:span><text:span text:style-name="T3">.$options.components.TreeFolderContents = </text:span><text:span text:style-name="T7">require</text:span><text:span text:style-name="T3">(</text:span><text:span text:style-name="T7">&apos;./tree-folder-contents.vue&apos;</text:span><text:span text:style-name="T3">)</text:span></text:p>
      <text:p text:style-name="P15">}</text:p>
     </table:table-cell>
    </table:table-row>
   </table:table>
   <text:p text:style-name="P1">Problem solved!</text:p>
   <text:h text:style-name="P13" text:outline-level="3"><text:bookmark text:name="Inline-Templates"/>Inline Templates</text:h>
   <text:p text:style-name="P3"><text:span text:style-name="T10">When the </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">inline-template</text:span></text:span><text:span text:style-name="T10"> special attribute is present on a child component, the component will use its inner content as its template, rather than treating it as distributed content. This allows more flexible template-authoring.</text:span></text:p>
   <table:table table:name="Table47" table:style-name="Table47">
    <table:table-column table:style-name="Table47.A"/>
    <table:table-row>
     <table:table-cell table:style-name="Table47.A1" office:value-type="string">
      <text:p text:style-name="P7">&lt;my-component inline-template&gt;</text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T21">&lt;div&gt;</text:span></text:p>
      <text:p text:style-name="P14"><text:soft-page-break/><text:s text:c="4"/><text:span text:style-name="T21">&lt;p&gt;</text:span><text:span text:style-name="T3">These are compiled as the component&apos;s own template.</text:span><text:span text:style-name="T21">&lt;/p&gt;</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="4"/><text:span text:style-name="T21">&lt;p&gt;</text:span><text:span text:style-name="T3">Not parent&apos;s transclusion content.</text:span><text:span text:style-name="T21">&lt;/p&gt;</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T21">&lt;/div&gt;</text:span></text:p>
      <text:p text:style-name="P17">&lt;/my-component&gt;</text:p>
     </table:table-cell>
    </table:table-row>
   </table:table>
   <text:p text:style-name="P3"><text:span text:style-name="T10">However, </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">inline-template</text:span></text:span><text:span text:style-name="T10"> makes the scope of your templates harder to reason about. As a best practice, prefer defining templates inside the component using the </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">template</text:span></text:span><text:span text:style-name="T10"> option or in a </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">template</text:span></text:span><text:span text:style-name="T10"> element in a </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">.vue</text:span></text:span><text:span text:style-name="T10">file.</text:span></text:p>
   <text:h text:style-name="P13" text:outline-level="3"><text:bookmark text:name="X-Templates"/>X-Templates</text:h>
   <text:p text:style-name="P3"><text:span text:style-name="T10">Another way to define templates is inside of a script element with the type </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">text/x-template</text:span></text:span><text:span text:style-name="T10">, then referencing the template by an id. For example:</text:span></text:p>
   <table:table table:name="Table48" table:style-name="Table48">
    <table:table-column table:style-name="Table48.A"/>
    <table:table-row>
     <table:table-cell table:style-name="Table48.A1" office:value-type="string">
      <text:p text:style-name="P7">&lt;script type=<text:span text:style-name="T6">&quot;text/x-template&quot;</text:span> id=<text:span text:style-name="T6">&quot;hello-world-template&quot;</text:span>&gt;</text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T21">&lt;p&gt;</text:span><text:span text:style-name="T3">Hello hello hello</text:span><text:span text:style-name="T21">&lt;/p&gt;</text:span></text:p>
      <text:p text:style-name="P17">&lt;/script&gt;</text:p>
     </table:table-cell>
    </table:table-row>
   </table:table>
   <table:table table:name="Table49" table:style-name="Table49">
    <table:table-column table:style-name="Table49.A"/>
    <table:table-row>
     <table:table-cell table:style-name="Table49.A1" office:value-type="string">
      <text:p text:style-name="P6">Vue.component(<text:span text:style-name="T6">&apos;hello-world&apos;</text:span>, {</text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T3">template: </text:span><text:span text:style-name="T7">&apos;#hello-world-template&apos;</text:span></text:p>
      <text:p text:style-name="P15">})</text:p>
     </table:table-cell>
    </table:table-row>
   </table:table>
   <text:p text:style-name="P1">These can be useful for demos with large templates or in extremely small applications, but should otherwise be avoided, because they separate templates from the rest of the component definition.</text:p>
   <text:h text:style-name="P12" text:outline-level="3"><text:bookmark text:name="Cheap-Static-Components-with-v-once"/><text:span text:style-name="T23">Cheap Static Components with </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T24">v-once</text:span></text:span></text:h>
   <text:p text:style-name="P3"><text:span text:style-name="T10">Rendering plain HTML elements is very fast in Vue, but sometimes you might have a component that contains </text:span><text:span text:style-name="Strong_20_Emphasis"><text:span text:style-name="T13">a lot</text:span></text:span><text:span text:style-name="T10"> of static content. In these cases, you can ensure that it’s only evaluated once and then cached by adding the </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">v-once</text:span></text:span><text:span text:style-name="T10">directive to the root element, like this:</text:span></text:p>
   <table:table table:name="Table50" table:style-name="Table50">
    <table:table-column table:style-name="Table50.A"/>
    <table:table-row>
     <table:table-cell table:style-name="Table50.A1" office:value-type="string">
      <text:p text:style-name="P6">Vue.component(<text:span text:style-name="T6">&apos;terms-of-service&apos;</text:span>, {</text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T3">template: </text:span><text:span text:style-name="T7">&apos;\</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="4"/><text:span text:style-name="T3">&lt;div v-once&gt;\</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="6"/><text:span text:style-name="T3">&lt;h1&gt;Terms of Service&lt;/h1&gt;\</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="6"/><text:span text:style-name="T3">... a lot of static content ...\</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="4"/><text:span text:style-name="T3">&lt;/div&gt;\</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T3">&apos;</text:span></text:p>
      <text:p text:style-name="P15">})</text:p>
     </table:table-cell>
    </table:table-row>
   </table:table>
   <text:p text:style-name="Standard"><text:soft-page-break/></text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="P20" text:outline-level="1">Mixins</text:h>
   <text:h text:style-name="P10" text:outline-level="2"><text:bookmark text:name="Basics"/>Basics</text:h>
   <text:p text:style-name="P1">Mixins are a flexible way to distribute reusable functionalities for Vue components. A mixin object can contain any component options. When a component uses a mixin, all options in the mixin will be “mixed” into the component’s own options.</text:p>
   <text:p text:style-name="P1">Example:</text:p>
   <table:table table:name="Table1" table:style-name="Table1">
    <table:table-column table:style-name="Table1.A"/>
    <table:table-row>
     <table:table-cell table:style-name="Table1.A1" office:value-type="string">
      <text:p text:style-name="P5">// define a mixin object</text:p>
      <text:p text:style-name="P15"><text:span text:style-name="T1">var</text:span> myMixin = {</text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T3">created: </text:span><text:span text:style-name="T5">function</text:span><text:span text:style-name="T3"> () {</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="4"/><text:span text:style-name="T2">this</text:span><text:span text:style-name="T3">.hello()</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T3">},</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T3">methods: {</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="4"/><text:span text:style-name="T3">hello: </text:span><text:span text:style-name="T5">function</text:span><text:span text:style-name="T3"> () {</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="6"/><text:span text:style-name="T7">console</text:span><text:span text:style-name="T3">.log(</text:span><text:span text:style-name="T7">&apos;hello from mixin!&apos;</text:span><text:span text:style-name="T3">)</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="4"/><text:span text:style-name="T3">}</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T3">}</text:span></text:p>
      <text:p text:style-name="P15">}</text:p>
      <text:p text:style-name="P16">// define a component that uses this mixin</text:p>
      <text:p text:style-name="P15"><text:span text:style-name="T1">var</text:span> Component = Vue.extend({</text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T3">mixins: [myMixin]</text:span></text:p>
      <text:p text:style-name="P15">})</text:p>
      <text:p text:style-name="P15"><text:span text:style-name="T1">var</text:span> component = <text:span text:style-name="T1">new</text:span> Component() <text:span text:style-name="T8">// -&gt; &quot;hello from mixin!&quot;</text:span></text:p>
     </table:table-cell>
    </table:table-row>
   </table:table>
   <text:h text:style-name="P10" text:outline-level="2"><text:bookmark text:name="Option-Merging"/>Option Merging</text:h>
   <text:p text:style-name="P3"><text:span text:style-name="T10">When a mixin and the component itself contain overlapping options, they will be “merged” using appropriate strategies. For example, hook functions with the same name are merged into an array so that all of them will be called. In addition, mixin hooks will be called </text:span><text:span text:style-name="Strong_20_Emphasis"><text:span text:style-name="T13">before</text:span></text:span><text:span text:style-name="T10"> the component’s own hooks:</text:span></text:p>
   <table:table table:name="Table2" table:style-name="Table2">
    <table:table-column table:style-name="Table2.A"/>
    <table:table-row>
     <table:table-cell table:style-name="Table2.A1" office:value-type="string">
      <text:p text:style-name="P6"><text:span text:style-name="T1">var</text:span> mixin = {</text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T3">created: </text:span><text:span text:style-name="T5">function</text:span><text:span text:style-name="T3"> () {</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="4"/><text:span text:style-name="T7">console</text:span><text:span text:style-name="T3">.log(</text:span><text:span text:style-name="T7">&apos;mixin hook called&apos;</text:span><text:span text:style-name="T3">)</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T3">}</text:span></text:p>
      <text:p text:style-name="P15">}</text:p>
      <text:p text:style-name="P15"><text:span text:style-name="T1">new</text:span> Vue({</text:p>
      <text:p text:style-name="P14"><text:soft-page-break/><text:s text:c="2"/><text:span text:style-name="T3">mixins: [mixin],</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T3">created: </text:span><text:span text:style-name="T5">function</text:span><text:span text:style-name="T3"> () {</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="4"/><text:span text:style-name="T7">console</text:span><text:span text:style-name="T3">.log(</text:span><text:span text:style-name="T7">&apos;component hook called&apos;</text:span><text:span text:style-name="T3">)</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T3">}</text:span></text:p>
      <text:p text:style-name="P15">})</text:p>
      <text:p text:style-name="P16">// -&gt; &quot;mixin hook called&quot;</text:p>
      <text:p text:style-name="P16">// -&gt; &quot;component hook called&quot;</text:p>
     </table:table-cell>
    </table:table-row>
   </table:table>
   <text:p text:style-name="P3"><text:span text:style-name="T10">Options that expect object values, for example </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">methods</text:span></text:span><text:span text:style-name="T10">, </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">components</text:span></text:span><text:span text:style-name="T10"> and </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">directives</text:span></text:span><text:span text:style-name="T10">, will be merged into the same object. The component’s options will take priority when there are conflicting keys in these objects:</text:span></text:p>
   <table:table table:name="Table3" table:style-name="Table3">
    <table:table-column table:style-name="Table3.A"/>
    <table:table-row>
     <table:table-cell table:style-name="Table3.A1" office:value-type="string">
      <text:p text:style-name="P6"><text:span text:style-name="T1">var</text:span> mixin = {</text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T3">methods: {</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="4"/><text:span text:style-name="T3">foo: </text:span><text:span text:style-name="T5">function</text:span><text:span text:style-name="T3"> () {</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="6"/><text:span text:style-name="T7">console</text:span><text:span text:style-name="T3">.log(</text:span><text:span text:style-name="T7">&apos;foo&apos;</text:span><text:span text:style-name="T3">)</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="4"/><text:span text:style-name="T3">},</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="4"/><text:span text:style-name="T3">conflicting: </text:span><text:span text:style-name="T5">function</text:span><text:span text:style-name="T3"> () {</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="6"/><text:span text:style-name="T7">console</text:span><text:span text:style-name="T3">.log(</text:span><text:span text:style-name="T7">&apos;from mixin&apos;</text:span><text:span text:style-name="T3">)</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="4"/><text:span text:style-name="T3">}</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T3">}</text:span></text:p>
      <text:p text:style-name="P15">}</text:p>
      <text:p text:style-name="P15"><text:span text:style-name="T1">var</text:span> vm = <text:span text:style-name="T1">new</text:span> Vue({</text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T3">mixins: [mixin],</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T3">methods: {</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="4"/><text:span text:style-name="T3">bar: </text:span><text:span text:style-name="T5">function</text:span><text:span text:style-name="T3"> () {</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="6"/><text:span text:style-name="T7">console</text:span><text:span text:style-name="T3">.log(</text:span><text:span text:style-name="T7">&apos;bar&apos;</text:span><text:span text:style-name="T3">)</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="4"/><text:span text:style-name="T3">},</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="4"/><text:span text:style-name="T3">conflicting: </text:span><text:span text:style-name="T5">function</text:span><text:span text:style-name="T3"> () {</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="6"/><text:span text:style-name="T7">console</text:span><text:span text:style-name="T3">.log(</text:span><text:span text:style-name="T7">&apos;from self&apos;</text:span><text:span text:style-name="T3">)</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="4"/><text:span text:style-name="T3">}</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T3">}</text:span></text:p>
      <text:p text:style-name="P15">})</text:p>
      <text:p text:style-name="P15">vm.foo() <text:span text:style-name="T8">// -&gt; &quot;foo&quot;</text:span></text:p>
      <text:p text:style-name="P15">vm.bar() <text:span text:style-name="T8">// -&gt; &quot;bar&quot;</text:span></text:p>
      <text:p text:style-name="P15">vm.conflicting() <text:span text:style-name="T8">// -&gt; &quot;from self&quot;</text:span></text:p>
     </table:table-cell>
    </table:table-row>
   </table:table>
   <text:p text:style-name="P3"><text:span text:style-name="T10">Note that the same merge strategies are used in </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">Vue.extend()</text:span></text:span><text:span text:style-name="T10">.</text:span></text:p>
   <text:h text:style-name="P10" text:outline-level="2"><text:bookmark text:name="Global-Mixin"/>Global Mixin</text:h>
   <text:p text:style-name="P3"><text:span text:style-name="T10">You can also apply a mixin globally. Use caution! Once you apply a mixin globally, it will affect </text:span><text:span text:style-name="Strong_20_Emphasis"><text:span text:style-name="T13">every</text:span></text:span><text:span text:style-name="T10"> Vue instance created afterwards. When used properly, this can be used to inject processing logic for custom options:</text:span></text:p>
   <table:table table:name="Table4" table:style-name="Table4">
    <table:table-column table:style-name="Table4.A"/>
    <text:soft-page-break/>
    <table:table-row>
     <table:table-cell table:style-name="Table4.A1" office:value-type="string">
      <text:p text:style-name="P5">// inject a handler for `myOption` custom option</text:p>
      <text:p text:style-name="P15">Vue.mixin({</text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T3">created: </text:span><text:span text:style-name="T5">function</text:span><text:span text:style-name="T3"> () {</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="4"/><text:span text:style-name="T2">var</text:span><text:span text:style-name="T3"> myOption = </text:span><text:span text:style-name="T2">this</text:span><text:span text:style-name="T3">.$options.myOption</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="4"/><text:span text:style-name="T2">if</text:span><text:span text:style-name="T3"> (myOption) {</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="6"/><text:span text:style-name="T7">console</text:span><text:span text:style-name="T3">.log(myOption)</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="4"/><text:span text:style-name="T3">}</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T3">}</text:span></text:p>
      <text:p text:style-name="P15">})</text:p>
      <text:p text:style-name="P15"><text:span text:style-name="T1">new</text:span> Vue({</text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T3">myOption: </text:span><text:span text:style-name="T7">&apos;hello!&apos;</text:span></text:p>
      <text:p text:style-name="P15">})</text:p>
      <text:p text:style-name="P16">// -&gt; &quot;hello!&quot;</text:p>
     </table:table-cell>
    </table:table-row>
   </table:table>
   <text:p text:style-name="P4"><text:span text:style-name="T10">Use global mixins sparsely and carefully, because it affects every single Vue instance created, including third party components. In most cases, you should only use it for custom option handling like demonstrated in the example above. It’s also a good idea to ship them as </text:span><text:a xlink:type="simple" xlink:href="https://vuejs.org/v2/guide/plugins.html" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="T16">Plugins</text:span></text:a><text:span text:style-name="T10"> to avoid duplicate application.</text:span></text:p>
   <text:h text:style-name="P10" text:outline-level="2"><text:bookmark text:name="Custom-Option-Merge-Strategies"/>Custom Option Merge Strategies</text:h>
   <text:p text:style-name="P3"><text:span text:style-name="T10">When custom options are merged, they use the default strategy, which simply overwrites the existing value. If you want a custom option to be merged using custom logic, you need to attach a function to </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">Vue.config.optionMergeStrategies</text:span></text:span><text:span text:style-name="T10">:</text:span></text:p>
   <table:table table:name="Table5" table:style-name="Table5">
    <table:table-column table:style-name="Table5.A"/>
    <table:table-row>
     <table:table-cell table:style-name="Table5.A1" office:value-type="string">
      <text:p text:style-name="P6">Vue.config.optionMergeStrategies.myOption = <text:span text:style-name="T4">function</text:span> (toVal, fromVal) {</text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T9">// return mergedVal</text:span></text:p>
      <text:p text:style-name="P15">}</text:p>
     </table:table-cell>
    </table:table-row>
   </table:table>
   <text:p text:style-name="P3"><text:span text:style-name="T10">For most object-based options, you can simply use the same strategy used by </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">methods</text:span></text:span><text:span text:style-name="T10">:</text:span></text:p>
   <table:table table:name="Table6" table:style-name="Table6">
    <table:table-column table:style-name="Table6.A"/>
    <table:table-row>
     <table:table-cell table:style-name="Table6.A1" office:value-type="string">
      <text:p text:style-name="P6"><text:span text:style-name="T1">var</text:span> strategies = Vue.config.optionMergeStrategies</text:p>
      <text:p text:style-name="P15">strategies.myOption = strategies.methods</text:p>
     </table:table-cell>
    </table:table-row>
   </table:table>
   <text:p text:style-name="P3"><text:span text:style-name="T10">A more advanced example can be found on </text:span><text:a xlink:type="simple" xlink:href="https://github.com/vuejs/vuex" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="T16">Vuex</text:span></text:a><text:span text:style-name="T10">‘s 1.x merging strategy:</text:span></text:p>
   <table:table table:name="Table7" table:style-name="Table7">
    <table:table-column table:style-name="Table7.A"/>
    <table:table-row>
     <table:table-cell table:style-name="Table7.A1" office:value-type="string">
      <text:p text:style-name="P6"><text:span text:style-name="T1">const</text:span> merge = Vue.config.optionMergeStrategies.computed</text:p>
      <text:p text:style-name="P15">Vue.config.optionMergeStrategies.vuex = <text:span text:style-name="T4">function</text:span> (toVal, fromVal) {</text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T2">if</text:span><text:span text:style-name="T3"> (!toVal) </text:span><text:span text:style-name="T2">return</text:span><text:span text:style-name="T3"> fromVal</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T2">if</text:span><text:span text:style-name="T3"> (!fromVal) </text:span><text:span text:style-name="T2">return</text:span><text:span text:style-name="T3"> toVal</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T2">return</text:span><text:span text:style-name="T3"> {</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="4"/><text:span text:style-name="T3">getters: merge(toVal.getters, fromVal.getters),</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="4"/><text:span text:style-name="T3">state: merge(toVal.state, fromVal.state),</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="4"/><text:span text:style-name="T3">actions: merge(toVal.actions, fromVal.actions)</text:span></text:p>
      <text:p text:style-name="P14"><text:soft-page-break/><text:s text:c="2"/><text:span text:style-name="T3">}</text:span></text:p>
      <text:p text:style-name="P15">}</text:p>
     </table:table-cell>
    </table:table-row>
   </table:table>
   <text:p text:style-name="Text_20_body"><text:line-break/><text:span text:style-name="T14">Plugins</text:span></text:p>
   <text:h text:style-name="P10" text:outline-level="2"><text:bookmark text:name="Writing-a-Plugin"/>Writing a Plugin</text:h>
   <text:p text:style-name="P1">Plugins usually add global-level functionality to Vue. There is no strictly defined scope for a plugin - there are typically several types of plugins you can write:</text:p>
   <text:list xml:id="list1635438294356963841" text:style-name="L2">
    <text:list-item>
     <text:p text:style-name="P39"><text:span text:style-name="T10">Add some global methods or properties. e.g. </text:span><text:a xlink:type="simple" xlink:href="https://github.com/vuejs/vue-element" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="T16">vue-element</text:span></text:a></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P39"><text:span text:style-name="T10">Add one or more global assets: directives/filters/transitions etc. e.g. </text:span><text:a xlink:type="simple" xlink:href="https://github.com/vuejs/vue-touch" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="T16">vue-touch</text:span></text:a></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P39"><text:span text:style-name="T10">Add some component options by global mixin. e.g. </text:span><text:a xlink:type="simple" xlink:href="https://github.com/vuejs/vuex" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="T16">vuex</text:span></text:a></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P41">Add some Vue instance methods by attaching them to Vue.prototype.</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P39"><text:span text:style-name="T10">A library that provides an API of its own, while at the same time injecting some combination of the above. e.g. </text:span><text:a xlink:type="simple" xlink:href="https://github.com/vuejs/vue-router" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="T16">vue-router</text:span></text:a></text:p>
    </text:list-item>
   </text:list>
   <text:p text:style-name="P3"><text:span text:style-name="T10">A Vue.js plugin should expose an </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">install</text:span></text:span><text:span text:style-name="T10"> method. The method will be called with the </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">Vue</text:span></text:span><text:span text:style-name="T10"> constructor as the first argument, along with possible options:</text:span></text:p>
   <table:table table:name="Table8" table:style-name="Table8">
    <table:table-column table:style-name="Table8.A"/>
    <table:table-row>
     <table:table-cell table:style-name="Table8.A1" office:value-type="string">
      <text:p text:style-name="P6">MyPlugin.install = <text:span text:style-name="T4">function</text:span> (Vue, options) {</text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T9">// 1. add global method or property</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T3">Vue.myGlobalMethod = </text:span><text:span text:style-name="T5">function</text:span><text:span text:style-name="T3"> () {</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="4"/><text:span text:style-name="T9">// something logic ...</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T3">}</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T9">// 2. add a global asset</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T3">Vue.directive(</text:span><text:span text:style-name="T7">&apos;my-directive&apos;</text:span><text:span text:style-name="T3">, {</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="4"/><text:span text:style-name="T3">bind (el, binding, vnode, oldVnode) {</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="6"/><text:span text:style-name="T9">// something logic ...</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="4"/><text:span text:style-name="T3">}</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="4"/><text:span text:style-name="T3">...</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T3">})</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T9">// 3. inject some component options</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T3">Vue.mixin({</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="4"/><text:span text:style-name="T3">created: </text:span><text:span text:style-name="T5">function</text:span><text:span text:style-name="T3"> () {</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="6"/><text:span text:style-name="T9">// something logic ...</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="4"/><text:span text:style-name="T3">}</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="4"/><text:span text:style-name="T3">...</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T3">})</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T9">// 4. add an instance method</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T3">Vue.prototype.$myMethod = </text:span><text:span text:style-name="T5">function</text:span><text:span text:style-name="T3"> (options) {</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="4"/><text:span text:style-name="T9">// something logic ...</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T3">}</text:span></text:p>
      <text:p text:style-name="P15">}</text:p>
     </table:table-cell>
    </table:table-row>
   </table:table>
   <text:h text:style-name="P10" text:outline-level="2"><text:bookmark text:name="Using-a-Plugin"/><text:soft-page-break/>Using a Plugin</text:h>
   <text:p text:style-name="P3"><text:span text:style-name="T10">Use plugins by calling the </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">Vue.use()</text:span></text:span><text:span text:style-name="T10"> global method:</text:span></text:p>
   <table:table table:name="Table9" table:style-name="Table9">
    <table:table-column table:style-name="Table9.A"/>
    <table:table-row>
     <table:table-cell table:style-name="Table9.A1" office:value-type="string">
      <text:p text:style-name="P5">// calls `MyPlugin.install(Vue)`</text:p>
      <text:p text:style-name="P15">Vue.use(MyPlugin)</text:p>
     </table:table-cell>
    </table:table-row>
   </table:table>
   <text:p text:style-name="P1">You can optionally pass in some options:</text:p>
   <table:table table:name="Table10" table:style-name="Table10">
    <table:table-column table:style-name="Table10.A"/>
    <table:table-row>
     <table:table-cell table:style-name="Table10.A1" office:value-type="string">
      <text:p text:style-name="P6">Vue.use(MyPlugin, { someOption: <text:span text:style-name="T18">true</text:span> })</text:p>
     </table:table-cell>
    </table:table-row>
   </table:table>
   <text:p text:style-name="P3"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">Vue.use</text:span></text:span><text:span text:style-name="T10"> automatically prevents you from using the same plugin more than once, so calling it multiple times on the same plugin will install the plugin only once.</text:span></text:p>
   <text:p text:style-name="P3"><text:span text:style-name="T10">Some plugins provided by Vue.js official plugins such as </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">vue-router</text:span></text:span><text:span text:style-name="T10">automatically calls </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">Vue.use()</text:span></text:span><text:span text:style-name="T10"> if </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">Vue</text:span></text:span><text:span text:style-name="T10"> is available as a global variable. However in a module environment such as CommonJS, you always need to call </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">Vue.use()</text:span></text:span><text:span text:style-name="T10"> explicitly:</text:span></text:p>
   <table:table table:name="Table11" table:style-name="Table11">
    <table:table-column table:style-name="Table11.A"/>
    <table:table-row>
     <table:table-cell table:style-name="Table11.A1" office:value-type="string">
      <text:p text:style-name="P5">// When using CommonJS via Browserify or Webpack</text:p>
      <text:p text:style-name="P15"><text:span text:style-name="T1">var</text:span> Vue = <text:span text:style-name="T6">require</text:span>(<text:span text:style-name="T6">&apos;vue&apos;</text:span>)</text:p>
      <text:p text:style-name="P15"><text:span text:style-name="T1">var</text:span> VueRouter = <text:span text:style-name="T6">require</text:span>(<text:span text:style-name="T6">&apos;vue-router&apos;</text:span>)</text:p>
      <text:p text:style-name="P16">// Don&apos;t forget to call this</text:p>
      <text:p text:style-name="P15">Vue.use(VueRouter)</text:p>
     </table:table-cell>
    </table:table-row>
   </table:table>
   <text:p text:style-name="P3"><text:span text:style-name="T10">Checkout </text:span><text:a xlink:type="simple" xlink:href="https://github.com/vuejs/awesome-vue#libraries--plugins" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="T16">awesome-vue</text:span></text:a><text:span text:style-name="T10"> for a huge collection of community-contributed plugins and libraries.</text:span></text:p>
   <text:h text:style-name="P20" text:outline-level="1">Single File Components</text:h>
   <text:h text:style-name="P10" text:outline-level="2"><text:bookmark text:name="Introduction"/>Introduction</text:h>
   <text:p text:style-name="P3"><text:span text:style-name="T10">In many Vue projects, global components will be defined using </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">Vue.component</text:span></text:span><text:span text:style-name="T10">, followed by </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">new Vue({ el: &apos;#container&apos; })</text:span></text:span><text:span text:style-name="T10"> to target a container element in the body of every page.</text:span></text:p>
   <text:p text:style-name="P1">This can work very well for small to medium-sized projects, where JavaScript is only used to enhance certain views. In more complex projects however, or when your frontend is entirely driven by JavaScript, these disadvantages become apparent:</text:p>
   <text:list xml:id="list2620930670727744616" text:style-name="L3">
    <text:list-item>
     <text:p text:style-name="P42"><text:span text:style-name="Strong_20_Emphasis"><text:span text:style-name="T13">Global definitions</text:span></text:span><text:span text:style-name="T10"> force unique names for every component</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P44"><text:span text:style-name="Strong_20_Emphasis"><text:span text:style-name="T13">String templates</text:span></text:span><text:span text:style-name="T10"> lack syntax highlighting and require ugly slashes for multiline HTML</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P44"><text:span text:style-name="Strong_20_Emphasis"><text:span text:style-name="T13">No CSS support</text:span></text:span><text:span text:style-name="T10"> means that while HTML and JavaScript are modularized into components, CSS is conspicuously left out</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P28"><text:soft-page-break/><text:span text:style-name="Strong_20_Emphasis"><text:span text:style-name="T13">No build step</text:span></text:span><text:span text:style-name="T10"> restricts us to HTML and ES5 JavaScript, rather than preprocessors like Pug (formerly Jade) and Babel</text:span></text:p>
    </text:list-item>
   </text:list>
   <text:p text:style-name="P3"><text:span text:style-name="T10">All of these are solved by </text:span><text:span text:style-name="Strong_20_Emphasis"><text:span text:style-name="T13">single-file components</text:span></text:span><text:span text:style-name="T10"> with a </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">.vue</text:span></text:span><text:span text:style-name="T10"> extension, made possible with build tools such as Webpack or Browserify.</text:span></text:p>
   <text:p text:style-name="P3"><text:span text:style-name="T10">Here’s a simple example of a file we’ll call </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">Hello.vue</text:span></text:span><text:span text:style-name="T10">:</text:span></text:p>
   <text:p text:style-name="P2"><text:soft-page-break/><draw:frame draw:style-name="fr1" draw:name="Image1" text:anchor-type="as-char" svg:width="17.545cm" svg:height="22.983cm" draw:z-index="0"><draw:image>
      <office:binary-data>iVBORw0KGgoAAAANSUhEUgAABN4AAAVaCAMAAAACeURuAAAC/VBMVEVHcEwAAAAAAAAAAAAA
       AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
       AAAAAAAAAAAAAAAAAAAAAAAAAABqaWrCwsLi4uLr7Ov09PRwcHDV1dXl5eXk5OTj4+PZ2dnP
       z8/b29sAAADg4ODS0tLR0dHX19cAAADe3t7d3d21vrL8/PnZ0L/flJLfZF/cUUPbv4jatWDh
       mz7npRuzzrt1v4NSuFwYsyzibXL5T0f/YVj/wS4myj8ozkH///+CuJsq0UMq0kPD0NNkYExK
       WVlkW4qNTU6yy8zOwa+mvclrSFBMTE6YfmGurq6Jb0yPpbFUS2atq4usnH4AAAB5lrFdiZ+x
       zNdPZnR+WWtnjJcAAAAAAAD0q0NMeJV0h4OLiIBVb3t2kJ0AAAAAAABxdmtpblYAAADQ0NAA
       AACRl5airq4AAABPTz8AAAAAAAAAAAAAAAAAAAAlMjgAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
       AAAAAAAAAAAnOUVBX2QAAAAnMzsuPEMtQUolOH9soKJGMzgvWIAmWKiI1/H0985iNDfm1JtM
       mNQkSp3u///LlmNSMzgAAAA2R04mMkMuT2Rys7J2UTYmM1RMQjh9y8S78f+w3vNxvejz/eIl
       NmTK+P9+p83u5LczOzoxftKvbzpnp8ve//9PkcF8PDeTXTM2Rkk3MjctcLEuRk8sMzcAAADS
       fzhCfK99vs/o69OrjkgAAAAAAAClWFfycHXoZE2UX3Hyb26UOTTAa3V42f+G1tCnRzfOa3PJ
       UD6uZ3FTdl0+ZoxUreeG3f/DXV7xa16Kxtpton5gwvo3QkF4j5NcVTqkytju//RviFyMZp9k
       hcuEn2P/zGPuyGGvsFz/y1rBw1/7uU+YrWV/qP64jezIj+y8eJBCW8FZkfaeh+vIj+HGisZ7
       eOHCgatkac26h9ubdMG05ofC6YjC6IKZ24lCinS+3XPlhmT5jGYAAAAAAAAAAAAAAAD/JjJf
       AAAA/3RSTlMAAQIDBAUGBwgJCgsMDQ4QEhQWGCAoMDU3OTs+I2H/////Tf////////8q////
       /zL/////////////////////////////////////////////////////////Gv///////xtB
       ////////HUP//x7/H//5Rv8iSSVLTP9PLFMuVllcXmFj//9k//////////////////////9n
       //////////////////////////////////////9q//////9tb///////////////////////
       /////////////////////////////////////////////////////////3d7kKH7BQ3dAACS
       UElEQVR4AezUgVHEMAwAMEoB9t+YAbhLWsfQ2C8NoTd6AAAAAAAAAAAAAAAAAADgABI5xVzg
       QHwGtrMa4DmtARsTGyA5swGOMxvgOLUBilMboDi3AQNuAwzntncgkeHmBAbyG2mbm9BAdn1v
       sxp4rm1uXgPLtc1NbCC5QrmpDWgX3OOznUDI48d1yc1cUNLfFtcgN6FBD/nDlc7NatBQYnFV
       d/MatJYyXMPcTqCFbsGt3Xbe8fEIIO24Ur8t3Ca0mmDtuDLBRXOTWn+ILhpc5dy89iqwXNng
       Qrmtx/b5b4B4cuPh9v4t7Tab9YHv0oartdv5m9TqglvHVfrtGLl0W3prX2FAenOXhtvyt1Bu
       49s27guIJLcaXIHc5rcJDXpkFxnuGNh8t9ltua193wbkNjcbbuvfFnKb1eYuqDjgrLgbwT37
       Wzi3cW1Gg9rX/bBnF9gNAlEUhk99BId6i9Tdsv+11Yk+HhkiA4f7tckS/nNfhk9c48C1sG58
       3OrKtjcnAQAr0LxzTOH4wG1Ualnd+LixaUPIALoWPTZxTODa1jfD6ca3rTZsAgBaqTZyTOHM
       B5zlvJnHjSubqCbXDABENa5x5oGzmreNKmzc+LbVh00CQGvUR44tHB+4jSqtmW5M3Li2GUVN
       AcDKGYWOKRwXuLYMuAWmG9G2qrKhZgBd6l1V44jCLTDgWlQ3g7gxZVMsDQArpFhM40wCZ79v
       BpcpGzeubXVd0wBgWV3lmMLxgbN+n85Tt60ROm502yrDphnOSgGAZlRGji4cHbitkXn6Zr9u
       ZNyI4TabNrZrjnUAwFZuNnH0hKMDZ7Vv5tONiFsZtumg0RlzKR4ArJlLobM3HbsycnTgDAec
       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
       nzcicmtz6vMmopMhn7s+b2ufN6+Et6Z2vGWPvTnLGxGb03zennJ4G9bMW2ZyOoyNFi7hjYhU
       eLs8LeGtpRVvOaOFObwR/QVv8/wrkXTirS3HW/y+ENd5I4K3+MmQqRRv7Vp462R4G+fzNoM3
       onjwNvN5kx+d6svbEbwRhcHbUT5vxzrx1s3wlj7VC29ExcHbVGJ0WhtvvTRvXvFogU8LRPCW
       uhIpxpuX5q0Hb8ZEBG/CMN76Fbx9xnh7dJY3Ivp6tIO3hxRvc3gj2gZv8+zoVGPeBhne/nSD
       N6Kq4O3PNwt4W8IbkUTwNjSTt82roxHRRoq3kY68jXJ5e4c3opzg7RPedI6I4O3I523lMm9E
       8LZa+rwd2cXbwnDeiAjeTgt5E27zRgRvYrks4O3UDN4ur+GNSCV4u740hrcJvBHJB28TeNM7
       IoI38yMieNuFN6KC4O3PN3jTMiKCtxm8ESWDtxm8WRcRvC3gzcKI4E38sHd3vW0ddwLGv8lu
       gE1R7M1eFIHsAnvBuwCJwdR0XpTFupEv0rpAemFjr+ZewVAyHS1tKQSPE9mxoyRKLKk8FgHb
       AUhJtkxasUglUl662++yM/xzRHE61omOqGipPr8CAedQPIcSwadzXkiTNwBDj7wBIG/kDcAQ
       IG8AyBt5A0DeyBsA8kbe3v9FQAHk7Zd26xcBBZA38kbecNzIG3kDeQN5I29QAHkDcHKQNwDk
       jbwBIG/kDQB5I28AyBt5A0DeyBsA8gaAvJE3AOSNvAEgb+QNAHkjbzqXtZZUWgDIm0+P5/P5
       qhqE8VpJpTRb71hJt34A5M2nJ8od8+rwqqv1tUep85aRvKVbPwDy5ovKg8tb9Pgw+dGFeFTy
       Npj1A+SNvFUmjj1vQqfKGwDyFqaVUsuDyZv286N0qVRSPQU7mC8W1K75vvv9vOlCqRQnrh8A
       eXsefbi8zS6uP4nVWCZjj56tZYyGrPZcs26XPO0MNjIjTTPIbphFT7sLck25P5i3iVqzbo1I
       0RLWP73+4BsFDBB5I2/PNlutlsnbar1HgjXmhitxZ8dyj0bfgpVg3norPKWMhPVPm2cxdeWm
       AgaCvJG3ucX1lnUrVrl2u23nWm3jUbdV9bV2rSk5sjXbqnUWNd0Co52V+8N5G2nXahmpoU5Y
       /7Q8kQcXFXBo5I28PbvT6jVFe8fGoqbpWUkmWVtFOS1gk3VKzZmISd7WGkpHG+b+OJC3XLso
       e7WyMGH9UlqmcDg08kbetMvJtxfm/TObLlVrS92l9Yb5r43Rqp1pzWYkb91szdblUV7etFZC
       api0fuvqppvCVRWQEnkjb7IzOPXRGaVVMG+rrkrSNMnbWH/eGm4a1vDyJqJs27Czu0Li+kV0
       XyaUT2IFpETeyFvL+E45wfz0uLyN9uVNflhvSJ78vEUbdWermLj+XZPbh8wbQN7Im+yZHjpv
       aiyQN6meXAcix9iS8+b2T9PnDSBv5C18oMvPz0jNWdpv9rbq583drp8qyodRbd4S1m95hwOB
       FMgbebOi+9stdwAumB+JlgjmrSH3BPM25m6PyuwtYf1y2M067OW9AHkjb6qqrt511735+ana
       KhX2zZtcr2uG7lFa7nGPl3zpVclbwvqn3cQtVgB5I2+7UuatN2l6EnsnCWy1JF/GuVoczJtc
       2eHy5Urnzd5G63J/wvqnW4aZRgLkjbw5E5UJ+40h5r+VqkrDTuG6eTNJqo9ks3IozA62arlc
       rWnPfAbzZnZPc+4zqIYkr12rNbpZG1kqmvhJBhPWP83ETQHkzd8xddLkTUSV3ozKeurmWsLl
       rejnTbidTGmateIe7jQS16+WFTA45I28+cqPXX6ssW6NMo3nnFpod35gpKB2jWZc3tx1b1tL
       cuFIwvqVVgB5I29HqhDHsXLO2X8cpqC0fs53U0Y5c7/qExcKhe4Kdsyjiz9z/QDI25HT4XEw
       b0pXtfJonW79AMjbsfLyBoC8kTcA5G04RM0UeQNA3oZArlYrKADkbdjyBoC8kTcA5I28ASBv
       Jx8A8gaAvJE3AOSNvAEgb+QNAHkjbwDIG3kDQN4AkDfyBoC8kTcA5I28ASBv5A0AeSNvAMgb
       APJG3gCQN/KWz6sjcePd8+fPBMZD4Oqzi2fCY4C8MXub3G4ZL4fHRy+6cOlSSaU0t26e6tQf
       /PEAn5v1pvJd/f7SqwogbwHjExOVciVf/X8xe9tuSc7C48G7ernUV9fPZmb+coi8WT+Ex76z
       Z98o7G727Nm3Y5VgemHGuqZ813sLJ3//yitvqwSTd+9eqaqTB+TNp5fLXTvquEkRPirng+PB
       09GPMz/11eyDBVmQzo0b99elxd44ZGbmv3fLujgz82nxsHmT529Wm7Amfb3VuhWrkwfkzReV
       d+0c/+xter31pKB0eDx4c594NZtOnTehv5SceeOQ3S1JoL5IDs7yufm7CXmzCexVM2zSJPev
       6h8CeSNvdr9UJnFVdbwkZ3F4fNR5E++8996htic588ZBezd9RwKVSF8fQN6ut+RveuKAvPl0
       vreTOv8LzN7mS6VB5u3MmXPKs3zmTKyc6MyZ/1IiMJ41jXmkfP7abnrbS+jzy8FxIG8zH6qu
       qd3b77/jNhf8ffy8RfbZHSxvczJ5818PDDXylmDi6I6+zS6um0jpjcxIrlmv19eeyhv/wTeH
       zdvn9nDUi6//+OJLBWUsvvDC1/c+mTFeKirr/G07eOFtZfnjOy+8+KIZmf/+6oWvlTF729x+
       8eHHypDhF6O3O2srBbZ32LxJ0i5c+v5VFd3u5u3uwozx8HUl/N/Hy5uek2f3uZe3Yvjv35tP
       PrHPPvx6gLyRt4PM3p5ttlo2UtHjurNi3072qokrN1PnTQoh7Fta3vz/JMffZb/vjrv7Wqy8
       sXu0kLjMfeYe6vZcnS/i4PbS502ezGk1uWDTJPvIpqd9T8f/fby8yWleEZy9+X9/Mbvdan2n
       rOTXA0OHvIXJzunAzS2ut6xbLm/trJ0wPO288a0HF/tqIG9Efxy2OGNOOL7x44LNTUne/NY/
       v/JrmwMZfvqbyzYav1V/P/7PV177vXnsv7322muv2IvJdPTgld/7efvppbM2Il+FtidS9llK
       da+TI9OpT5ekvg8vn11wz8H/fby8VVt26vaW/XX6zpxeC//9e5O3qYKykl8PDAvyljx5q1QH
       PXt7dqfl3jPydlprKB1t1OtbsXvnyZTBO+ztjcOi23YWJW/pXt5+svuZk//+sUxuvjDL9R35
       OW9sRZ1jb9XdYNgFfXmzA/u404HtBcgc6NXA2CMl+iLuFPfR9IJZoTy/gkuU//v4eZOfO62k
       irJQnvO18N9fRG7ylvx6YPiQt7Dx8qAnb9q9Xb69ML/7dlqxd8yat9UjZV3ddFOGqhm8++5m
       7xJebxxgoiCzqjt782Zr4FJg5kTuPf+VPw6fOZ3z8mbzoTYlGf72nnvVRevKxffjwLifbVph
       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
       gg==
      </office:binary-data>
     </draw:image>
    </draw:frame></text:p>
   <text:p text:style-name="P1">Now we get:</text:p>
   <text:list xml:id="list1919994006243102554" text:style-name="L4">
    <text:list-item>
     <text:p text:style-name="P43"><text:a xlink:type="simple" xlink:href="https://github.com/vuejs/awesome-vue#syntax-highlighting" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="T16">Complete syntax highlighting</text:span></text:a></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P45"><text:a xlink:type="simple" xlink:href="https://webpack.github.io/docs/commonjs.html" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="T16">CommonJS modules</text:span></text:a></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P29"><text:soft-page-break/><text:a xlink:type="simple" xlink:href="https://github.com/vuejs/vue-loader/blob/master/docs/en/features/scoped-css.md" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="T16">Component-scoped CSS</text:span></text:a></text:p>
    </text:list-item>
   </text:list>
   <text:p text:style-name="P1">As promised, we can also use preprocessors such as Pug, Babel (with ES2015 modules), and Stylus for cleaner and more feature-rich components.</text:p>
   <text:p text:style-name="P2"><draw:frame draw:style-name="fr1" draw:name="Image2" text:anchor-type="as-char" svg:width="17.734cm" svg:height="23.232cm" draw:z-index="1"><draw:image>
      <office:binary-data>iVBORw0KGgoAAAANSUhEUgAABN4AAAZuCAMAAACsehtIAAADAFBMVEVHcEwAAAAAAAAAAAAA
       AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
       AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABramvGxsbh4eHr7Oz19fTW1tbl5uXk5OTV1dXj
       4+Pa2trCwsLQ0NDc3NwAAADY2Njf39/S0tLR0dEAAADe3t7////Z07zflJLgZF/mXk3NTj7c
       xI/KnmPfoCTXt3i9zcqIyYRWpHUYsyzhbnH/YVj1rxn/wS4ozUGyxLDCz9VrS1pNTU1UbXuI
       a1mxy83SxrKurq5Md5WkvcrDu6uww8L5wDWcgmCerrFQSma2sZKBpsWso4J3kJ1fiJyxzNdR
       Z3IAAAAAAAAAAABmfH+NioNukZ5wu4Nvc2YAAAAAAACLlpZlY0qWpKNNPztDPlcAAAAAAAAA
       AAAAAAAAAAAAAAAlMjgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAApNz0/U11BYWQ0
       REcnMjcuPEMqP0olMTcnSHlZksBHMzcAAAA2TVgxW4GJd0AkYq2m2/Lx+NFpODnk1ZtKldQk
       Tp/u//+Dy+9VMjcsMjdztLM2R05wTjUmMkAlVGJ4gXgmM1N2i4d9y8TD4fAnMXRrtuMmM0a6
       8v8mMV7K9/9sq8zs5r4AAAAxfc+VXzNbpNfn/PwuRU98PTjd//8+MzclPpCnjEIAAABZUzhA
       e66ROTR+VmslPmUAAAAAAACLS05uWItyilxlfFWiVFfycHW+juzIj+y/e5NBiXPC6YjC5nm6
       w1o0NTiUXnLyb26dPTWyjOuG3f+F1deAtpvA3G81Pz3Aa3Vjas183P9EWb9RYlpEUkFqzf2w
       RTjOanS6U06tZG+QbK/IkOO2gtB7ed/FjdrAgKubheqb3Ymy4YV2pHipqE49ZI7Hi8KH2/TE
       XGDxal6bt22GoGGzcYvC6YJ9VjTu//KLwdZSrfR/p/74i2YAAAAAAAAAAAAAAAAAAAAAAACs
       wPMNAAABAHRSTlMAAQIDBAUGBwgJCgsMDg8REhMVFhgZICgwNjg6PT4jXbr/////////////
       //8r/////zL//////////////////////////////////////////////////////////xtB
       Hf//////HkT//////0ciSSVLTv9RLVRYW11fYGJk//////////////9m////////////////
       //////////////////////////9p/////////////2v//////21v////////////////////
       ////////////////////////////////////////////////////////////cXd7i5ihQudV
       RQAAvlVJREFUeAHs1wVyHDAUREFvzHT/66YgLOvLgrUg3Yd4NXMDAAAAAAAAAAAAAAAAAABn
       uAwE3KBcoIHoGaidqgE6J2vAuoQNEDllAzRO2QCNkzZA4qQNkLigbQDaBiictn0bCFC4MgGL
       gPgdGzdBA7E7t22qBjp3bNx0DVTu2LgJG4jcRnGTNuC4wE0v2y3QZHrjTonbluUCrpu4A+J2
       RtCA8YXbOm4HVg0YmLhd63Z014AhhTswbrdHAE4LXF/bbmvcAVMMa9xWfetom6DBnvoat03g
       WuN2ftRA6FoDt3PcdA3+l8ptG7imuPWH7R74Ml2RCwq3dt+Gte2cmoHeDSvcXnW7TYka7Kuq
       cTv1rTZut4nhWXtoBgzP3KcKt2TfeuN2l5IvWFhL5HoDt0Hcym07I2ggdi2FuwQWr1upbWOz
       9ghUG5u5UuGW7ltH3Epp27FdoIClxHUEbkrd6uMWp23vooHWxYlrDtyadQviFpStqmpPVwC0
       dy4oXBy4S9Z6dQviFqZtt5CB6IWJiwO3VN/qp1vQtmLYnoAlFSMXFK5+wE3OW33corI95T0D
       X+wpL2pcfeCm5u2SE8ctbFscNkWDtZQjFxcuDNwlZ53pFsQtaFtV1F6uDqgKXVC4IHDLDLiO
       6fZB23Jl26lmoHe5xn1QuI4Bt0TdquMWlO0l9HpFwEsoaFxF4Gr6Nv+ZxnEL2lbq2iswWaly
       UeHCwE3/p5+p2+1vadzybcuG7TXwdlXAayAbubRw+cDd/vaZvs2tWxC3ZLilaQu79gZMF1Yu
       TVwy4YLATe1bw3RL4/YzbP8GrSJj78B3du1qu3EYCMDw8ooassNkKWQqM3P7/m+0DihttZYd
       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
       AkDeVmVboZLPeWvx9NY9MLBo/w1sVNzKcdmdN/VusWw03AgdGeVcNZa3Jkxvn/aJqXp5c6+3
       C89S+wAgb0rq1v7prZe0CskhNuVcT5r/aU2a3xXuCCjOU2N5m5Zz2OmG8/bze4r8ZOOkLNK6
       Tt6c65G3tgPkTcktIY68tfDam9bBBqaQnYX39u63mvUualM6uBJ90O1o25Vp2T6QfVnZOW0g
       b3LDh1Dfmp3QLEXq5M25nhTy1l6AvNXUzcuo8uFi83dOo1vM9FJ0HvruWo6I1u2B5T2plax3
       40r1SxT5Dc7fELISpcvnD57jBDaWN/qDvUuN7fGX9e/Ll842+wvOvC38UQLmWN/m6Q0AefPz
       RjpQJNI8tGVSmVW5r7epOEldSXPtbCN8kui+e7VzKGbPGqVrt7hyjvU1NGctWboRTxg989JD
       +4MQA8OVi/rM5b0skZpO2BcTDeZNc59mfzM8GP/aVknzXsE31+4uxr7mi3KuvNklv0kmk/OO
       9chb2wHyFilWP2/yTy2w9To3dqwkotwkLjrWO0ZBIev5vaxfEmWayewHq8mEqJ83sfld1cbn
       whfy1Jk3Nv29cz3ydqwgb8hb82c3disumwfyGzxYz11St+WwXEyrXV9D6+Xgte65yXL/tL4U
       q9585UXSTbpk1w9yTqO8aXfe2O17s9a/vicrHtbrk8vhbz/i4zq630Prd/dsEs861uPaWzsB
       8uaWYqpVfynLT2cqlt4Y7BwsFUkpsjxNIeVcX+PO4ODgS1L7LyYWKOKlKzZJ8pmi3EiiNWmt
       iR/U+1sPIyPXNqJv0TlybeTuKFmaSCkKP0Ro/6U5zdfasZ7sYmoPAOSt/aRkIqdyinQD6x1S
       Wmv1996hWMVT+RnTRmgibVBEntehlXs9APKGv3N6CIdpx8Je93AxOCOeokPQzueN09RKAMgb
       6OAXvMmvrwT4WCBv+Cv10Vbr5TUC+Iggb6D9q0PJZN/IBgF8TJA3TG9MMwL4mCFvAHACIG+Y
       3gAAeQMA5A15w/QGgLwhbwCAvGF6AwDkDdMbACBvmN4AAHkDAOQNecP0BoC8IW8AgLxhegMA
       5A3TGwAgb8gbACBvAIC8IW8AgLwhbwCAvCFvAIC8IW/q/BP2gADgSJA3lRrnP+OeTlFZdKQp
       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
      </office:binary-data>
     </draw:image>
    </draw:frame></text:p>
   <text:p text:style-name="P3"><text:soft-page-break/><text:span text:style-name="T10">These specific languages are just examples. You could just as easily use Bublé, TypeScript, SCSS, PostCSS - or whatever other preprocessors that help you be productive. If using Webpack with </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">vue-loader</text:span></text:span><text:span text:style-name="T10">, it also has first-class support for CSS Modules.</text:span></text:p>
   <text:h text:style-name="P13" text:outline-level="3"><text:bookmark text:name="What-About-Separation-of-Concerns"/>What About Separation of Concerns?</text:h>
   <text:p text:style-name="P3"><text:span text:style-name="T10">One important thing to note is that </text:span><text:span text:style-name="Strong_20_Emphasis"><text:span text:style-name="T13">separation of concerns is not equal to separation of file types.</text:span></text:span><text:span text:style-name="T10"> In modern UI development, we have found that instead of dividing the codebase into three huge layers that interweaves with one another, it makes much more sense to divide them into loosely-coupled components and compose them. Inside a component, its template, logic and styles are inherently coupled, and collocating them actually makes the component more cohesive and maintainable.</text:span></text:p>
   <text:p text:style-name="P1">Even if you don’t like the idea of Single-File Components, you can still leverage its hot-reloading and pre-compilation features by separating your JavaScript and CSS into separate files:</text:p>
   <table:table table:name="Table12" table:style-name="Table12">
    <table:table-column table:style-name="Table12.A"/>
    <table:table-row>
     <table:table-cell table:style-name="Table12.A1" office:value-type="string">
      <text:p text:style-name="P5">&lt;!-- my-component.vue --&gt;</text:p>
      <text:p text:style-name="P17">&lt;template&gt;</text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T21">&lt;div&gt;</text:span><text:span text:style-name="T3">This will be pre-compiled</text:span><text:span text:style-name="T21">&lt;/div&gt;</text:span></text:p>
      <text:p text:style-name="P17">&lt;/template&gt;</text:p>
      <text:p text:style-name="P15"><text:span text:style-name="T20">&lt;script src=</text:span><text:span text:style-name="T6">&quot;./my-component.js&quot;</text:span><text:span text:style-name="T20">&gt;&lt;/script&gt;</text:span></text:p>
      <text:p text:style-name="P15"><text:span text:style-name="T20">&lt;style src=</text:span><text:span text:style-name="T6">&quot;./my-component.css&quot;</text:span><text:span text:style-name="T20">&gt;&lt;/style&gt;</text:span></text:p>
     </table:table-cell>
    </table:table-row>
   </table:table>
   <text:h text:style-name="P10" text:outline-level="2"><text:bookmark text:name="Getting-Started"/>Getting Started</text:h>
   <text:h text:style-name="P13" text:outline-level="3"><text:bookmark text:name="For-Users-New-to-Module-Build-Systems-in-JavaScript"/>For Users New to Module Build Systems in JavaScript</text:h>
   <text:p text:style-name="P3"><text:span text:style-name="T10">With </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">.vue</text:span></text:span><text:span text:style-name="T10"> components, we’re entering the realm of advanced JavaScript applications. That means learning to use a few additional tools if you haven’t already:</text:span></text:p>
   <text:list xml:id="list4550302361461078144" text:style-name="L5">
    <text:list-item>
     <text:p text:style-name="P40"><text:span text:style-name="Strong_20_Emphasis"><text:span text:style-name="T13">Node Package Manager (NPM)</text:span></text:span><text:span text:style-name="T10">: Read the </text:span><text:a xlink:type="simple" xlink:href="https://docs.npmjs.com/getting-started/what-is-npm" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="T16">Getting Started guide</text:span></text:a><text:span text:style-name="T10"> through section </text:span><text:span text:style-name="Emphasis"><text:span text:style-name="T17">10: Uninstalling global packages</text:span></text:span><text:span text:style-name="T10">.</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P40"><text:soft-page-break/><text:span text:style-name="Strong_20_Emphasis"><text:span text:style-name="T13">Modern JavaScript with ES2015/16</text:span></text:span><text:span text:style-name="T10">: Read through Babel’s </text:span><text:a xlink:type="simple" xlink:href="https://babeljs.io/docs/learn-es2015/" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="T16">Learn ES2015 guide</text:span></text:a><text:span text:style-name="T10">. You don’t have to memorize every feature right now, but keep this page as a reference you can come back to.</text:span></text:p>
    </text:list-item>
   </text:list>
   <text:p text:style-name="P3"><text:span text:style-name="T10">After you’ve taken a day to dive into these resources, we recommend checking out the </text:span><text:a xlink:type="simple" xlink:href="https://github.com/vuejs-templates/webpack-simple" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="T16">webpack-simple</text:span></text:a><text:span text:style-name="T10"> template. Follow the instructions and you should have a Vue project with </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">.vue</text:span></text:span><text:span text:style-name="T10"> components, ES2015 and hot-reloading running in no time!</text:span></text:p>
   <text:p text:style-name="P3"><text:span text:style-name="T10">The template uses </text:span><text:a xlink:type="simple" xlink:href="https://webpack.github.io/" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="T16">Webpack</text:span></text:a><text:span text:style-name="T10">, a module bundler that takes a number of “modules” and then bundles them into your final application. To learn more about Webpack itself, </text:span><text:a xlink:type="simple" xlink:href="https://www.youtube.com/watch?v=WQue1AN93YU" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="T16">this video</text:span></text:a><text:span text:style-name="T10"> offers a good intro. Once you get past the basics, you might also want to check out </text:span><text:a xlink:type="simple" xlink:href="https://egghead.io/courses/using-webpack-for-production-javascript-applications" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="T16">this advanced Webpack course on Egghead.io</text:span></text:a><text:span text:style-name="T10">.</text:span></text:p>
   <text:p text:style-name="P3"><text:span text:style-name="T10">In Webpack, each module can be transformed by a “loader” before being included in the bundle, and Vue offers the </text:span><text:a xlink:type="simple" xlink:href="https://github.com/vuejs/vue-loader" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="T16">vue-loader</text:span></text:a><text:span text:style-name="T10"> plugin to take care of translating </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">.vue</text:span></text:span><text:span text:style-name="T10"> single-file components. The </text:span><text:a xlink:type="simple" xlink:href="https://github.com/vuejs-templates/webpack-simple" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="T16">webpack-simple</text:span></text:a><text:span text:style-name="T10"> template has already set up everything for you, but if you’d like to learn more about how </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">.vue</text:span></text:span><text:span text:style-name="T10"> components work with Webpack, you can read </text:span><text:a xlink:type="simple" xlink:href="https://vue-loader.vuejs.org/" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="T16">the docs for vue-loader</text:span></text:a><text:span text:style-name="T10">.</text:span></text:p>
   <text:h text:style-name="P13" text:outline-level="3"><text:bookmark text:name="For-Advanced-Users"/>For Advanced Users</text:h>
   <text:p text:style-name="P3"><text:span text:style-name="T10">Whether you prefer Webpack or Browserify, we have documented templates for both simple and more complex projects. We recommend browsing </text:span><text:a xlink:type="simple" xlink:href="https://github.com/vuejs-templates" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="T16">github.com/vuejs-templates</text:span></text:a><text:span text:style-name="T10">, picking a template that’s right for you, then following the instructions in the README to generate a new project with </text:span><text:a xlink:type="simple" xlink:href="https://github.com/vuejs/vue-cli" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="T16">vue-cli</text:span></text:a><text:span text:style-name="T10">.</text:span></text:p>
   <text:h text:style-name="P20" text:outline-level="1">Unit Testing</text:h>
   <text:h text:style-name="P10" text:outline-level="2"><text:bookmark text:name="Setup-and-Tooling"/>Setup and Tooling</text:h>
   <text:p text:style-name="P3"><text:span text:style-name="T10">Anything compatible with a module-based build system will work, but if you’re looking for a specific recommendation, try the </text:span><text:a xlink:type="simple" xlink:href="http://karma-runner.github.io/" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="T16">Karma</text:span></text:a><text:span text:style-name="T10"> test runner. It has a lot of community plugins, including support for </text:span><text:a xlink:type="simple" xlink:href="https://github.com/webpack/karma-webpack" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="T16">Webpack</text:span></text:a><text:span text:style-name="T10"> and </text:span><text:a xlink:type="simple" xlink:href="https://github.com/Nikku/karma-browserify" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="T16">Browserify</text:span></text:a><text:span text:style-name="T10">. For detailed setup, please refer to each project’s respective documentation, though these example Karma configurations for </text:span><text:a xlink:type="simple" xlink:href="https://github.com/vuejs-templates/webpack/blob/master/template/test/unit/karma.conf.js" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="T16">Webpack</text:span></text:a><text:span text:style-name="T10"> and </text:span><text:a xlink:type="simple" xlink:href="https://github.com/vuejs-templates/browserify/blob/master/template/karma.conf.js" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="T16">Browserify</text:span></text:a><text:span text:style-name="T10"> may help you get started.</text:span></text:p>
   <text:h text:style-name="P10" text:outline-level="2"><text:bookmark text:name="Simple-Assertions"/><text:soft-page-break/>Simple Assertions</text:h>
   <text:p text:style-name="P1">In terms of code structure for testing, you don’t have to do anything special in your components to make them testable. Just export the raw options:</text:p>
   <table:table table:name="Table13" table:style-name="Table13">
    <table:table-column table:style-name="Table13.A"/>
    <table:table-row>
     <table:table-cell table:style-name="Table13.A1" office:value-type="string">
      <text:p text:style-name="P7">&lt;template&gt;</text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T21">&lt;span&gt;</text:span><text:span text:style-name="T3">{{ message }}</text:span><text:span text:style-name="T21">&lt;/span&gt;</text:span></text:p>
      <text:p text:style-name="P17">&lt;/template&gt;</text:p>
      <text:p text:style-name="P17">&lt;script&gt;</text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T2">export</text:span><text:span text:style-name="T3"> </text:span><text:span text:style-name="T2">default</text:span><text:span text:style-name="T3"> {</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="4"/><text:span text:style-name="T3">data () {</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="6"/><text:span text:style-name="T2">return</text:span><text:span text:style-name="T3"> {</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="8"/><text:span text:style-name="T3">message: </text:span><text:span text:style-name="T7">&apos;hello!&apos;</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="6"/><text:span text:style-name="T3">}</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="4"/><text:span text:style-name="T3">},</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="4"/><text:span text:style-name="T3">created () {</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="6"/><text:span text:style-name="T2">this</text:span><text:span text:style-name="T3">.message = </text:span><text:span text:style-name="T7">&apos;bye!&apos;</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="4"/><text:span text:style-name="T3">}</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T3">}</text:span></text:p>
      <text:p text:style-name="P17">&lt;/script&gt;</text:p>
     </table:table-cell>
    </table:table-row>
   </table:table>
   <text:p text:style-name="P1">When you test that component, all you have to do is import the object along with Vue to make many common assertions:</text:p>
   <table:table table:name="Table14" table:style-name="Table14">
    <table:table-column table:style-name="Table14.A"/>
    <table:table-row>
     <table:table-cell table:style-name="Table14.A1" office:value-type="string">
      <text:p text:style-name="P5">// Import Vue and the component being tested</text:p>
      <text:p text:style-name="P15"><text:span text:style-name="T1">import</text:span> Vue <text:span text:style-name="T1">from</text:span> <text:span text:style-name="T6">&apos;vue&apos;</text:span></text:p>
      <text:p text:style-name="P15"><text:span text:style-name="T1">import</text:span> MyComponent <text:span text:style-name="T1">from</text:span> <text:span text:style-name="T6">&apos;path/to/MyComponent.vue&apos;</text:span></text:p>
      <text:p text:style-name="P16">// Here are some Jasmine 2.0 tests, though you can</text:p>
      <text:p text:style-name="P16">// use any test runner / assertion library combo you prefer</text:p>
      <text:p text:style-name="P15">describe(<text:span text:style-name="T6">&apos;MyComponent&apos;</text:span>, () =&gt; {</text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T9">// Inspect the raw component options</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T3">it(</text:span><text:span text:style-name="T7">&apos;has a created hook&apos;</text:span><text:span text:style-name="T3">, () =&gt; {</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="4"/><text:span text:style-name="T3">expect(</text:span><text:span text:style-name="T2">typeof</text:span><text:span text:style-name="T3"> MyComponent.created).toBe(</text:span><text:span text:style-name="T7">&apos;function&apos;</text:span><text:span text:style-name="T3">)</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T3">})</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T9">// Evaluate the results of functions in</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T9">// the raw component options</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T3">it(</text:span><text:span text:style-name="T7">&apos;sets the correct default data&apos;</text:span><text:span text:style-name="T3">, () =&gt; {</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="4"/><text:span text:style-name="T3">expect(</text:span><text:span text:style-name="T2">typeof</text:span><text:span text:style-name="T3"> MyComponent.data).toBe(</text:span><text:span text:style-name="T7">&apos;function&apos;</text:span><text:span text:style-name="T3">)</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="4"/><text:span text:style-name="T2">const</text:span><text:span text:style-name="T3"> defaultData = MyComponent.data()</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="4"/><text:span text:style-name="T3">expect(defaultData.message).toBe(</text:span><text:span text:style-name="T7">&apos;hello!&apos;</text:span><text:span text:style-name="T3">)</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T3">})</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T9">// Inspect the component instance on mount</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T3">it(</text:span><text:span text:style-name="T7">&apos;correctly sets the message when created&apos;</text:span><text:span text:style-name="T3">, () =&gt; {</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="4"/><text:span text:style-name="T2">const</text:span><text:span text:style-name="T3"> vm = </text:span><text:span text:style-name="T2">new</text:span><text:span text:style-name="T3"> Vue(MyComponent).$mount()</text:span></text:p>
      <text:p text:style-name="P14"><text:soft-page-break/><text:s text:c="4"/><text:span text:style-name="T3">expect(vm.message).toBe(</text:span><text:span text:style-name="T7">&apos;bye!&apos;</text:span><text:span text:style-name="T3">)</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T3">})</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T9">// Mount an instance and inspect the render output</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T3">it(</text:span><text:span text:style-name="T7">&apos;renders the correct message&apos;</text:span><text:span text:style-name="T3">, () =&gt; {</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="4"/><text:span text:style-name="T2">const</text:span><text:span text:style-name="T3"> Ctor = Vue.extend(MyComponent)</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="4"/><text:span text:style-name="T2">const</text:span><text:span text:style-name="T3"> vm = </text:span><text:span text:style-name="T2">new</text:span><text:span text:style-name="T3"> Ctor().$mount()</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="4"/><text:span text:style-name="T3">expect(vm.$el.textContent).toBe(</text:span><text:span text:style-name="T7">&apos;bye!&apos;</text:span><text:span text:style-name="T3">)</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T3">})</text:span></text:p>
      <text:p text:style-name="P15">})</text:p>
     </table:table-cell>
    </table:table-row>
   </table:table>
   <text:h text:style-name="P10" text:outline-level="2"><text:bookmark text:name="Writing-Testable-Components"/>Writing Testable Components</text:h>
   <text:p text:style-name="P1">A lot of components’ render output are primarily determined by the props they receive. In fact, if a component’s render output solely depends on its props, it becomes quite straightforward to test, similar to asserting the return value of a pure function with different arguments. Take an contrived example:</text:p>
   <table:table table:name="Table15" table:style-name="Table15">
    <table:table-column table:style-name="Table15.A"/>
    <table:table-row>
     <table:table-cell table:style-name="Table15.A1" office:value-type="string">
      <text:p text:style-name="P7">&lt;template&gt;</text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T21">&lt;p&gt;</text:span><text:span text:style-name="T3">{{ msg }}</text:span><text:span text:style-name="T21">&lt;/p&gt;</text:span></text:p>
      <text:p text:style-name="P17">&lt;/template&gt;</text:p>
      <text:p text:style-name="P17">&lt;script&gt;</text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T2">export</text:span><text:span text:style-name="T3"> </text:span><text:span text:style-name="T2">default</text:span><text:span text:style-name="T3"> {</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="4"/><text:span text:style-name="T3">props: [</text:span><text:span text:style-name="T7">&apos;msg&apos;</text:span><text:span text:style-name="T3">]</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T3">}</text:span></text:p>
      <text:p text:style-name="P17">&lt;/script&gt;</text:p>
     </table:table-cell>
    </table:table-row>
   </table:table>
   <text:p text:style-name="P3"><text:span text:style-name="T10">You can assert its render output with different props using the </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">propsData</text:span></text:span><text:span text:style-name="T10">option:</text:span></text:p>
   <table:table table:name="Table16" table:style-name="Table16">
    <table:table-column table:style-name="Table16.A"/>
    <table:table-row>
     <table:table-cell table:style-name="Table16.A1" office:value-type="string">
      <text:p text:style-name="P6"><text:span text:style-name="T1">import</text:span> Vue <text:span text:style-name="T1">from</text:span> <text:span text:style-name="T6">&apos;vue&apos;</text:span></text:p>
      <text:p text:style-name="P15"><text:span text:style-name="T1">import</text:span> MyComponent <text:span text:style-name="T1">from</text:span> <text:span text:style-name="T6">&apos;./MyComponent.vue&apos;</text:span></text:p>
      <text:p text:style-name="P16">// helper function that mounts and returns the rendered text</text:p>
      <text:p text:style-name="P15"><text:span text:style-name="T4">function</text:span> <text:span text:style-name="T22">getRenderedText</text:span> (Component, propsData) {</text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T2">const</text:span><text:span text:style-name="T3"> Ctor = Vue.extend(Component)</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T2">const</text:span><text:span text:style-name="T3"> vm = </text:span><text:span text:style-name="T2">new</text:span><text:span text:style-name="T3"> Ctor({ propsData }).$mount()</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T2">return</text:span><text:span text:style-name="T3"> vm.$el.textContent</text:span></text:p>
      <text:p text:style-name="P15">}</text:p>
      <text:p text:style-name="P15">describe(<text:span text:style-name="T6">&apos;MyComponent&apos;</text:span>, () =&gt; {</text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T3">it(</text:span><text:span text:style-name="T7">&apos;renders correctly with different props&apos;</text:span><text:span text:style-name="T3">, () =&gt; {</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="4"/><text:span text:style-name="T3">expect(getRenderedText(MyComponent, {</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="6"/><text:span text:style-name="T3">msg: </text:span><text:span text:style-name="T7">&apos;Hello&apos;</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="4"/><text:span text:style-name="T3">})).toBe(</text:span><text:span text:style-name="T7">&apos;Hello&apos;</text:span><text:span text:style-name="T3">)</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="4"/><text:span text:style-name="T3">expect(getRenderedText(MyComponent, {</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="6"/><text:span text:style-name="T3">msg: </text:span><text:span text:style-name="T7">&apos;Bye&apos;</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="4"/><text:span text:style-name="T3">})).toBe(</text:span><text:span text:style-name="T7">&apos;Bye&apos;</text:span><text:span text:style-name="T3">)</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T3">})</text:span></text:p>
      <text:p text:style-name="P15">})</text:p>
     </table:table-cell>
    </table:table-row>
   </table:table>
   <text:h text:style-name="P10" text:outline-level="2"><text:bookmark text:name="Asserting-Asynchronous-Updates"/><text:soft-page-break/>Asserting Asynchronous Updates</text:h>
   <text:p text:style-name="P3"><text:span text:style-name="T10">Since Vue </text:span><text:a xlink:type="simple" xlink:href="https://vuejs.org/v2/guide/reactivity.html#Async-Update-Queue" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="T16">performs DOM updates asynchronously</text:span></text:a><text:span text:style-name="T10">, assertions on DOM updates resulting from state change will have to be made in a </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">Vue.nextTick</text:span></text:span><text:span text:style-name="T10"> callback:</text:span></text:p>
   <table:table table:name="Table17" table:style-name="Table17">
    <table:table-column table:style-name="Table17.A"/>
    <table:table-row>
     <table:table-cell table:style-name="Table17.A1" office:value-type="string">
      <text:p text:style-name="P5">// Inspect the generated HTML after a state update</text:p>
      <text:p text:style-name="P15">it(<text:span text:style-name="T6">&apos;updates the rendered message when vm.message updates&apos;</text:span>, done =&gt; {</text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T2">const</text:span><text:span text:style-name="T3"> vm = </text:span><text:span text:style-name="T2">new</text:span><text:span text:style-name="T3"> Vue(MyComponent).$mount()</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T3">vm.message = </text:span><text:span text:style-name="T7">&apos;foo&apos;</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T9">// wait a &quot;tick&quot; after state change before asserting DOM updates</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T3">Vue.nextTick(() =&gt; {</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="4"/><text:span text:style-name="T3">expect(vm.$el.textContent).toBe(</text:span><text:span text:style-name="T7">&apos;foo&apos;</text:span><text:span text:style-name="T3">)</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="4"/><text:span text:style-name="T3">done()</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T3">})</text:span></text:p>
      <text:p text:style-name="P15">})</text:p>
     </table:table-cell>
    </table:table-row>
   </table:table>
   <text:p text:style-name="P1">We are planning to work on a collection of common test helpers that makes it even simpler to render components with different constraints (e.g. shallow rendering that ignores child components) and assert their output.</text:p>
   <text:h text:style-name="P20" text:outline-level="1">Reactivity in Depth</text:h>
   <text:p text:style-name="P1">We’ve covered most of the basics - now it’s time to take a deep dive! One of Vue’s most distinct features is the unobtrusive reactivity system. Models are just plain JavaScript objects. When you modify them, the view updates. It makes state management very simple and intuitive, but it’s also important to understand how it works to avoid some common gotchas. In this section, we are going to dig into some of the lower-level details of Vue’s reactivity system.</text:p>
   <text:h text:style-name="P10" text:outline-level="2"><text:bookmark text:name="How-Changes-Are-Tracked"/>How Changes Are Tracked</text:h>
   <text:p text:style-name="P3"><text:span text:style-name="T10">When you pass a plain JavaScript object to a Vue instance as its </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">data</text:span></text:span><text:span text:style-name="T10"> option, Vue will walk through all of its properties and convert them to getter/setters using </text:span><text:a xlink:type="simple" xlink:href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="T16">Object.defineProperty</text:span></text:a><text:span text:style-name="T10">. This is an ES5-only and un-shimmable feature, which is why Vue doesn’t support IE8 and below.</text:span></text:p>
   <text:p text:style-name="P3"><text:span text:style-name="T10">The getter/setters are invisible to the user, but under the hood they enable Vue to perform dependency-tracking and change-notification when properties are accessed or modified. One caveat is that browser consoles format getter/setters differently when converted data objects are logged, so you may want to install </text:span><text:a xlink:type="simple" xlink:href="https://github.com/vuejs/vue-devtools" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="T16">vue-devtools</text:span></text:a><text:span text:style-name="T10"> for a more inspection-friendly interface.</text:span></text:p>
   <text:p text:style-name="P3"><text:soft-page-break/><text:span text:style-name="T10">Every component instance has a corresponding </text:span><text:span text:style-name="Strong_20_Emphasis"><text:span text:style-name="T13">watcher</text:span></text:span><text:span text:style-name="T10"> instance, which records any properties “touched” during the component’s render as dependencies. Later on when a dependency’s setter is triggered, it notifies the watcher, which in turn causes the component to re-render.</text:span></text:p>
   <text:p text:style-name="P2"><draw:frame draw:style-name="fr2" draw:name="Image3" text:anchor-type="as-char" svg:width="19.442cm" svg:height="12.151cm" draw:z-index="2"><draw:image>
      <office:binary-data>iVBORw0KGgoAAAANSUhEUgAABLAAAALuCAMAAACJqx9AAAAC/VBMVEX////l8Pnb6vfJ3/K3
       1O7A2fD2+v7T5fWUv+VvqNyBs+GkyOnv9fx4rd6uz+yJuOKbw+f19vbV2t5eb380SV5aa33L
       0db7+/zs7vBygY9hcoLIztOPm6dTZHbEytBAVGg8UGW1vMT4+Pr29/jg5OeSnanBx86Vn6vR
       1tvw8fOqs7xoeIhWaHmnsLn9/v65wMd+i5h3hZOyusLn6uxufYyIlaHj5umeqbOapK/O09iG
       kp86TmHT19y3vsb19fivuMD/+uj/9tk3S19NYHLZ3eGDkJyNmaT/+/f/88//6KP/4ov/22//
       2Wb/4IL/5ZX/8cN6iJairLXy8/RldYW7wsn/7LLd4eS+xcv/3XlGWWz/3XhKXW9EV2vp7O7t
       7/E0SV3//v+tt73812X10WXRuGSelGF5emBOXF5AUl5JWF5ja1+Gg2HuzGWil2FzdmC+q2PK
       tGPfwmRobl+SjGHYvWOakWJYY1/FsGOBf2BeZ19ucmC3pmN9fGDlxmSqnGKyomKWjmGSveR0
       q93Y2Ni8vLyZmZnl5eWpy+qfxuji4uKfn5+Pu+Tf7Pjs7OzGxsaoqKjQ0NCYmJiysrLQ4/Tq
       8vu7xdzMzMzm5ubkeXntqKj54eHFxcXwsrLgZmbyvLz87Oz42NjmgoLqlpb0xcX99fXib2/g
       ZWXsn5/2z8/oi4vha2vpkJDm0I/y2Y3y7/jk3/Hq5vTGveGxpNWqnNKaisqOfMOjlM7VzumU
       g8a/td25rdrc1+3Oxubj9u1wyqFox5x6wKE1lGmJ0bGB0azP7eBCuYNaqofLw+Pt6vba8edr
       nYdqkX+ZyrNmZmaLi4tvb2+Cg4OVlpZ4eHiTer2jdqyaebXDbYbMa3ytdKDVaXK3cZTeaGqy
       c5uV1bn1/PmE0a6Azaqg3MFir41DnXXL5tqodaa8b47nh4fjdXX319f75uay38tquJRhvJLt
       o6P+/Pzvq6vxubnlfX31zMz87+/20tL429v64+Oz18bz9vVAmnHZ6+O55NDF49ZkxJgBZJy5
       AABQI0lEQVR4AezaV2KcQAwAUNERMODc/7DpPbG9fefjvTuoKyoBAAAAAAAAAAAAAAAAAAAA
       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
       TunJbaRXLAAAAABJRU5ErkJggg==
      </office:binary-data>
     </draw:image>
     <svg:title>Reactivity Cycle</svg:title>
    </draw:frame></text:p>
   <text:h text:style-name="P10" text:outline-level="2"><text:bookmark text:name="Change-Detection-Caveats"/>Change Detection Caveats</text:h>
   <text:p text:style-name="P3"><text:span text:style-name="T10">Due to the limitations of modern JavaScript (and the abandonment of </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">Object.observe</text:span></text:span><text:span text:style-name="T10">), Vue </text:span><text:span text:style-name="Strong_20_Emphasis"><text:span text:style-name="T13">cannot detect property addition or deletion</text:span></text:span><text:span text:style-name="T10">. Since Vue performs the getter/setter conversion process during instance initialization, a property must be present in the </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">data</text:span></text:span><text:span text:style-name="T10"> object in order for Vue to convert it and make it reactive. For example:</text:span></text:p>
   <table:table table:name="Table18" table:style-name="Table18">
    <table:table-column table:style-name="Table18.A"/>
    <table:table-row>
     <table:table-cell table:style-name="Table18.A1" office:value-type="string">
      <text:p text:style-name="P6"><text:span text:style-name="T1">var</text:span> vm = <text:span text:style-name="T1">new</text:span> Vue({</text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T3">data: {</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="4"/><text:span text:style-name="T3">a: </text:span><text:span text:style-name="T19">1</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T3">}</text:span></text:p>
      <text:p text:style-name="P15">})</text:p>
      <text:p text:style-name="P16">// `vm.a` is now reactive</text:p>
      <text:p text:style-name="P15">vm.b = <text:span text:style-name="T18">2</text:span></text:p>
      <text:p text:style-name="P16">// `vm.b` is NOT reactive</text:p>
     </table:table-cell>
    </table:table-row>
   </table:table>
   <text:p text:style-name="P3"><text:soft-page-break/><text:span text:style-name="T10">Vue does not allow dynamically adding new root-level reactive properties to an already created instance. However, it’s possible to add reactive properties to a nested object using the </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">Vue.set(object, key, value)</text:span></text:span><text:span text:style-name="T10"> method:</text:span></text:p>
   <table:table table:name="Table19" table:style-name="Table19">
    <table:table-column table:style-name="Table19.A"/>
    <table:table-row>
     <table:table-cell table:style-name="Table19.A1" office:value-type="string">
      <text:p text:style-name="P6">Vue.set(vm.someObject, <text:span text:style-name="T6">&apos;b&apos;</text:span>, <text:span text:style-name="T18">2</text:span>)</text:p>
     </table:table-cell>
    </table:table-row>
   </table:table>
   <text:p text:style-name="P3"><text:span text:style-name="T10">You can also use the </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">vm.$set</text:span></text:span><text:span text:style-name="T10"> instance method, which is just an alias to the global </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">Vue.set</text:span></text:span><text:span text:style-name="T10">:</text:span></text:p>
   <table:table table:name="Table20" table:style-name="Table20">
    <table:table-column table:style-name="Table20.A"/>
    <table:table-row>
     <table:table-cell table:style-name="Table20.A1" office:value-type="string">
      <text:p text:style-name="P6"><text:span text:style-name="T1">this</text:span>.$set(<text:span text:style-name="T1">this</text:span>.someObject, <text:span text:style-name="T6">&apos;b&apos;</text:span>, <text:span text:style-name="T18">2</text:span>)</text:p>
     </table:table-cell>
    </table:table-row>
   </table:table>
   <text:p text:style-name="P3"><text:span text:style-name="T10">Sometimes you may want to assign a number of properties to an existing object, for example using </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">Object.assign()</text:span></text:span><text:span text:style-name="T10"> or </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">_.extend()</text:span></text:span><text:span text:style-name="T10">. However, new properties added to the object will not trigger changes. In such cases, create a fresh object with properties from both the original object and the mixin object:</text:span></text:p>
   <table:table table:name="Table21" table:style-name="Table21">
    <table:table-column table:style-name="Table21.A"/>
    <table:table-row>
     <table:table-cell table:style-name="Table21.A1" office:value-type="string">
      <text:p text:style-name="P5">// instead of `Object.assign(this.someObject, { a: 1, b: 2 })`</text:p>
      <text:p text:style-name="P15"><text:span text:style-name="T1">this</text:span>.someObject = <text:span text:style-name="T6">Object</text:span>.assign({}, <text:span text:style-name="T1">this</text:span>.someObject, { a: <text:span text:style-name="T18">1</text:span>, b: <text:span text:style-name="T18">2</text:span> })</text:p>
     </table:table-cell>
    </table:table-row>
   </table:table>
   <text:p text:style-name="P3"><text:span text:style-name="T10">There are also a few array-related caveats, which were discussed earlier in the </text:span><text:a xlink:type="simple" xlink:href="https://vuejs.org/v2/guide/list.html#Caveats" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="T16">list rendering section</text:span></text:a><text:span text:style-name="T10">.</text:span></text:p>
   <text:h text:style-name="P10" text:outline-level="2"><text:bookmark text:name="Declaring-Reactive-Properties"/>Declaring Reactive Properties</text:h>
   <text:p text:style-name="P1">Since Vue doesn’t allow dynamically adding root-level reactive properties, you have to initialize Vue instances by declaring all root-level reactive data properties upfront, even just with an empty value:</text:p>
   <table:table table:name="Table22" table:style-name="Table22">
    <table:table-column table:style-name="Table22.A"/>
    <table:table-row>
     <table:table-cell table:style-name="Table22.A1" office:value-type="string">
      <text:p text:style-name="P6"><text:span text:style-name="T1">var</text:span> vm = <text:span text:style-name="T1">new</text:span> Vue({</text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T3">data: {</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="4"/><text:span text:style-name="T9">// declare message with an empty value</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="4"/><text:span text:style-name="T3">message: </text:span><text:span text:style-name="T7">&apos;&apos;</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T3">},</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T3">template: </text:span><text:span text:style-name="T7">&apos;&lt;div&gt;{{ message }}&lt;/div&gt;&apos;</text:span></text:p>
      <text:p text:style-name="P15">})</text:p>
      <text:p text:style-name="P16">// set `message` later</text:p>
      <text:p text:style-name="P15">vm.message = <text:span text:style-name="T6">&apos;Hello!&apos;</text:span></text:p>
     </table:table-cell>
    </table:table-row>
   </table:table>
   <text:p text:style-name="P3"><text:span text:style-name="T10">If you don’t declare </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">message</text:span></text:span><text:span text:style-name="T10"> in the data option, Vue will warn you that the render function is trying to access a property that doesn’t exist.</text:span></text:p>
   <text:p text:style-name="P3"><text:span text:style-name="T10">There are technical reasons behind this restriction - it eliminates a class of edge cases in the dependency tracking system, and also makes Vue instances play nicer with type checking systems. But there is also an important consideration in terms of code maintainability: the </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">data</text:span></text:span><text:span text:style-name="T10"> object is like the schema for your component’s state. Declaring all reactive properties upfront makes the </text:span><text:soft-page-break/><text:span text:style-name="T10">component code easier to understand when revisited later or read by another developer.</text:span></text:p>
   <text:h text:style-name="P10" text:outline-level="2"><text:bookmark text:name="Async-Update-Queue"/>Async Update Queue</text:h>
   <text:p text:style-name="P3"><text:span text:style-name="T10">In case you haven’t noticed yet, Vue performs DOM updates </text:span><text:span text:style-name="Strong_20_Emphasis"><text:span text:style-name="T13">asynchronously</text:span></text:span><text:span text:style-name="T10">. Whenever a data change is observed, it will open a queue and buffer all the data changes that happen in the same event loop. If the same watcher is triggered multiple times, it will be pushed into the queue only once. This buffered de-duplication is important in avoiding unnecessary calculations and DOM manipulations. Then, in the next event loop “tick”, Vue flushes the queue and performs the actual (already de-duped) work. Internally Vue tries native </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">Promise.then</text:span></text:span><text:span text:style-name="T10"> and </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">MutationObserver</text:span></text:span><text:span text:style-name="T10"> for the asynchronous queuing and falls back to </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">setTimeout(fn, 0)</text:span></text:span><text:span text:style-name="T10">.</text:span></text:p>
   <text:p text:style-name="P3"><text:span text:style-name="T10">For example, when you set </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">vm.someData = &apos;new value&apos;</text:span></text:span><text:span text:style-name="T10">, the component will not re-render immediately. It will update in the next “tick”, when the queue is flushed. Most of the time we don’t need to care about this, but it can be tricky when you want to do something that depends on the post-update DOM state. Although Vue.js generally encourages developers to think in a “data-driven” fashion and avoid touching the DOM directly, sometimes it might be necessary to get your hands dirty. In order to wait until Vue.js has finished updating the DOM after a data change, you can use </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">Vue.nextTick(callback)</text:span></text:span><text:span text:style-name="T10"> immediately after the data is changed. The callback will be called after the DOM has been updated. For example:</text:span></text:p>
   <table:table table:name="Table23" table:style-name="Table23">
    <table:table-column table:style-name="Table23.A"/>
    <table:table-row>
     <table:table-cell table:style-name="Table23.A1" office:value-type="string">
      <text:p text:style-name="P6"><text:span text:style-name="T20">&lt;div id=</text:span><text:span text:style-name="T6">&quot;example&quot;</text:span><text:span text:style-name="T20">&gt;</text:span>{{ message }}<text:span text:style-name="T20">&lt;/div&gt;</text:span></text:p>
     </table:table-cell>
    </table:table-row>
   </table:table>
   <table:table table:name="Table24" table:style-name="Table24">
    <table:table-column table:style-name="Table24.A"/>
    <table:table-row>
     <table:table-cell table:style-name="Table24.A1" office:value-type="string">
      <text:p text:style-name="P6"><text:span text:style-name="T1">var</text:span> vm = <text:span text:style-name="T1">new</text:span> Vue({</text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T3">el: </text:span><text:span text:style-name="T7">&apos;#example&apos;</text:span><text:span text:style-name="T3">,</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T3">data: {</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="4"/><text:span text:style-name="T3">message: </text:span><text:span text:style-name="T7">&apos;123&apos;</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T3">}</text:span></text:p>
      <text:p text:style-name="P15">})</text:p>
      <text:p text:style-name="P15">vm.message = <text:span text:style-name="T6">&apos;new message&apos;</text:span> <text:span text:style-name="T8">// change data</text:span></text:p>
      <text:p text:style-name="P15">vm.$el.textContent === <text:span text:style-name="T6">&apos;new message&apos;</text:span> <text:span text:style-name="T8">// false</text:span></text:p>
      <text:p text:style-name="P15">Vue.nextTick(<text:span text:style-name="T4">function</text:span> () {</text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T3">vm.$el.textContent === </text:span><text:span text:style-name="T7">&apos;new message&apos;</text:span><text:span text:style-name="T3"> </text:span><text:span text:style-name="T9">// true</text:span></text:p>
      <text:p text:style-name="P15">})</text:p>
     </table:table-cell>
    </table:table-row>
   </table:table>
   <text:p text:style-name="P3"><text:span text:style-name="T10">There is also the </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">vm.$nextTick()</text:span></text:span><text:span text:style-name="T10"> instance method, which is especially handy inside components, because it doesn’t need global </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">Vue</text:span></text:span><text:span text:style-name="T10"> and its callback’s </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T11">this</text:span></text:span><text:span text:style-name="T10"> context will be automatically bound to the current Vue instance:</text:span></text:p>
   <table:table table:name="Table25" table:style-name="Table25">
    <table:table-column table:style-name="Table25.A"/>
    <text:soft-page-break/>
    <table:table-row>
     <table:table-cell table:style-name="Table25.A1" office:value-type="string">
      <text:p text:style-name="P6">Vue.component(<text:span text:style-name="T6">&apos;example&apos;</text:span>, {</text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T3">template: </text:span><text:span text:style-name="T7">&apos;&lt;span&gt;{{ message }}&lt;/span&gt;&apos;</text:span><text:span text:style-name="T3">,</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T3">data: </text:span><text:span text:style-name="T5">function</text:span><text:span text:style-name="T3"> () {</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="4"/><text:span text:style-name="T2">return</text:span><text:span text:style-name="T3"> {</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="6"/><text:span text:style-name="T3">message: </text:span><text:span text:style-name="T7">&apos;not updated&apos;</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="4"/><text:span text:style-name="T3">}</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T3">},</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T3">methods: {</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="4"/><text:span text:style-name="T3">updateMessage: </text:span><text:span text:style-name="T5">function</text:span><text:span text:style-name="T3"> () {</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="6"/><text:span text:style-name="T2">this</text:span><text:span text:style-name="T3">.message = </text:span><text:span text:style-name="T7">&apos;updated&apos;</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="6"/><text:span text:style-name="T7">console</text:span><text:span text:style-name="T3">.log(</text:span><text:span text:style-name="T2">this</text:span><text:span text:style-name="T3">.$el.textContent) </text:span><text:span text:style-name="T9">// =&gt; &apos;not updated&apos;</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="6"/><text:span text:style-name="T2">this</text:span><text:span text:style-name="T3">.$nextTick(</text:span><text:span text:style-name="T5">function</text:span><text:span text:style-name="T3"> () {</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="8"/><text:span text:style-name="T7">console</text:span><text:span text:style-name="T3">.log(</text:span><text:span text:style-name="T2">this</text:span><text:span text:style-name="T3">.$el.textContent) </text:span><text:span text:style-name="T9">// =&gt; &apos;updated&apos;</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="6"/><text:span text:style-name="T3">})</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="4"/><text:span text:style-name="T3">}</text:span></text:p>
      <text:p text:style-name="P14"><text:s text:c="2"/><text:span text:style-name="T3">}</text:span></text:p>
      <text:p text:style-name="P15">})</text:p>
     </table:table-cell>
    </table:table-row>
   </table:table>
   <text:p text:style-name="P23"/>
   <text:p text:style-name="Title">Router</text:p>
   <text:h text:style-name="P21" text:outline-level="1"><text:bookmark text:name="getting-started"/>Getting Started</text:h>
   <text:p text:style-name="Quotations">We will be using <text:a xlink:type="simple" xlink:href="https://github.com/lukehoban/es6features" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">ES2015</text:a> in the code samples in the guide.</text:p>
   <text:p text:style-name="Text_20_body">Creating a Single-page Application with Vue.js + vue-router is dead simple. With Vue.js, we are already composing our application with components. When adding vue-router to the mix, all we need to do is map our components to the routes and let vue-router know where to render them. Here&apos;s a basic example:</text:p>
   <text:p text:style-name="Quotations">All examples will be using the standalone version of Vue to make template parsing possible. See more details <text:a xlink:type="simple" xlink:href="http://vuejs.org/guide/installation.html#Standalone-vs-Runtime-only-Build" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">here</text:a>.</text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3"><text:bookmark text:name="html"/>HTML</text:h>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">&lt;script src=&quot;https://unpkg.com/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">&lt;script src=&quot;https://unpkg.com/vue-router/dist/vue-router.js&quot;&gt;&lt;/script&gt;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">&lt;div id=&quot;app&quot;&gt;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>&lt;h1&gt;Hello App!&lt;/h1&gt;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>&lt;p&gt;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>&lt;!-- use router-link component for navigation. --&gt;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>&lt;!-- specify the link by passing the `to` prop. --&gt;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>&lt;!-- &lt;router-link&gt; will be rendered as an `&lt;a&gt;` tag by default --&gt;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>&lt;router-link to=&quot;/foo&quot;&gt;Go to Foo&lt;/router-link&gt;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>&lt;router-link to=&quot;/bar&quot;&gt;Go to Bar&lt;/router-link&gt;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>&lt;/p&gt;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>&lt;!-- route outlet --&gt;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>&lt;!-- component matched by the route will render here --&gt;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>&lt;router-view&gt;&lt;/router-view&gt;</text:span></text:p>
   <text:p text:style-name="P27"><text:soft-page-break/><text:span text:style-name="Source_20_Text">&lt;/div&gt;</text:span></text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3"><text:bookmark text:name="javascript"/>JavaScript</text:h>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">// 0. If using a module system (e.g. via vue-cli), import Vue and VueRouter and then call Vue.use(VueRouter).</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">// 1. Define route components.</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">// These can be imported from other files</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const Foo = { template: &apos;&lt;div&gt;foo&lt;/div&gt;&apos; }</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const Bar = { template: &apos;&lt;div&gt;bar&lt;/div&gt;&apos; }</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">// 2. Define some routes</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">// Each route should map to a component. The &quot;component&quot; can</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">// either be an actual component constructor created via</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">// Vue.extend(), or just a component options object.</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">// We&apos;ll talk about nested routes later.</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const routes = [</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>{ path: &apos;/foo&apos;, component: Foo },</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>{ path: &apos;/bar&apos;, component: Bar }</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">]</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">// 3. Create the router instance and pass the `routes` option</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">// You can pass in additional options here, but let&apos;s</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">// keep it simple for now.</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const router = new VueRouter({</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>routes // short for routes: routes</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">})</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">// 4. Create and mount the root instance.</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">// Make sure to inject the router with the router option to make the</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">// whole app router-aware.</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const app = new Vue({</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>router</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">}).$mount(&apos;#app&apos;)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">// Now the app has started!</text:span></text:p>
   <text:p text:style-name="Text_20_body">You can also checkout this example <text:a xlink:type="simple" xlink:href="http://jsfiddle.net/yyx990803/xgrjzsup/" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">live</text:a>.</text:p>
   <text:p text:style-name="Text_20_body">Notice that a <text:span text:style-name="Source_20_Text">&lt;router-link&gt;</text:span> automatically gets the <text:span text:style-name="Source_20_Text">.router-link-active</text:span> class when its target route is matched. You can learn more about it in its <text:a xlink:type="simple" xlink:href="https://router.vuejs.org/en/api/router-link.html" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">API reference</text:a>.</text:p>
   <text:p text:style-name="P24"/>
   <text:h text:style-name="P21" text:outline-level="1"><text:bookmark text:name="dynamic-route-matching"/>Dynamic Route Matching</text:h>
   <text:p text:style-name="Text_20_body">Very often we will need to map routes with the given pattern to the same component. For example we may have a <text:span text:style-name="Source_20_Text">User</text:span> component which should be rendered for all users but with different user IDs. In <text:span text:style-name="Source_20_Text">vue-router</text:span> we can use a dynamic segment in the path to achieve that:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const User = {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>template: &apos;&lt;div&gt;User&lt;/div&gt;&apos;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:soft-page-break/><text:span text:style-name="Source_20_Text">const router = new VueRouter({</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>routes: [</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>// dynamic segments start with a colon</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>{ path: &apos;/user/:id&apos;, component: User }</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>]</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">})</text:span></text:p>
   <text:p text:style-name="Text_20_body">Now URLs like <text:span text:style-name="Source_20_Text">/user/foo</text:span> and <text:span text:style-name="Source_20_Text">/user/bar</text:span> will both map to the same route.</text:p>
   <text:p text:style-name="Text_20_body">A dynamic segment is denoted by a colon <text:span text:style-name="Source_20_Text">:</text:span>. When a route is matched, the value of the dynamic segments will be exposed as <text:span text:style-name="Source_20_Text">this.$route.params</text:span> in every component. Therefore, we can render the current user ID by updating <text:span text:style-name="Source_20_Text">User</text:span>&apos;s template to this:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const User = {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>template: &apos;&lt;div&gt;User {{ $route.params.id }}&lt;/div&gt;&apos;</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:p text:style-name="Text_20_body">You can checkout a live example <text:a xlink:type="simple" xlink:href="http://jsfiddle.net/yyx990803/4xfa2f19/" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">here</text:a>.</text:p>
   <text:p text:style-name="Text_20_body">You can have multiple dynamic segments in the same route, and they will map to corresponding fields on <text:span text:style-name="Source_20_Text">$route.params</text:span>. Examples:</text:p>
   <table:table table:name="Table51" table:style-name="Table51">
    <table:table-column table:style-name="Table51.A"/>
    <table:table-column table:style-name="Table51.B"/>
    <table:table-column table:style-name="Table51.C"/>
    <table:table-header-rows>
     <table:table-row>
      <table:table-cell table:style-name="Table51.A1" office:value-type="string">
       <text:p text:style-name="Table_20_Heading">pattern</text:p>
      </table:table-cell>
      <table:table-cell table:style-name="Table51.A1" office:value-type="string">
       <text:p text:style-name="Table_20_Heading">matched path</text:p>
      </table:table-cell>
      <table:table-cell table:style-name="Table51.A1" office:value-type="string">
       <text:p text:style-name="Table_20_Heading">$route.params</text:p>
      </table:table-cell>
     </table:table-row>
    </table:table-header-rows>
    <table:table-row>
     <table:table-cell table:style-name="Table51.A1" office:value-type="string">
      <text:p text:style-name="Table_20_Contents">/user/:username</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="Table51.A1" office:value-type="string">
      <text:p text:style-name="Table_20_Contents">/user/evan</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="Table51.A1" office:value-type="string">
      <text:p text:style-name="Table_20_Contents"><text:span text:style-name="Source_20_Text">{ username: &apos;evan&apos; }</text:span></text:p>
     </table:table-cell>
    </table:table-row>
    <table:table-row>
     <table:table-cell table:style-name="Table51.A1" office:value-type="string">
      <text:p text:style-name="Table_20_Contents">/user/:username/post/:post_id</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="Table51.A1" office:value-type="string">
      <text:p text:style-name="Table_20_Contents">/user/evan/post/123</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="Table51.A1" office:value-type="string">
      <text:p text:style-name="Table_20_Contents"><text:span text:style-name="Source_20_Text">{ username: &apos;evan&apos;, post_id: 123 }</text:span></text:p>
     </table:table-cell>
    </table:table-row>
   </table:table>
   <text:p text:style-name="Text_20_body">In addition to <text:span text:style-name="Source_20_Text">$route.params</text:span>, the <text:span text:style-name="Source_20_Text">$route</text:span> object also exposes other useful information such as <text:span text:style-name="Source_20_Text">$route.query</text:span> (if there is a query in the URL), <text:span text:style-name="Source_20_Text">$route.hash</text:span>, etc. You can check out the full details in the <text:a xlink:type="simple" xlink:href="https://router.vuejs.org/en/api/route-object.html" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">API Reference</text:a>.</text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3"><text:bookmark text:name="reacting-to-params-changes"/>Reacting to Params Changes</text:h>
   <text:p text:style-name="Text_20_body">One thing to note when using routes with params is that when the user navigates from <text:span text:style-name="Source_20_Text">/user/foo</text:span> to <text:span text:style-name="Source_20_Text">/user/bar</text:span>, <text:span text:style-name="Strong_20_Emphasis">the same component instance will be reused</text:span>. Since both routes render the same component, this is more efficient than destroying the old instance and then creating a new one. <text:span text:style-name="Strong_20_Emphasis">However, this also means that the lifecycle hooks of the component will not be called</text:span>.</text:p>
   <text:p text:style-name="Text_20_body">To react to params changes in the same component, you can simply watch the <text:span text:style-name="Source_20_Text">$route</text:span> object:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const User = {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>template: &apos;...&apos;,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>watch: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>&apos;$route&apos; (to, from) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>// react to route changes...</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>}</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3"><text:bookmark text:name="advanced-matching-patterns"/>Advanced Matching Patterns</text:h>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="Source_20_Text">vue-router</text:span> uses <text:a xlink:type="simple" xlink:href="https://github.com/pillarjs/path-to-regexp" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">path-to-regexp</text:a> as its path matching engine, so it supports many advanced matching patterns such as optional dynamic segments, zero or more / one or more requirements, and <text:soft-page-break/>even custom regex patterns. Check out its <text:a xlink:type="simple" xlink:href="https://github.com/pillarjs/path-to-regexp#parameters" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">documentation</text:a> for these advanced patterns, and <text:a xlink:type="simple" xlink:href="https://github.com/vuejs/vue-router/blob/dev/examples/route-matching/app.js" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">this example</text:a> of using them in <text:span text:style-name="Source_20_Text">vue-router</text:span>.</text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3"><text:bookmark text:name="matching-priority"/>Matching Priority</text:h>
   <text:p text:style-name="Text_20_body">Sometimes the same URL may be matched by multiple routes. In such a case the matching priority is determined by the order of route definition: the earlier a route is defined, the higher priority it gets.</text:p>
   <text:h text:style-name="P21" text:outline-level="1"><text:bookmark text:name="nested-routes"/>Nested Routes</text:h>
   <text:p text:style-name="Text_20_body">Real app UIs are usually composed of components that are nested multiple levels deep. It is also very common that the segments of a URL corresponds to a certain structure of nested components, for example:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">/user/foo/profile <text:s text:c="20"/>/user/foo/posts</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">+------------------+ <text:s text:c="17"/>+-----------------+</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">| User <text:s text:c="12"/>| <text:s text:c="17"/>| User <text:s text:c="11"/>|</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">| +--------------+ | <text:s text:c="17"/>| +-------------+ |</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">| | Profile <text:s text:c="5"/>| | <text:s/>+------------&gt; <text:s/>| | Posts <text:s text:c="6"/>| |</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">| | <text:s text:c="13"/>| | <text:s text:c="17"/>| | <text:s text:c="12"/>| |</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">| +--------------+ | <text:s text:c="17"/>| +-------------+ |</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">+------------------+ <text:s text:c="17"/>+-----------------+</text:span></text:p>
   <text:p text:style-name="Text_20_body">With <text:span text:style-name="Source_20_Text">vue-router</text:span>, it is very simple to express this relationship using nested route configurations.</text:p>
   <text:p text:style-name="Text_20_body">Given the app we created in the last chapter:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">&lt;div id=&quot;app&quot;&gt;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>&lt;router-view&gt;&lt;/router-view&gt;</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">&lt;/div&gt;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const User = {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>template: &apos;&lt;div&gt;User {{ $route.params.id }}&lt;/div&gt;&apos;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const router = new VueRouter({</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>routes: [</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>{ path: &apos;/user/:id&apos;, component: User }</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>]</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">})</text:span></text:p>
   <text:p text:style-name="Text_20_body">The <text:span text:style-name="Source_20_Text">&lt;router-view&gt;</text:span> here is a top-level outlet. It renders the component matched by a top level route. Similarly, a rendered component can also contain its own, nested <text:span text:style-name="Source_20_Text">&lt;router-view&gt;</text:span>. For example, if we add one inside the <text:span text:style-name="Source_20_Text">User</text:span>component&apos;s template:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const User = {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>template: `</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>&lt;div class=&quot;user&quot;&gt;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>&lt;h2&gt;User {{ $route.params.id }}&lt;/h2&gt;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>&lt;router-view&gt;&lt;/router-view&gt;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>&lt;/div&gt;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>`</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:p text:style-name="Text_20_body"><text:soft-page-break/>To render components into this nested outlet, we need to use the <text:span text:style-name="Source_20_Text">children</text:span> option in <text:span text:style-name="Source_20_Text">VueRouter</text:span> constructor config:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const router = new VueRouter({</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>routes: [</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>{ path: &apos;/user/:id&apos;, component: User,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>children: [</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="8"/>{</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="10"/>// UserProfile will be rendered inside User&apos;s &lt;router-view&gt;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="10"/>// when /user/:id/profile is matched</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="10"/>path: &apos;profile&apos;,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="10"/>component: UserProfile</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="8"/>},</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="8"/>{</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="10"/>// UserPosts will be rendered inside User&apos;s &lt;router-view&gt;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="10"/>// when /user/:id/posts is matched</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="10"/>path: &apos;posts&apos;,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="10"/>component: UserPosts</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="8"/>}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>]</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>]</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">})</text:span></text:p>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="Strong_20_Emphasis">Note that nested paths that start with </text:span><text:span text:style-name="Strong_20_Emphasis"><text:span text:style-name="Source_20_Text">/</text:span></text:span><text:span text:style-name="Strong_20_Emphasis"> will be treated as a root path. This allows you to leverage the component nesting without having to use a nested URL.</text:span></text:p>
   <text:p text:style-name="Text_20_body">As you can see the <text:span text:style-name="Source_20_Text">children</text:span> option is just another Array of route configuration objects like <text:span text:style-name="Source_20_Text">routes</text:span> itself. Therefore, you can keep nesting views as much as you need.</text:p>
   <text:p text:style-name="Text_20_body">At this point, with the above configuration, when you visit <text:span text:style-name="Source_20_Text">/user/foo</text:span>, nothing will be rendered inside <text:span text:style-name="Source_20_Text">User</text:span>&apos;s outlet, because no sub route is matched. Maybe you do want to render something there. In such case you can provide an empty subroute path:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const router = new VueRouter({</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>routes: [</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>{</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>path: &apos;/user/:id&apos;, component: User,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>children: [</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="8"/>// UserHome will be rendered inside User&apos;s &lt;router-view&gt;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="8"/>// when /user/:id is matched</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="8"/>{ path: &apos;&apos;, component: UserHome },</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="8"/>// ...other sub routes</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>]</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>]</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">})</text:span></text:p>
   <text:p text:style-name="Text_20_body">A working demo of this example can be found <text:a xlink:type="simple" xlink:href="http://jsfiddle.net/yyx990803/L7hscd8h/" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">here</text:a>.</text:p>
   <text:h text:style-name="P21" text:outline-level="1"><text:bookmark text:name="programmatic-navigation"/><text:soft-page-break/>Programmatic Navigation</text:h>
   <text:p text:style-name="Text_20_body">Aside from using <text:span text:style-name="Source_20_Text">&lt;router-link&gt;</text:span> to create anchor tags for declarative navigation, we can do this programmatically using the router&apos;s instance methods.</text:p>
   <text:h text:style-name="Heading_20_4" text:outline-level="4"><text:bookmark text:name="routerpushlocation"/><text:span text:style-name="Source_20_Text">router.push(location)</text:span></text:h>
   <text:p text:style-name="Text_20_body">To navigate to a different URL, use <text:span text:style-name="Source_20_Text">router.push</text:span>. This method pushes a new entry into the history stack, so when the user clicks the browser back button they will be taken to the previous URL.</text:p>
   <text:p text:style-name="Text_20_body">This is the method called internally when you click a <text:span text:style-name="Source_20_Text">&lt;router-link&gt;</text:span>, so clicking <text:span text:style-name="Source_20_Text">&lt;router-link :to=&quot;...&quot;&gt;</text:span> is the equivalent of calling <text:span text:style-name="Source_20_Text">router.push(...)</text:span>.</text:p>
   <table:table table:name="Table52" table:style-name="Table52">
    <table:table-column table:style-name="Table52.A"/>
    <table:table-column table:style-name="Table52.B"/>
    <table:table-header-rows>
     <table:table-row>
      <table:table-cell table:style-name="Table52.A1" office:value-type="string">
       <text:p text:style-name="Table_20_Heading">Declarative</text:p>
      </table:table-cell>
      <table:table-cell table:style-name="Table52.A1" office:value-type="string">
       <text:p text:style-name="Table_20_Heading">Programmatic</text:p>
      </table:table-cell>
     </table:table-row>
    </table:table-header-rows>
    <table:table-row>
     <table:table-cell table:style-name="Table52.A1" office:value-type="string">
      <text:p text:style-name="Table_20_Contents"><text:span text:style-name="Source_20_Text">&lt;router-link :to=&quot;...&quot;&gt;</text:span></text:p>
     </table:table-cell>
     <table:table-cell table:style-name="Table52.A1" office:value-type="string">
      <text:p text:style-name="Table_20_Contents"><text:span text:style-name="Source_20_Text">router.push(...)</text:span></text:p>
     </table:table-cell>
    </table:table-row>
   </table:table>
   <text:p text:style-name="Text_20_body">The argument can be a string path, or a location descriptor object. Examples:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">// literal string</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">router.push(&apos;home&apos;)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">// object</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">router.push({ path: &apos;home&apos; })</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">// named route</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">router.push({ name: &apos;user&apos;, params: { userId: 123 }})</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">// with query, resulting in /register?plan=private</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">router.push({ path: &apos;register&apos;, query: { plan: &apos;private&apos; }})</text:span></text:p>
   <text:h text:style-name="Heading_20_4" text:outline-level="4"><text:bookmark text:name="routerreplacelocation"/><text:span text:style-name="Source_20_Text">router.replace(location)</text:span></text:h>
   <text:p text:style-name="Text_20_body">It acts like <text:span text:style-name="Source_20_Text">router.push</text:span>, the only difference is that it navigates without pushing a new history entry, as its name suggests - it replaces the current entry.</text:p>
   <table:table table:name="Table53" table:style-name="Table53">
    <table:table-column table:style-name="Table53.A"/>
    <table:table-column table:style-name="Table53.B"/>
    <table:table-header-rows>
     <table:table-row>
      <table:table-cell table:style-name="Table53.A1" office:value-type="string">
       <text:p text:style-name="Table_20_Heading">Declarative</text:p>
      </table:table-cell>
      <table:table-cell table:style-name="Table53.A1" office:value-type="string">
       <text:p text:style-name="Table_20_Heading">Programmatic</text:p>
      </table:table-cell>
     </table:table-row>
    </table:table-header-rows>
    <table:table-row>
     <table:table-cell table:style-name="Table53.A1" office:value-type="string">
      <text:p text:style-name="Table_20_Contents"><text:span text:style-name="Source_20_Text">&lt;router-link :to=&quot;...&quot; replace&gt;</text:span></text:p>
     </table:table-cell>
     <table:table-cell table:style-name="Table53.A1" office:value-type="string">
      <text:p text:style-name="Table_20_Contents"><text:span text:style-name="Source_20_Text">router.replace(...)</text:span></text:p>
     </table:table-cell>
    </table:table-row>
   </table:table>
   <text:h text:style-name="Heading_20_4" text:outline-level="4"><text:bookmark text:name="routergon"/><text:span text:style-name="Source_20_Text">router.go(n)</text:span></text:h>
   <text:p text:style-name="Text_20_body">This method takes a single integer as parameter that indicates by how many steps to go forwards or go backwards in the history stack, similar to <text:span text:style-name="Source_20_Text">window.history.go(n)</text:span>.</text:p>
   <text:p text:style-name="Text_20_body">Examples</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">// go forward by one record, the same as history.forward()</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">router.go(1)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">// go back by one record, the same as history.back()</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">router.go(-1)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">// go forward by 3 records</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">router.go(3)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">// fails silently if there aren&apos;t that many records.</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:soft-page-break/><text:span text:style-name="Source_20_Text">router.go(-100)</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">router.go(100)</text:span></text:p>
   <text:h text:style-name="Heading_20_4" text:outline-level="4"><text:bookmark text:name="history-manipulation"/>History Manipulation</text:h>
   <text:p text:style-name="Text_20_body">You may have noticed that <text:span text:style-name="Source_20_Text">router.push</text:span>, <text:span text:style-name="Source_20_Text">router.replace</text:span> and <text:span text:style-name="Source_20_Text">router.go</text:span> are counterparts of <text:a xlink:type="simple" xlink:href="https://developer.mozilla.org/en-US/docs/Web/API/History" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="Source_20_Text">window.history.pushState</text:span></text:a><text:a xlink:type="simple" xlink:href="https://developer.mozilla.org/en-US/docs/Web/API/History" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">, </text:a><text:a xlink:type="simple" xlink:href="https://developer.mozilla.org/en-US/docs/Web/API/History" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="Source_20_Text">window.history.replaceState</text:span></text:a><text:a xlink:type="simple" xlink:href="https://developer.mozilla.org/en-US/docs/Web/API/History" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"> and </text:a><text:a xlink:type="simple" xlink:href="https://developer.mozilla.org/en-US/docs/Web/API/History" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="Source_20_Text">window.history.go</text:span></text:a>, and they do imitate the <text:span text:style-name="Source_20_Text">window.history</text:span> APIs.</text:p>
   <text:p text:style-name="Text_20_body">Therefore, if you are already familiar with <text:a xlink:type="simple" xlink:href="https://developer.mozilla.org/en-US/docs/Web/API/History_API" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">Browser History APIs</text:a>, manipulating history will be super easy with vue-router.</text:p>
   <text:p text:style-name="Text_20_body">It is worth mentioning that vue-router navigation methods (<text:span text:style-name="Source_20_Text">push</text:span>, <text:span text:style-name="Source_20_Text">replace</text:span>, <text:span text:style-name="Source_20_Text">go</text:span>) work consistently in all router modes (<text:span text:style-name="Source_20_Text">history</text:span>, <text:span text:style-name="Source_20_Text">hash</text:span> and <text:span text:style-name="Source_20_Text">abstract</text:span>).</text:p>
   <text:h text:style-name="P21" text:outline-level="1"><text:bookmark text:name="named-routes"/>Named Routes</text:h>
   <text:p text:style-name="Text_20_body">Sometimes it is more convenient to identify a route with a name, especially when linking to a route or performing navigations. You can give a route a name in the <text:span text:style-name="Source_20_Text">routes</text:span> options while creating the Router instance:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const router = new VueRouter({</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>routes: [</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>{</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>path: &apos;/user/:userId&apos;,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>name: &apos;user&apos;,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>component: User</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>]</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">})</text:span></text:p>
   <text:p text:style-name="Text_20_body">To link to a named route, you can pass an object to the <text:span text:style-name="Source_20_Text">router-link</text:span> component&apos;s <text:span text:style-name="Source_20_Text">to</text:span> prop:</text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">&lt;router-link :to=&quot;{ name: &apos;user&apos;, params: { userId: 123 }}&quot;&gt;User&lt;/router-link&gt;</text:span></text:p>
   <text:p text:style-name="Text_20_body">This is the exact same object used programatically with <text:span text:style-name="Source_20_Text">router.push()</text:span>:</text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">router.push({ name: &apos;user&apos;, params: { userId: 123 }})</text:span></text:p>
   <text:p text:style-name="Text_20_body">In both cases, the router will navigate to the path <text:span text:style-name="Source_20_Text">/user/123</text:span>.</text:p>
   <text:p text:style-name="Text_20_body">Full example <text:a xlink:type="simple" xlink:href="https://github.com/vuejs/vue-router/blob/dev/examples/named-routes/app.js" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">here</text:a>.</text:p>
   <text:h text:style-name="P21" text:outline-level="1"><text:bookmark text:name="named-views"/>Named Views</text:h>
   <text:p text:style-name="Text_20_body">Sometimes you need to display multiples views at the same time instead of nesting them, e.g. creating a layout with a <text:span text:style-name="Source_20_Text">sidebar</text:span> view and a <text:span text:style-name="Source_20_Text">main</text:span> view. This is where named views came in handy. Instead of having one single outlet in your view, you can have multiple and give each of them a name. A <text:span text:style-name="Source_20_Text">router-view</text:span> without a name will be given <text:span text:style-name="Source_20_Text">default</text:span> as its name.</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">&lt;router-view class=&quot;view one&quot;&gt;&lt;/router-view&gt;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:soft-page-break/><text:span text:style-name="Source_20_Text">&lt;router-view class=&quot;view two&quot; name=&quot;a&quot;&gt;&lt;/router-view&gt;</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">&lt;router-view class=&quot;view three&quot; name=&quot;b&quot;&gt;&lt;/router-view&gt;</text:span></text:p>
   <text:p text:style-name="Text_20_body">A view is rendered by using a component, therefore multiple views require multiple components for the same route. Make sure to use the <text:span text:style-name="Source_20_Text">components</text:span> (with an s) option:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const router = new VueRouter({</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>routes: [</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>{</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>path: &apos;/&apos;,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>components: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="8"/>default: Foo,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="8"/>a: Bar,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="8"/>b: Baz</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>]</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">})</text:span></text:p>
   <text:p text:style-name="Text_20_body">A working demo of this example can be found <text:a xlink:type="simple" xlink:href="https://jsfiddle.net/posva/6du90epg/" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">here</text:a>.</text:p>
   <text:h text:style-name="P21" text:outline-level="1"><text:bookmark text:name="redirect-and-alias"/>Redirect and Alias</text:h>
   <text:h text:style-name="Heading_20_3" text:outline-level="3"><text:bookmark text:name="redirect"/>Redirect</text:h>
   <text:p text:style-name="Text_20_body">Redirecting is also done in the <text:span text:style-name="Source_20_Text">routes</text:span> configuration. To redirect from <text:span text:style-name="Source_20_Text">/a</text:span> to <text:span text:style-name="Source_20_Text">/b</text:span>:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const router = new VueRouter({</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>routes: [</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>{ path: &apos;/a&apos;, redirect: &apos;/b&apos; }</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>]</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">})</text:span></text:p>
   <text:p text:style-name="Text_20_body">The redirect can also be targeting a named route:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const router = new VueRouter({</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>routes: [</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>{ path: &apos;/a&apos;, redirect: { name: &apos;foo&apos; }}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>]</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">})</text:span></text:p>
   <text:p text:style-name="Text_20_body">Or even use a function for dynamic redirecting:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const router = new VueRouter({</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>routes: [</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>{ path: &apos;/a&apos;, redirect: to =&gt; {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>// the function receives the target route as the argument</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>// return redirect path/location here.</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>}}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>]</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">})</text:span></text:p>
   <text:p text:style-name="Text_20_body">For other advanced usage, checkout the <text:a xlink:type="simple" xlink:href="https://github.com/vuejs/vue-router/blob/dev/examples/redirect/app.js" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">example</text:a>.</text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3"><text:bookmark text:name="alias"/><text:soft-page-break/>Alias</text:h>
   <text:p text:style-name="Text_20_body">A redirect means when the user visits <text:span text:style-name="Source_20_Text">/a</text:span>, and URL will be replaced by <text:span text:style-name="Source_20_Text">/b</text:span>, and then matched as <text:span text:style-name="Source_20_Text">/b</text:span>. But what is an alias?</text:p>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="Strong_20_Emphasis">An alias of </text:span><text:span text:style-name="Strong_20_Emphasis"><text:span text:style-name="Source_20_Text">/a</text:span></text:span><text:span text:style-name="Strong_20_Emphasis"> as </text:span><text:span text:style-name="Strong_20_Emphasis"><text:span text:style-name="Source_20_Text">/b</text:span></text:span><text:span text:style-name="Strong_20_Emphasis"> means when the user visits </text:span><text:span text:style-name="Strong_20_Emphasis"><text:span text:style-name="Source_20_Text">/b</text:span></text:span><text:span text:style-name="Strong_20_Emphasis">, the URL remains </text:span><text:span text:style-name="Strong_20_Emphasis"><text:span text:style-name="Source_20_Text">/b</text:span></text:span><text:span text:style-name="Strong_20_Emphasis">, but it will be matched as if the user is visiting </text:span><text:span text:style-name="Strong_20_Emphasis"><text:span text:style-name="Source_20_Text">/a</text:span></text:span><text:span text:style-name="Strong_20_Emphasis">.</text:span></text:p>
   <text:p text:style-name="Text_20_body">The above can be expressed in the route configuration as:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const router = new VueRouter({</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>routes: [</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>{ path: &apos;/a&apos;, component: A, alias: &apos;/b&apos; }</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>]</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">})</text:span></text:p>
   <text:p text:style-name="Text_20_body">An alias gives you the freedom to map a UI structure to an arbitrary URL, instead of being constrained by the configuration&apos;s nesting structure.</text:p>
   <text:p text:style-name="Text_20_body">For advanced usage, checkout the <text:a xlink:type="simple" xlink:href="https://github.com/vuejs/vue-router/blob/dev/examples/route-alias/app.js" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">example</text:a>.</text:p>
   <text:h text:style-name="P21" text:outline-level="1"><text:bookmark text:name="passing-props-to-route-components"/>Passing Props to Route Components</text:h>
   <text:p text:style-name="Text_20_body">Using <text:span text:style-name="Source_20_Text">$route</text:span> in your component creates a tight coupling with the route which limits the flexibility of the component as it can only be used on certain urls.</text:p>
   <text:p text:style-name="Text_20_body">To decouple this component from the router use props:</text:p>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="Strong_20_Emphasis">❌ Coupled to $route</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const User = {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>template: &apos;&lt;div&gt;User {{ $route.params.id }}&lt;/div&gt;&apos;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const router = new VueRouter({</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>routes: [</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>{ path: &apos;/user/:id&apos;, component: User }</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>]</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">})</text:span></text:p>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="Strong_20_Emphasis">? Decoupled with props</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const User = {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>props: [&apos;id&apos;],</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>template: &apos;&lt;div&gt;User {{ id }}&lt;/div&gt;&apos;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const router = new VueRouter({</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>routes: [</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>{ path: &apos;/user/:id&apos;, component: User, props: true }</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>]</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">})</text:span></text:p>
   <text:p text:style-name="Text_20_body">This allows you to use the component anywhere, which makes the component easier to reuse and test.</text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3"><text:bookmark text:name="boolean-mode"/>Boolean mode</text:h>
   <text:p text:style-name="Text_20_body">When props is set to true, the route.params will be set as the component props.</text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3"><text:bookmark text:name="object-mode"/><text:soft-page-break/>Object mode</text:h>
   <text:p text:style-name="Text_20_body">When props is an object, this will be set as the component props as-is. Useful for when the props are static.</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const router = new VueRouter({</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>routes: [</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>{ path: &apos;/promotion/from-newsletter&apos;, component: Promotion, props: { newsletterPopup: false } }</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>]</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">})</text:span></text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3"><text:bookmark text:name="function-mode"/>Function mode</text:h>
   <text:p text:style-name="Text_20_body">You can create a function that returns props. This allows you to to cast the parameter to another type, combine static values with route-based values, etc.</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const router = new VueRouter({</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>routes: [</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>{ path: &apos;/search&apos;, component: SearchUser, props: (route) =&gt; ({ query: route.query.q }) }</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>]</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">})</text:span></text:p>
   <text:p text:style-name="Text_20_body">The url: <text:span text:style-name="Source_20_Text">/search?q=vue</text:span> would pass <text:span text:style-name="Source_20_Text">{query: &quot;vue&quot;}</text:span> as props to the SearchUser component.</text:p>
   <text:p text:style-name="Text_20_body">Try to keep the props function stateless, as it&apos;s only evaluated on route changes. Use a wrapper component if you need state to define the props, that way vue can react to state changes.</text:p>
   <text:p text:style-name="Text_20_body">For advanced usage, checkout the <text:a xlink:type="simple" xlink:href="https://github.com/vuejs/vue-router/blob/dev/examples/route-props/app.js" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">example</text:a>.</text:p>
   <text:h text:style-name="P21" text:outline-level="1"><text:bookmark text:name="html5-history-mode"/>HTML5 History Mode</text:h>
   <text:p text:style-name="Text_20_body">The default mode for <text:span text:style-name="Source_20_Text">vue-router</text:span> is <text:span text:style-name="Emphasis">hash mode</text:span> - it uses the URL hash to simulate a full URL so that the page won&apos;t be reloaded when the URL changes.</text:p>
   <text:p text:style-name="Text_20_body">To get rid of the hash, we can use the router&apos;s <text:span text:style-name="Strong_20_Emphasis">history mode</text:span>, which leverages the <text:span text:style-name="Source_20_Text">history.pushState</text:span> API to achieve URL navigation without a page reload:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const router = new VueRouter({</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>mode: &apos;history&apos;,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>routes: [...]</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">})</text:span></text:p>
   <text:p text:style-name="Text_20_body">When using history mode, the URL will look &quot;normal,&quot; e.g. <text:span text:style-name="Source_20_Text">http://oursite.com/user/id</text:span>. Beautiful!</text:p>
   <text:p text:style-name="Text_20_body">Here comes a problem, though: Since our app is a single page client side app, without a proper server configuration, the users will get a 404 error if they access <text:span text:style-name="Source_20_Text">http://oursite.com/user/id</text:span> directly in their browser. Now that&apos;s ugly.</text:p>
   <text:p text:style-name="Text_20_body">Not to worry: To fix the issue, all you need to do is add a simple catch-all fallback route to your server. If the URL doesn&apos;t match any static assets, it should serve the same <text:span text:style-name="Source_20_Text">index.html</text:span> page that your app lives in. Beautiful, again!</text:p>
   <text:h text:style-name="Heading_20_2" text:outline-level="2"><text:bookmark text:name="example-server-configurations"/><text:soft-page-break/>Example Server Configurations</text:h>
   <text:h text:style-name="Heading_20_4" text:outline-level="4"><text:bookmark text:name="apache"/>Apache</text:h>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">&lt;IfModule mod_rewrite.c&gt;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>RewriteEngine On</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>RewriteBase /</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>RewriteRule ^index\.html$ - [L]</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>RewriteCond %{REQUEST_FILENAME} !-f</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>RewriteCond %{REQUEST_FILENAME} !-d</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>RewriteRule . /index.html [L]</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">&lt;/IfModule&gt;</text:span></text:p>
   <text:h text:style-name="Heading_20_4" text:outline-level="4"><text:bookmark text:name="nginx"/>nginx</text:h>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">location / {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>try_files $uri $uri/ /index.html;</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:h text:style-name="Heading_20_4" text:outline-level="4"><text:bookmark text:name="nodejs-express"/>Node.js (Express)</text:h>
   <text:p text:style-name="Text_20_body">For Node.js/Express, consider using <text:a xlink:type="simple" xlink:href="https://github.com/bripkens/connect-history-api-fallback" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">connect-history-api-fallback middleware</text:a>.</text:p>
   <text:h text:style-name="Heading_20_2" text:outline-level="2"><text:bookmark text:name="caveat"/>Caveat</text:h>
   <text:p text:style-name="Text_20_body">There is a caveat to this: Your server will no longer report 404 errors as all not-found paths now serve up your <text:span text:style-name="Source_20_Text">index.html</text:span> file. To get around the issue, you should implement a catch-all route within your Vue app to show a 404 page:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const router = new VueRouter({</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>mode: &apos;history&apos;,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>routes: [</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>{ path: &apos;*&apos;, component: NotFoundComponent }</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>]</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">})</text:span></text:p>
   <text:p text:style-name="Text_20_body">Alternatively, if you are using a Node.js server, you can implement the fallback by using the router on the server side to match the incoming URL and respond with 404 if no route is matched.</text:p>
   <text:h text:style-name="P21" text:outline-level="1"><text:bookmark text:name="navigation-guards"/>Navigation Guards</text:h>
   <text:p text:style-name="Text_20_body">As the name suggests, the navigation guards provided by <text:span text:style-name="Source_20_Text">vue-router</text:span> are primarily used to guard navigations either by redirecting it or canceling it. There are a number of ways to hook into the route navigation process: globally, per-route, or in-component.</text:p>
   <text:p text:style-name="Text_20_body">Remember <text:span text:style-name="Strong_20_Emphasis">Params or queries changes won&apos;t trigger navigation guards</text:span>. Simply <text:a xlink:type="simple" xlink:href="https://router.vuejs.org/en/essentials/dynamic-matching.html#reacting-to-params-changes" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">watch the </text:a><text:a xlink:type="simple" xlink:href="https://router.vuejs.org/en/essentials/dynamic-matching.html#reacting-to-params-changes" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="Source_20_Text">$route</text:span></text:a><text:a xlink:type="simple" xlink:href="https://router.vuejs.org/en/essentials/dynamic-matching.html#reacting-to-params-changes" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"> object</text:a> to react to those changes.</text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3"><text:bookmark text:name="global-guards"/>Global Guards</text:h>
   <text:p text:style-name="Text_20_body">You can register global before guards using <text:span text:style-name="Source_20_Text">router.beforeEach</text:span>:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const router = new VueRouter({ ... })</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:soft-page-break/><text:span text:style-name="Source_20_Text">router.beforeEach((to, from, next) =&gt; {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>// ...</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">})</text:span></text:p>
   <text:p text:style-name="Text_20_body">Global before guards are called in creation order, whenever a navigation is triggered. Guards may be resolved asynchronously, and the navigation is considered <text:span text:style-name="Strong_20_Emphasis">pending</text:span> before all hooks have been resolved.</text:p>
   <text:p text:style-name="Text_20_body">Every guard function receives three arguments:</text:p>
   <text:list xml:id="list7338519096743986130" text:style-name="L6">
    <text:list-item>
     <text:p text:style-name="P30"><text:span text:style-name="Strong_20_Emphasis"><text:span text:style-name="Source_20_Text">to: Route</text:span></text:span>: the target <text:a xlink:type="simple" xlink:href="https://router.vuejs.org/en/api/route-object.html" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">Route Object</text:a> being navigated to.</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P30"><text:span text:style-name="Strong_20_Emphasis"><text:span text:style-name="Source_20_Text">from: Route</text:span></text:span>: the current route being navigated away from.</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P30"><text:span text:style-name="Strong_20_Emphasis"><text:span text:style-name="Source_20_Text">next: Function</text:span></text:span>: this function must be called to <text:span text:style-name="Strong_20_Emphasis">resolve</text:span> the hook. The action depends on the arguments provided to <text:span text:style-name="Source_20_Text">next</text:span>:</text:p>
     <text:list>
      <text:list-item>
       <text:p text:style-name="P30"><text:span text:style-name="Strong_20_Emphasis"><text:span text:style-name="Source_20_Text">next()</text:span></text:span>: move on to the next hook in the pipeline. If no hooks are left, the navigation is <text:span text:style-name="Strong_20_Emphasis">confirmed</text:span>.</text:p>
      </text:list-item>
      <text:list-item>
       <text:p text:style-name="P30"><text:span text:style-name="Strong_20_Emphasis"><text:span text:style-name="Source_20_Text">next(false)</text:span></text:span>: abort the current navigation. If the browser URL was changed (either manually by the user or via back button), it will be reset to that of the <text:span text:style-name="Source_20_Text">from</text:span> route.</text:p>
      </text:list-item>
      <text:list-item>
       <text:p text:style-name="P30"><text:span text:style-name="Strong_20_Emphasis"><text:span text:style-name="Source_20_Text">next(&apos;/&apos;)</text:span></text:span><text:span text:style-name="Strong_20_Emphasis"> or </text:span><text:span text:style-name="Strong_20_Emphasis"><text:span text:style-name="Source_20_Text">next({ path: &apos;/&apos; })</text:span></text:span>: redirect to a different location. The current navigation will be aborted and a new one will be started.</text:p>
      </text:list-item>
     </text:list>
    </text:list-item>
   </text:list>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="Strong_20_Emphasis">Make sure to always call the </text:span><text:span text:style-name="Strong_20_Emphasis"><text:span text:style-name="Source_20_Text">next</text:span></text:span><text:span text:style-name="Strong_20_Emphasis"> function, otherwise the hook will never be resolved.</text:span></text:p>
   <text:p text:style-name="Text_20_body">You can also register global after hooks, however unlike guards, these hooks do not get a <text:span text:style-name="Source_20_Text">next</text:span> function and cannot affect the navigation:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">router.afterEach((to, from) =&gt; {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>// ...</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">})</text:span></text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3"><text:bookmark text:name="per-route-guard"/>Per-Route Guard</text:h>
   <text:p text:style-name="Text_20_body">You can define <text:span text:style-name="Source_20_Text">beforeEnter</text:span> guards directly on a route&apos;s configuration object:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const router = new VueRouter({</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>routes: [</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>{</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>path: &apos;/foo&apos;,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>component: Foo,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>beforeEnter: (to, from, next) =&gt; {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="8"/>// ...</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>]</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">})</text:span></text:p>
   <text:p text:style-name="Text_20_body">These guards have the exact same signature as global before guards.</text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3"><text:bookmark text:name="in-component-guards"/><text:soft-page-break/>In-Component Guards</text:h>
   <text:p text:style-name="Text_20_body">Finally, you can directly define route navigation guards inside route components (the ones passed to the router configuration) with the following options:</text:p>
   <text:list xml:id="list7415570615045849232" text:style-name="L7">
    <text:list-item>
     <text:p text:style-name="P46"><text:span text:style-name="Source_20_Text">beforeRouteEnter</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P46"><text:span text:style-name="Source_20_Text">beforeRouteUpdate</text:span> (added in 2.2)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P31"><text:span text:style-name="Source_20_Text">beforeRouteLeave</text:span></text:p>
    </text:list-item>
   </text:list>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const Foo = {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>template: `...`,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>beforeRouteEnter (to, from, next) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>// called before the route that renders this component is confirmed.</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>// does NOT have access to `this` component instance,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>// because it has not been created yet when this guard is called!</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>},</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>beforeRouteUpdate (to, from, next) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>// called when the route that renders this component has changed,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>// but this component is reused in the new route.</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>// For example, for a route with dynamic params /foo/:id, when we</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>// navigate between /foo/1 and /foo/2, the same Foo component instance</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>// will be reused, and this hook will be called when that happens.</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>// has access to `this` component instance.</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>},</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>beforeRouteLeave (to, from, next) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>// called when the route that renders this component is about to</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>// be navigated away from.</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>// has access to `this` component instance.</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>}</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:p text:style-name="Text_20_body">The <text:span text:style-name="Source_20_Text">beforeRouteEnter</text:span> guard does <text:span text:style-name="Strong_20_Emphasis">NOT</text:span> have access to <text:span text:style-name="Source_20_Text">this</text:span>, because the guard is called before the navigation is confirmed, thus the new entering component has not even been created yet.</text:p>
   <text:p text:style-name="Text_20_body">However, you can access the instance by passing a callback to <text:span text:style-name="Source_20_Text">next</text:span>. The callback will be called when the navigation is confirmed, and the component instance will be passed to the callback as the argument:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">beforeRouteEnter (to, from, next) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>next(vm =&gt; {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>// access to component instance via `vm`</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>})</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:p text:style-name="Text_20_body">You can directly access <text:span text:style-name="Source_20_Text">this</text:span> inside <text:span text:style-name="Source_20_Text">beforeRouteLeave</text:span>. The leave guard is usually used to prevent the user from accidentally leaving the route with unsaved edits. The navigation can be canceled by calling <text:span text:style-name="Source_20_Text">next(false)</text:span>.</text:p>
   <text:h text:style-name="P21" text:outline-level="1"><text:bookmark text:name="route-meta-fields"/>Route Meta Fields</text:h>
   <text:p text:style-name="Text_20_body">You can include a <text:span text:style-name="Source_20_Text">meta</text:span> field when defining a route:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const router = new VueRouter({</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>routes: [</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>{</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:soft-page-break/><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>path: &apos;/foo&apos;,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>component: Foo,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>children: [</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="8"/>{</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="10"/>path: &apos;bar&apos;,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="10"/>component: Bar,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="10"/>// a meta field</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="10"/>meta: { requiresAuth: true }</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="8"/>}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>]</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>]</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">})</text:span></text:p>
   <text:p text:style-name="Text_20_body">So how do we access this <text:span text:style-name="Source_20_Text">meta</text:span> field?</text:p>
   <text:p text:style-name="Text_20_body">First, each route object in the <text:span text:style-name="Source_20_Text">routes</text:span> configuration is called a <text:span text:style-name="Strong_20_Emphasis">route record</text:span>. Route records may be nested. Therefore when a route is matched, it can potentially match more than one route record.</text:p>
   <text:p text:style-name="Text_20_body">For example, with the above route config, the URL <text:span text:style-name="Source_20_Text">/foo/bar</text:span> will match both the parent route record and the child route record.</text:p>
   <text:p text:style-name="Text_20_body">All route records matched by a route are exposed on the <text:span text:style-name="Source_20_Text">$route</text:span> object (and also route objects in navigation guards) as the <text:span text:style-name="Source_20_Text">$route.matched</text:span> Array. Therefore, we will need to iterate over <text:span text:style-name="Source_20_Text">$route.matched</text:span> to check for meta fields in route records.</text:p>
   <text:p text:style-name="Text_20_body">An example use case is checking for a meta field in the global navigation guard:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">router.beforeEach((to, from, next) =&gt; {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>if (to.matched.some(record =&gt; record.meta.requiresAuth)) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>// this route requires auth, check if logged in</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>// if not, redirect to login page.</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>if (!auth.loggedIn()) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>next({</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="8"/>path: &apos;/login&apos;,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="8"/>query: { redirect: to.fullPath }</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>})</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>} else {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>next()</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>} else {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>next() // make sure to always call next()!</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>}</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">})</text:span></text:p>
   <text:h text:style-name="P21" text:outline-level="1"><text:bookmark text:name="data-fetching"/>Data Fetching</text:h>
   <text:p text:style-name="Text_20_body">Sometimes you need to fetch data from the server when a route is activated. For example, before rendering a user profile, you need to fetch the user&apos;s data from the server. We can achieve this in two different ways:</text:p>
   <text:list xml:id="list4868784914341764810" text:style-name="L8">
    <text:list-item>
     <text:p text:style-name="P32"><text:span text:style-name="Strong_20_Emphasis">Fetching After Navigation</text:span>: perform the navigation first, and fetch data in the incoming component&apos;s lifecycle hook. Display a loading state while data is being fetched.</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P32"><text:soft-page-break/><text:span text:style-name="Strong_20_Emphasis">Fetching Before Navigation</text:span>: Fetch data before navigation in the route enter guard, and perform the navigation after data has been fetched.</text:p>
    </text:list-item>
   </text:list>
   <text:p text:style-name="Text_20_body">Technically, both are valid choices - it ultimately depends on the user experience you are aiming for.</text:p>
   <text:h text:style-name="Heading_20_2" text:outline-level="2"><text:bookmark text:name="fetching-after-navigation"/>Fetching After Navigation</text:h>
   <text:p text:style-name="Text_20_body">When using this approach, we navigate and render the incoming component immediately, and fetch data in the component&apos;s <text:span text:style-name="Source_20_Text">created</text:span> hook. It gives us the opportunity to display a loading state while the data is being fetched over the network, and we can also handle loading differently for each view.</text:p>
   <text:p text:style-name="Text_20_body">Let&apos;s assume we have a <text:span text:style-name="Source_20_Text">Post</text:span> component that needs to fetch the data for a post based on <text:span text:style-name="Source_20_Text">$route.params.id</text:span>:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">&lt;template&gt;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>&lt;div class=&quot;post&quot;&gt;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>&lt;div class=&quot;loading&quot; v-if=&quot;loading&quot;&gt;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>Loading...</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>&lt;/div&gt;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>&lt;div v-if=&quot;error&quot; class=&quot;error&quot;&gt;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>{{ error }}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>&lt;/div&gt;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>&lt;div v-if=&quot;post&quot; class=&quot;content&quot;&gt;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>&lt;h2&gt;{{ post.title }}&lt;/h2&gt;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>&lt;p&gt;{{ post.body }}&lt;/p&gt;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>&lt;/div&gt;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>&lt;/div&gt;</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">&lt;/template&gt;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">export default {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>data () {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>return {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>loading: false,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>post: null,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>error: null</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>},</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>created () {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>// fetch the data when the view is created and the data is</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>// already being observed</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>this.fetchData()</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>},</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>watch: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>// call again the method if the route changes</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>&apos;$route&apos;: &apos;fetchData&apos;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>},</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>methods: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>fetchData () {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>this.error = this.post = null</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>this.loading = true</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>// replace getPost with your data fetching util / API wrapper</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>getPost(this.$route.params.id, (err, post) =&gt; {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="8"/>this.loading = false</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="8"/>if (err) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:soft-page-break/><text:span text:style-name="Source_20_Text"><text:s text:c="10"/>this.error = err.toString()</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="8"/>} else {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="10"/>this.post = post</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="8"/>}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>})</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>}</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:h text:style-name="Heading_20_2" text:outline-level="2"><text:bookmark text:name="fetching-before-navigation"/>Fetching Before Navigation</text:h>
   <text:p text:style-name="Text_20_body">With this approach we fetch the data before actually navigating to the new route. We can perform the data fetching in the <text:span text:style-name="Source_20_Text">beforeRouteEnter</text:span> guard in the incoming component, and only call <text:span text:style-name="Source_20_Text">next</text:span> when the fetch is complete:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">export default {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>data () {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>return {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>post: null,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>error: null</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>},</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>beforeRouteEnter (to, from, next) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>getPost(to.params.id, (err, post) =&gt; {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>if (err) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="8"/>// display some global error message</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="8"/>next(false)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>} else {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="8"/>next(vm =&gt; {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="10"/>vm.post = post</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="8"/>})</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>})</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>},</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>// when route changes and this component is already rendered,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>// the logic will be slightly different.</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>watch: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>$route () {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>this.post = null</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>getPost(this.$route.params.id, (err, post) =&gt; {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="8"/>if (err) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="10"/>this.error = err.toString()</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="8"/>} else {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="10"/>this.post = post</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="8"/>}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>})</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>}</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:p text:style-name="Text_20_body">The user will stay on the current view while the resource is being fetched for the incoming view. It is therefore recommended to display a progress bar or some kind of indicator while the data is being fetched. If the data fetch fails, it&apos;s also necessary to display some kind of global warning message.</text:p>
   <text:h text:style-name="P21" text:outline-level="1"><text:bookmark text:name="scroll-behavior"/><text:soft-page-break/>Scroll Behavior</text:h>
   <text:p text:style-name="Text_20_body">When using client-side routing, we may want to scroll to top when navigating to a new route, or preserve the scrolling position of history entries just like real page reload does. <text:span text:style-name="Source_20_Text">vue-router</text:span> allows you to achieve these and even better, allows you to completely customize the scroll behavior on route navigation.</text:p>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="Strong_20_Emphasis">Note: this feature only works in HTML5 history mode.</text:span></text:p>
   <text:p text:style-name="Text_20_body">When creating the router instance, you can provide the <text:span text:style-name="Source_20_Text">scrollBehavior</text:span> function:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const router = new VueRouter({</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>routes: [...],</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>scrollBehavior (to, from, savedPosition) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>// return desired position</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>}</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">})</text:span></text:p>
   <text:p text:style-name="Text_20_body">The <text:span text:style-name="Source_20_Text">scrollBehavior</text:span> function receives the <text:span text:style-name="Source_20_Text">to</text:span> and <text:span text:style-name="Source_20_Text">from</text:span> route objects. The third argument, <text:span text:style-name="Source_20_Text">savedPosition</text:span>, is only available if this is a <text:span text:style-name="Source_20_Text">popstate</text:span> navigation (triggered by the browser&apos;s back/forward buttons).</text:p>
   <text:p text:style-name="Text_20_body">The function can return a scroll position object. The object could be in the form of:</text:p>
   <text:list xml:id="list5563348085293270980" text:style-name="L9">
    <text:list-item>
     <text:p text:style-name="P47"><text:span text:style-name="Source_20_Text">{ x: number, y: number }</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P33"><text:span text:style-name="Source_20_Text">{ selector: string }</text:span></text:p>
    </text:list-item>
   </text:list>
   <text:p text:style-name="Text_20_body">If a falsy value or an empty object is returned, no scrolling will happen.</text:p>
   <text:p text:style-name="Text_20_body">For example:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">scrollBehavior (to, from, savedPosition) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>return { x: 0, y: 0 }</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:p text:style-name="Text_20_body">This will simply make the page scroll to top for all route navigations.</text:p>
   <text:p text:style-name="Text_20_body">Returning the <text:span text:style-name="Source_20_Text">savedPosition</text:span> will result in a native-like behavior when navigating with back/forward buttons:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">scrollBehavior (to, from, savedPosition) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>if (savedPosition) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>return savedPosition</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>} else {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>return { x: 0, y: 0 }</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>}</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:p text:style-name="Text_20_body">If you want to simulate the &quot;scroll to anchor&quot; behavior:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">scrollBehavior (to, from, savedPosition) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>if (to.hash) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>return {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>selector: to.hash</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>}</text:span></text:p>
   <text:p text:style-name="P27"><text:soft-page-break/><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:p text:style-name="Text_20_body">We can also use <text:a xlink:type="simple" xlink:href="https://router.vuejs.org/en/advanced/meta.html" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">route meta fields</text:a> to implement fine-grained scroll behavior control. Check out a full example <text:a xlink:type="simple" xlink:href="https://github.com/vuejs/vue-router/blob/dev/examples/scroll-behavior/app.js" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">here</text:a>.</text:p>
   <text:h text:style-name="P21" text:outline-level="1"><text:bookmark text:name="lazy-loading-routes"/>Lazy Loading Routes</text:h>
   <text:p text:style-name="Text_20_body">When building apps with a bundler, the JavaScript bundle can become quite large, and thus affect the page load time. It would be more efficient if we can split each route&apos;s components into a separate chunk, and only load them when the route is visited.</text:p>
   <text:p text:style-name="Text_20_body">Combining Vue&apos;s <text:a xlink:type="simple" xlink:href="http://vuejs.org/guide/components.html#Async-Components" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">async component feature</text:a> and Webpack&apos;s <text:a xlink:type="simple" xlink:href="https://webpack.github.io/docs/code-splitting.html" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">code splitting feature</text:a>, it&apos;s trivially easy to lazy-load route components.</text:p>
   <text:p text:style-name="Text_20_body">All we need to do is define our route components as async components:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const Foo = resolve =&gt; {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>// require.ensure is Webpack&apos;s special syntax for a code-split point.</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>require.ensure([&apos;./Foo.vue&apos;], () =&gt; {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>resolve(require(&apos;./Foo.vue&apos;))</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>})</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:p text:style-name="Text_20_body">There&apos;s also an alternative code-split syntax using AMD style require, so this can be simplified to:</text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">const Foo = resolve =&gt; require([&apos;./Foo.vue&apos;], resolve)</text:span></text:p>
   <text:p text:style-name="Text_20_body">Nothing needs to change in the route config, just use <text:span text:style-name="Source_20_Text">Foo</text:span> as usual:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const router = new VueRouter({</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>routes: [</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>{ path: &apos;/foo&apos;, component: Foo }</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>]</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">})</text:span></text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3"><text:bookmark text:name="grouping-components-in-the-same-chunk"/>Grouping Components in the Same Chunk</text:h>
   <text:p text:style-name="Text_20_body">Sometimes we may want to group all the components nested under the same route into the same async chunk. To achieve that we need to use <text:a xlink:type="simple" xlink:href="https://webpack.github.io/docs/code-splitting.html#named-chunks" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">named chunks</text:a> by providing a chunk name to <text:span text:style-name="Source_20_Text">require.ensure</text:span> as the 3rd argument:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const Foo = r =&gt; require.ensure([], () =&gt; r(require(&apos;./Foo.vue&apos;)), &apos;group-foo&apos;)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const Bar = r =&gt; require.ensure([], () =&gt; r(require(&apos;./Bar.vue&apos;)), &apos;group-foo&apos;)</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">const Baz = r =&gt; require.ensure([], () =&gt; r(require(&apos;./Baz.vue&apos;)), &apos;group-foo&apos;)</text:span></text:p>
   <text:p text:style-name="Text_20_body">Webpack will group any async module with the same chunk name into the same async chunk - this also means we don&apos;t need to explicitly list dependencies for <text:span text:style-name="Source_20_Text">require.ensure</text:span> anymore (thus passing an empty array).</text:p>
   <text:p text:style-name="P25"/>
   <text:p text:style-name="Title"><text:soft-page-break/>VUEX</text:p>
   <text:p text:style-name="P25"/>
   <text:h text:style-name="P22" text:outline-level="1"><text:bookmark text:name="getting-started1"/>Getting Started</text:h>
   <text:p text:style-name="Text_20_body">At the center of every Vuex application is the <text:span text:style-name="Strong_20_Emphasis">store</text:span>. A &quot;store&quot; is basically a container that holds your application <text:span text:style-name="Strong_20_Emphasis">state</text:span>. There are two things that make a Vuex store different from a plain global object:</text:p>
   <text:list xml:id="list1843259991861289909" text:style-name="L10">
    <text:list-item>
     <text:p text:style-name="P34">Vuex stores are reactive. When Vue components retrieve state from it, they will reactively and efficiently update if the store&apos;s state changes.</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P34">You cannot directly mutate the store&apos;s state. The only way to change a store&apos;s state is by explicitly <text:span text:style-name="Strong_20_Emphasis">committing mutations</text:span>. This ensures every state change leaves a track-able record, and enables tooling that helps us better understand our applications.</text:p>
    </text:list-item>
   </text:list>
   <text:h text:style-name="Heading_20_3" text:outline-level="3"><text:bookmark text:name="the-simplest-store"/>The Simplest Store</text:h>
   <text:p text:style-name="Quotations"><text:span text:style-name="Strong_20_Emphasis">NOTE:</text:span> We will be using ES2015 syntax for code examples for the rest of the docs. If you haven&apos;t picked it up, <text:a xlink:type="simple" xlink:href="https://babeljs.io/docs/learn-es2015/" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">you should</text:a>!</text:p>
   <text:p text:style-name="Text_20_body">After <text:a xlink:type="simple" xlink:href="https://vuex.vuejs.org/en/installation.html" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">installing</text:a> Vuex, let&apos;s create a store. It is pretty straightforward - just provide an initial state object, and some mutations:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">// Make sure to call Vue.use(Vuex) first if using a module system</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const store = new Vuex.Store({</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>state: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>count: 0</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>},</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>mutations: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>increment (state) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>state.count++</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>}</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">})</text:span></text:p>
   <text:p text:style-name="Text_20_body">Now, you can access the state object as <text:span text:style-name="Source_20_Text">store.state</text:span>, and trigger a state change with the <text:span text:style-name="Source_20_Text">store.commit</text:span> method:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">store.commit(&apos;increment&apos;)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">console.log(store.state.count) // -&gt; 1</text:span></text:p>
   <text:p text:style-name="Text_20_body">Again, the reason we are committing a mutation instead of changing <text:span text:style-name="Source_20_Text">store.state.count</text:span> directly, is because we want to explicitly track it. This simple convention makes your intention more explicit, so that you can reason about state changes in your app better when reading the code. In addition, this gives us the opportunity to implement tools that can log every mutation, take state snapshots, or even perform time travel debugging.</text:p>
   <text:p text:style-name="Text_20_body"><text:soft-page-break/>Using store state in a component simply involves returning the state within a computed property, because the store state is reactive. Triggering changes simply means committing mutations in component methods.</text:p>
   <text:p text:style-name="Text_20_body">Here&apos;s an example of the <text:a xlink:type="simple" xlink:href="https://jsfiddle.net/n9jmu5v7/341/" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">most basic Vuex counter app</text:a>.</text:p>
   <text:p text:style-name="Text_20_body">Next, we will discuss each core concept in much finer details, starting with <text:a xlink:type="simple" xlink:href="https://vuex.vuejs.org/en/state.html" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">State</text:a>.</text:p>
   <text:h text:style-name="P22" text:outline-level="1"><text:bookmark text:name="state"/>State</text:h>
   <text:h text:style-name="Heading_20_3" text:outline-level="3"><text:bookmark text:name="single-state-tree"/>Single State Tree</text:h>
   <text:p text:style-name="Text_20_body">Vuex uses a <text:span text:style-name="Strong_20_Emphasis">single state tree</text:span> - that is, this single object contains all your application level state and serves as the &quot;single source of truth&quot;. This also means usually you will have only one store for each application. A single state tree makes it straightforward to locate a specific piece of state, and allows us to easily take snapshots of the current app state for debugging purposes.</text:p>
   <text:p text:style-name="Text_20_body">The single state tree does not conflict with modularity - in later chapters we will discuss how to split your state and mutations into sub modules.</text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3"><text:bookmark text:name="getting-vuex-state-into-vue-components"/>Getting Vuex State into Vue Components</text:h>
   <text:p text:style-name="Text_20_body">So how do we display state inside the store in our Vue components? Since Vuex stores are reactive, the simplest way to &quot;retrieve&quot; state from it is simply returning some store state from within a <text:a xlink:type="simple" xlink:href="http://vuejs.org/guide/computed.html" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">computed property</text:a>:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">// let&apos;s create a Counter component</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const Counter = {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>template: `&lt;div&gt;{{ count }}&lt;/div&gt;`,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>computed: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>count () {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>return store.state.count</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>}</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:p text:style-name="Text_20_body">Whenever <text:span text:style-name="Source_20_Text">store.state.count</text:span> changes, it will cause the computed property to re-evaluate, and trigger associated DOM updates.</text:p>
   <text:p text:style-name="Text_20_body">However, this pattern causes the component to rely on the global store singleton. When using a module system, it requires importing the store in every component that uses store state, and also requires mocking when testing the component.</text:p>
   <text:p text:style-name="Text_20_body">Vuex provides a mechanism to &quot;inject&quot; the store into all child components from the root component with the <text:span text:style-name="Source_20_Text">store</text:span>option (enabled by <text:span text:style-name="Source_20_Text">Vue.use(Vuex)</text:span>):</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const app = new Vue({</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>el: &apos;#app&apos;,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>// provide the store using the &quot;store&quot; option.</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>// this will inject the store instance to all child components.</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>store,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>components: { Counter },</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>template: `</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:soft-page-break/><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>&lt;div class=&quot;app&quot;&gt;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>&lt;counter&gt;&lt;/counter&gt;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>&lt;/div&gt;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>`</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">})</text:span></text:p>
   <text:p text:style-name="Text_20_body">By providing the <text:span text:style-name="Source_20_Text">store</text:span> option to the root instance, the store will be injected into all child components of the root and will be available on them as <text:span text:style-name="Source_20_Text">this.$store</text:span>. Let&apos;s update our <text:span text:style-name="Source_20_Text">Counter</text:span> implementation:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const Counter = {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>template: `&lt;div&gt;{{ count }}&lt;/div&gt;`,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>computed: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>count () {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>return this.$store.state.count</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>}</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3"><text:bookmark text:name="the-mapstate-helper"/>The <text:span text:style-name="Source_20_Text">mapState</text:span> Helper</text:h>
   <text:p text:style-name="Text_20_body">When a component needs to make use of multiple store state properties or getters, declaring all these computed properties can get repetitive and verbose. To deal with this we can make use of the <text:span text:style-name="Source_20_Text">mapState</text:span> helper which generates computed getter functions for us and help us save some keystrokes:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">// in standalone builds helpers are exposed as Vuex.mapState</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">import { mapState } from &apos;vuex&apos;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">export default {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>// ...</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>computed: mapState({</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>// arrow functions can make the code very succinct!</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>count: state =&gt; state.count,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>// passing the string value &apos;count&apos; is same as `state =&gt; state.count`</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>countAlias: &apos;count&apos;,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>// to access local state with `this`, a normal function must be used</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>countPlusLocalState (state) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>return state.count + this.localCount</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>})</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:p text:style-name="Text_20_body">We can also pass a string array to <text:span text:style-name="Source_20_Text">mapState</text:span> when the name of mapped computed property is same as state sub tree name.</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">computed: mapState([</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>// map this.count to store.state.count</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>&apos;count&apos;</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">])</text:span></text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3"><text:bookmark text:name="object-spread-operator"/><text:soft-page-break/>Object Spread Operator</text:h>
   <text:p text:style-name="Text_20_body">Note that <text:span text:style-name="Source_20_Text">mapState</text:span> returns an object. How do we use it in combination with other local computed properties? Normally, we&apos;d have to use a utility to merge multiple objects into one so that we can pass the final object to <text:span text:style-name="Source_20_Text">computed</text:span>. However with the <text:a xlink:type="simple" xlink:href="https://github.com/sebmarkbage/ecmascript-rest-spread" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">object spread operator</text:a> (which is a stage-3 ECMAScript proposal), we can greatly simplify the syntax:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">computed: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>localComputed () { /* ... */ },</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>// mix this into the outer object with the object spread operator</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>...mapState({</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>// ...</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>})</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3"><text:bookmark text:name="components-can-still-have-local-state"/>Components Can Still Have Local State</text:h>
   <text:p text:style-name="Text_20_body">Using Vuex doesn&apos;t mean you should put <text:span text:style-name="Strong_20_Emphasis">all</text:span> the state in Vuex. Although putting more state into Vuex makes your state mutations more explicit and debuggable, sometimes it could also make the code more verbose and indirect. If a piece of state strictly belongs to a single component, it could be just fine leaving it as local state. You should weigh the trade-offs and make decisions that fit the development needs of your app.</text:p>
   <text:h text:style-name="P22" text:outline-level="1"><text:bookmark text:name="getters"/>Getters</text:h>
   <text:p text:style-name="Text_20_body">Sometimes we may need to compute derived state based on store state, for example filtering through a list of items and counting them:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">computed: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>doneTodosCount () {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>return this.$store.state.todos.filter(todo =&gt; todo.done).length</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>}</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:p text:style-name="Text_20_body">If more than one component needs to make use of this, we have to either duplicate the function, or extract it into a shared helper and import it in multiple places - both are less than ideal.</text:p>
   <text:p text:style-name="Text_20_body">Vuex allows us to define &quot;getters&quot; in the store (think of them as computed properties for stores). Getters will receive the state as their 1st argument:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const store = new Vuex.Store({</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>state: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>todos: [</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>{ id: 1, text: &apos;...&apos;, done: true },</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>{ id: 2, text: &apos;...&apos;, done: false }</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>]</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>},</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>getters: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>doneTodos: state =&gt; {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>return state.todos.filter(todo =&gt; todo.done)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>}</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">})</text:span></text:p>
   <text:p text:style-name="Text_20_body"><text:soft-page-break/>The getters will be exposed on the <text:span text:style-name="Source_20_Text">store.getters</text:span> object:</text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">store.getters.doneTodos // -&gt; [{ id: 1, text: &apos;...&apos;, done: true }]</text:span></text:p>
   <text:p text:style-name="Text_20_body">Getters will also receive other getters as the 2nd argument:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">getters: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>// ...</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>doneTodosCount: (state, getters) =&gt; {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>return getters.doneTodos.length</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>}</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">store.getters.doneTodosCount // -&gt; 1</text:span></text:p>
   <text:p text:style-name="Text_20_body">We can now easily make use of it inside any component:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">computed: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>doneTodosCount () {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>return this.$store.getters.doneTodosCount</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>}</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:p text:style-name="Text_20_body">You can also pass arguments to getters by returning a function. This is particularly useful when you want to query an array in the store:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">getters: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>// ...</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>getTodoById: (state, getters) =&gt; (id) =&gt; {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>return getters.todos.find(todo =&gt; todo.id === id)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>}</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">store.getters.getTodoById(2) // -&gt; { id: 2, text: &apos;...&apos;, done: false }</text:span></text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3"><text:bookmark text:name="the-mapgetters-helper"/>The <text:span text:style-name="Source_20_Text">mapGetters</text:span> Helper</text:h>
   <text:p text:style-name="Text_20_body">The <text:span text:style-name="Source_20_Text">mapGetters</text:span> helper simply maps store getters to local computed properties:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">import { mapGetters } from &apos;vuex&apos;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">export default {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>// ...</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>computed: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>// mix the getters into computed with object spread operator</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>...mapGetters([</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>&apos;doneTodosCount&apos;,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>&apos;anotherGetter&apos;,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>// ...</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>])</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>}</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:p text:style-name="Text_20_body">If you want to map a getter to a different name, use an object:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">...mapGetters({</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>// map this.doneCount to store.getters.doneTodosCount</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:soft-page-break/><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>doneCount: &apos;doneTodosCount&apos;</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">})</text:span></text:p>
   <text:h text:style-name="P22" text:outline-level="1">Mutations</text:h>
   <text:p text:style-name="Text_20_body">The only way to actually change state in a Vuex store is by committing a mutation. Vuex mutations are very similar to events: each mutation has a string <text:span text:style-name="Strong_20_Emphasis">type</text:span> and a <text:span text:style-name="Strong_20_Emphasis">handler</text:span>. The handler function is where we perform actual state modifications, and it will receive the state as the first argument:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const store = new Vuex.Store({</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>state: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>count: 1</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>},</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>mutations: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>increment (state) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>// mutate state</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>state.count++</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>}</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">})</text:span></text:p>
   <text:p text:style-name="Text_20_body">You cannot directly call a mutation handler. The options here is more like event registration: &quot;When a mutation with type <text:span text:style-name="Source_20_Text">increment</text:span> is triggered, call this handler.&quot; To invoke a mutation handler, you need to call <text:span text:style-name="Strong_20_Emphasis">store.commit</text:span> with its type:</text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">store.commit(&apos;increment&apos;)</text:span></text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3">Commit with Payload</text:h>
   <text:p text:style-name="Text_20_body">You can pass an additional argument to <text:span text:style-name="Source_20_Text">store.commit</text:span>, which is called the <text:span text:style-name="Strong_20_Emphasis">payload</text:span> for the mutation:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">// ...</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">mutations: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>increment (state, n) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>state.count += n</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>}</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">store.commit(&apos;increment&apos;, 10)</text:span></text:p>
   <text:p text:style-name="Text_20_body">In most cases, the payload should be an object so that it can contain multiple fields, and the recorded mutation will also be more descriptive:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">// ...</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">mutations: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>increment (state, payload) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>state.count += payload.amount</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>}</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">store.commit(&apos;increment&apos;, {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>amount: 10</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">})</text:span></text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3"><text:soft-page-break/>Object-Style Commit</text:h>
   <text:p text:style-name="Text_20_body">An alternative way to commit a mutation is by directly using an object that has a <text:span text:style-name="Source_20_Text">type</text:span> property:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">store.commit({</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>type: &apos;increment&apos;,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>amount: 10</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">})</text:span></text:p>
   <text:p text:style-name="Text_20_body">When using object-style commit, the entire object will be passed as the payload to mutation handlers, so the handler remains the same:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">mutations: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>increment (state, payload) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>state.count += payload.amount</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>}</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3">Mutations Follow Vue&apos;s Reactivity Rules</text:h>
   <text:p text:style-name="Text_20_body">Since a Vuex store&apos;s state is made reactive by Vue, when we mutate the state, Vue components observing the state will update automatically. This also means Vuex mutations are subject to the same reactivity caveats when working with plain Vue:</text:p>
   <text:list xml:id="list5198338326988059535" text:style-name="L11">
    <text:list-item>
     <text:p text:style-name="P35">Prefer initializing your store&apos;s initial state with all desired fields upfront.</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P35">When adding new properties to an Object, you should either:</text:p>
     <text:list>
      <text:list-item>
       <text:p text:style-name="P35">Use <text:span text:style-name="Source_20_Text">Vue.set(obj, &apos;newProp&apos;, 123)</text:span>, or -</text:p>
      </text:list-item>
      <text:list-item>
       <text:p text:style-name="P35">Replace that Object with a fresh one. For example, using the stage-3 <text:a xlink:type="simple" xlink:href="https://github.com/sebmarkbage/ecmascript-rest-spread" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">object spread syntax</text:a> we can write it like this:</text:p>
       <text:p text:style-name="P50"><text:span text:style-name="Source_20_Text">state.obj = { ...state.obj, newProp: 123 }</text:span></text:p>
      </text:list-item>
     </text:list>
    </text:list-item>
   </text:list>
   <text:h text:style-name="Heading_20_3" text:outline-level="3">Using Constants for Mutation Types</text:h>
   <text:p text:style-name="Text_20_body">It is a commonly seen pattern to use constants for mutation types in various Flux implementations. This allow the code to take advantage of tooling like linters, and putting all constants in a single file allows your collaborators to get an at-a-glance view of what mutations are possible in the entire application:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">// mutation-types.js</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">export const SOME_MUTATION = &apos;SOME_MUTATION&apos;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">// store.js</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">import Vuex from &apos;vuex&apos;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">import { SOME_MUTATION } from &apos;./mutation-types&apos;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const store = new Vuex.Store({</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>state: { ... },</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>mutations: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>// we can use the ES2015 computed property name feature</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>// to use a constant as the function name</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>[SOME_MUTATION] (state) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>// mutate state</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:soft-page-break/><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>}</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">})</text:span></text:p>
   <text:p text:style-name="Text_20_body">Whether to use constants is largely a preference - it can be helpful in large projects with many developers, but it&apos;s totally optional if you don&apos;t like them.</text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3">Mutations Must Be Synchronous</text:h>
   <text:p text:style-name="Text_20_body">One important rule to remember is that <text:span text:style-name="Strong_20_Emphasis">mutation handler functions must be synchronous</text:span>. Why? Consider the following example:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">mutations: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>someMutation (state) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>api.callAsyncMethod(() =&gt; {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>state.count++</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>})</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>}</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:p text:style-name="Text_20_body">Now imagine we are debugging the app and looking at the devtool&apos;s mutation logs. For every mutation logged, the devtool will need to capture a &quot;before&quot; and &quot;after&quot; snapshots of the state. However, the asynchronous callback inside the example mutation above makes that impossible: the callback is not called yet when the mutation is committed, and there&apos;s no way for the devtool to know when the callback will actually be called - any state mutation performed in the callback is essentially un-trackable!</text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3">Committing Mutations in Components</text:h>
   <text:p text:style-name="Text_20_body">You can commit mutations in components with <text:span text:style-name="Source_20_Text">this.$store.commit(&apos;xxx&apos;)</text:span>, or use the <text:span text:style-name="Source_20_Text">mapMutations</text:span> helper which maps component methods to <text:span text:style-name="Source_20_Text">store.commit</text:span> calls (requires root <text:span text:style-name="Source_20_Text">store</text:span> injection):</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">import { mapMutations } from &apos;vuex&apos;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">export default {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>// ...</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>methods: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>...mapMutations([</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>&apos;increment&apos; // map this.increment() to this.$store.commit(&apos;increment&apos;)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>]),</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>...mapMutations({</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>add: &apos;increment&apos; // map this.add() to this.$store.commit(&apos;increment&apos;)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>})</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>}</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3">On to Actions</text:h>
   <text:p text:style-name="Text_20_body">Asynchronicity combined with state mutation can make your program very hard to reason about. For example, when you call two methods both with async callbacks that mutate the state, how do you know <text:soft-page-break/>when they are called and which callback was called first? This is exactly why we want to separate the two concepts. In Vuex, <text:span text:style-name="Strong_20_Emphasis">mutations are synchronous transactions</text:span>:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">store.commit(&apos;increment&apos;)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">// any state change that the &quot;increment&quot; mutation may cause</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">// should be done at this moment.</text:span></text:p>
   <text:p text:style-name="Text_20_body">To handle asynchronous operations, let&apos;s introduce <text:a xlink:type="simple" xlink:href="https://vuex.vuejs.org/en/actions.html" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">Actions</text:a>.</text:p>
   <text:p text:style-name="P25"/>
   <text:h text:style-name="P22" text:outline-level="1"><text:bookmark text:name="actions"/>Actions</text:h>
   <text:p text:style-name="Text_20_body">Actions are similar to mutations, the difference being that:</text:p>
   <text:list xml:id="list7626775113861676244" text:style-name="L12">
    <text:list-item>
     <text:p text:style-name="P48">Instead of mutating the state, actions commit mutations.</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P36">Actions can contain arbitrary asynchronous operations.</text:p>
    </text:list-item>
   </text:list>
   <text:p text:style-name="Text_20_body">Let&apos;s register a simple action:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const store = new Vuex.Store({</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>state: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>count: 0</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>},</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>mutations: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>increment (state) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>state.count++</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>},</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>actions: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>increment (context) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>context.commit(&apos;increment&apos;)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>}</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">})</text:span></text:p>
   <text:p text:style-name="Text_20_body">Action handlers receive a context object which exposes the same set of methods/properties on the store instance, so you can call <text:span text:style-name="Source_20_Text">context.commit</text:span> to commit a mutation, or access the state and getters via <text:span text:style-name="Source_20_Text">context.state</text:span> and <text:span text:style-name="Source_20_Text">context.getters</text:span>. We will see why this context object is not the store instance itself when we introduce <text:a xlink:type="simple" xlink:href="https://vuex.vuejs.org/en/modules.html" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">Modules</text:a> later.</text:p>
   <text:p text:style-name="Text_20_body">In practice, we often use ES2015 <text:a xlink:type="simple" xlink:href="https://github.com/lukehoban/es6features#destructuring" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">argument destructuring</text:a> to simplify the code a bit (especially when we need to call <text:span text:style-name="Source_20_Text">commit</text:span> multiple times):</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">actions: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>increment ({ commit }) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>commit(&apos;increment&apos;)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>}</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3"><text:bookmark text:name="dispatching-actions"/>Dispatching Actions</text:h>
   <text:p text:style-name="Text_20_body">Actions are triggered with the <text:span text:style-name="Source_20_Text">store.dispatch</text:span> method:</text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">store.dispatch(&apos;increment&apos;)</text:span></text:p>
   <text:p text:style-name="Text_20_body"><text:soft-page-break/>This may look dumb at first sight: if we want to increment the count, why don&apos;t we just call <text:span text:style-name="Source_20_Text">store.commit(&apos;increment&apos;)</text:span> directly? Well, remember that <text:span text:style-name="Strong_20_Emphasis">mutations must be synchronous</text:span>? Actions don&apos;t. We can perform <text:span text:style-name="Strong_20_Emphasis">asynchronous</text:span> operations inside an action:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">actions: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>incrementAsync ({ commit }) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>setTimeout(() =&gt; {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>commit(&apos;increment&apos;)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>}, 1000)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>}</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:p text:style-name="Text_20_body">Actions support the same payload format and object-style dispatch:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">// dispatch with a payload</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">store.dispatch(&apos;incrementAsync&apos;, {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>amount: 10</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">})</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">// dispatch with an object</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">store.dispatch({</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>type: &apos;incrementAsync&apos;,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>amount: 10</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">})</text:span></text:p>
   <text:p text:style-name="Text_20_body">A more practical example of real-world actions would be an action to checkout a shopping cart, which involves <text:span text:style-name="Strong_20_Emphasis">calling an async API</text:span> and <text:span text:style-name="Strong_20_Emphasis">committing multiple mutations</text:span>:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">actions: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>checkout ({ commit, state }, products) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>// save the items currently in the cart</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>const savedCartItems = [...state.cart.added]</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>// send out checkout request, and optimistically</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>// clear the cart</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>commit(types.CHECKOUT_REQUEST)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>// the shop API accepts a success callback and a failure callback</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>shop.buyProducts(</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>products,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>// handle success</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>() =&gt; commit(types.CHECKOUT_SUCCESS),</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>// handle failure</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>() =&gt; commit(types.CHECKOUT_FAILURE, savedCartItems)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>}</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:p text:style-name="Text_20_body">Note we are performing a flow of asynchronous operations, and recording the side effects (state mutations) of the action by committing them.</text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3"><text:bookmark text:name="dispatching-actions-in-components"/>Dispatching Actions in Components</text:h>
   <text:p text:style-name="Text_20_body">You can dispatch actions in components with <text:span text:style-name="Source_20_Text">this.$store.dispatch(&apos;xxx&apos;)</text:span>, or use the <text:span text:style-name="Source_20_Text">mapActions</text:span> helper which maps component methods to <text:span text:style-name="Source_20_Text">store.dispatch</text:span> calls (requires root <text:span text:style-name="Source_20_Text">store</text:span> injection):</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">import { mapActions } from &apos;vuex&apos;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:soft-page-break/></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">export default {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>// ...</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>methods: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>...mapActions([</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>&apos;increment&apos; // map this.increment() to this.$store.dispatch(&apos;increment&apos;)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>]),</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>...mapActions({</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>add: &apos;increment&apos; // map this.add() to this.$store.dispatch(&apos;increment&apos;)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>})</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>}</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3"><text:bookmark text:name="composing-actions"/>Composing Actions</text:h>
   <text:p text:style-name="Text_20_body">Actions are often asynchronous, so how do we know when an action is done? And more importantly, how can we compose multiple actions together to handle more complex async flows?</text:p>
   <text:p text:style-name="Text_20_body">The first thing to know is that <text:span text:style-name="Source_20_Text">store.dispatch</text:span> can handle Promise returned by the triggered action handler and it also returns Promise:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">actions: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>actionA ({ commit }) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>return new Promise((resolve, reject) =&gt; {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>setTimeout(() =&gt; {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="8"/>commit(&apos;someMutation&apos;)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="8"/>resolve()</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>}, 1000)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>})</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>}</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:p text:style-name="Text_20_body">Now you can do:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">store.dispatch(&apos;actionA&apos;).then(() =&gt; {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>// ...</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">})</text:span></text:p>
   <text:p text:style-name="Text_20_body">And also in another action:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">actions: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>// ...</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>actionB ({ dispatch, commit }) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>return dispatch(&apos;actionA&apos;).then(() =&gt; {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>commit(&apos;someOtherMutation&apos;)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>})</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>}</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:p text:style-name="Text_20_body">Finally, if we make use of <text:a xlink:type="simple" xlink:href="https://tc39.github.io/ecmascript-asyncawait/" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">async / await</text:a>, a JavaScript feature landing very soon, we can compose our actions like this:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">// assuming getData() and getOtherData() return Promises</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">actions: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:soft-page-break/><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>async actionA ({ commit }) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>commit(&apos;gotData&apos;, await getData())</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>},</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>async actionB ({ dispatch, commit }) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>await dispatch(&apos;actionA&apos;) // wait for actionA to finish</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>commit(&apos;gotOtherData&apos;, await getOtherData())</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>}</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:p text:style-name="Quotations">It&apos;s possible for a <text:span text:style-name="Source_20_Text">store.dispatch</text:span> to trigger multiple action handlers in different modules. In such a case the returned value will be a Promise that resolves when all triggered handlers have been resolved.</text:p>
   <text:h text:style-name="P22" text:outline-level="1"><text:bookmark text:name="modules"/>Modules</text:h>
   <text:p text:style-name="Text_20_body">Due to using a single state tree, all state of our application is contained inside one big object. However, as our application grows in scale, the store can get really bloated.</text:p>
   <text:p text:style-name="Text_20_body">To help with that, Vuex allows us to divide our store into <text:span text:style-name="Strong_20_Emphasis">modules</text:span>. Each module can contain its own state, mutations, actions, getters, and even nested modules - it&apos;s fractal all the way down:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const moduleA = {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>state: { ... },</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>mutations: { ... },</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>actions: { ... },</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>getters: { ... }</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const moduleB = {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>state: { ... },</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>mutations: { ... },</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>actions: { ... }</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const store = new Vuex.Store({</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>modules: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>a: moduleA,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>b: moduleB</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">})</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">store.state.a // -&gt; moduleA&apos;s state</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">store.state.b // -&gt; moduleB&apos;s state</text:span></text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3"><text:bookmark text:name="module-local-state"/>Module Local State</text:h>
   <text:p text:style-name="Text_20_body">Inside a module&apos;s mutations and getters, The first argument received will be <text:span text:style-name="Strong_20_Emphasis">the module&apos;s local state</text:span>.</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const moduleA = {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>state: { count: 0 },</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>mutations: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>increment (state) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>// state is the local module state</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>state.count++</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:soft-page-break/><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>},</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>getters: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>doubleCount (state) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>return state.count * 2</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>}</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:p text:style-name="Text_20_body">Similarly, inside module actions, <text:span text:style-name="Source_20_Text">context.state</text:span> will expose the local state, and root state will be exposed as <text:span text:style-name="Source_20_Text">context.rootState</text:span>:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const moduleA = {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>// ...</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>actions: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>incrementIfOddOnRootSum ({ state, commit, rootState }) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>if (state.count + rootState.count % 2 === 1) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="8"/>commit(&apos;increment&apos;)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>}</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:p text:style-name="Text_20_body">Also, inside module getters, the root state will be exposed as their 3rd argument:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const moduleA = {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>// ...</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>getters: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>sumWithRootCount (state, getters, rootState) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>return state.count + rootState.count</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>}</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3"><text:bookmark text:name="namespacing"/>Namespacing</text:h>
   <text:p text:style-name="Text_20_body">By default, actions, mutations and getters inside modules are still registered under the <text:span text:style-name="Strong_20_Emphasis">global namespace</text:span> - this allows multiple modules to react to the same mutation/action type.</text:p>
   <text:p text:style-name="Text_20_body">If you want your modules to be more self-contained or reusable, you can mark it as namespaced with <text:span text:style-name="Source_20_Text">namespaced: true</text:span>. When the module is registered, all of its getters, actions and mutations will be automatically namespaced based on the path the module is registered at. For example:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const store = new Vuex.Store({</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>modules: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>account: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>namespaced: true,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>// module assets</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>state: { ... }, // module state is already nested and not affected by namespace option</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>getters: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="8"/>isAdmin () { ... } // -&gt; getters[&apos;account/isAdmin&apos;]</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>},</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>actions: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="8"/>login () { ... } // -&gt; dispatch(&apos;account/login&apos;)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:soft-page-break/><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>},</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>mutations: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="8"/>login () { ... } // -&gt; commit(&apos;account/login&apos;)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>},</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>// nested modules</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>modules: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="8"/>// inherits the namespace from parent module</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="8"/>myPage: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="10"/>state: { ... },</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="10"/>getters: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="12"/>profile () { ... } // -&gt; getters[&apos;account/profile&apos;]</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="10"/>}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="8"/>},</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="8"/>// further nest the namespace</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="8"/>posts: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="10"/>namespaced: true,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="10"/>state: { ... },</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="10"/>getters: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="12"/>popular () { ... } // -&gt; getters[&apos;account/posts/popular&apos;]</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="10"/>}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="8"/>}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>}</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">})</text:span></text:p>
   <text:p text:style-name="Text_20_body">Namespaced getters and actions will receive localized <text:span text:style-name="Source_20_Text">getters</text:span>, <text:span text:style-name="Source_20_Text">dispatch</text:span> and <text:span text:style-name="Source_20_Text">commit</text:span>. In other words, you can use the module assets without writing prefix in the same module. Toggling between namespaced or not does not affect the code inside the module.</text:p>
   <text:h text:style-name="Heading_20_4" text:outline-level="4"><text:bookmark text:name="accessing-global-assets-in-namespaced-modules"/>Accessing Global Assets in Namespaced Modules</text:h>
   <text:p text:style-name="Text_20_body">If you want to use global state and getters, <text:span text:style-name="Source_20_Text">rootState</text:span> and <text:span text:style-name="Source_20_Text">rootGetters</text:span> are passed as the 3rd and 4th arguments to getter functions, and also exposed as properties on the <text:span text:style-name="Source_20_Text">context</text:span> object passed to action functions.</text:p>
   <text:p text:style-name="Text_20_body">To dispatch actions or commit mutations in the global namespace, pass <text:span text:style-name="Source_20_Text">{ root: true }</text:span> as the 3rd argument to <text:span text:style-name="Source_20_Text">dispatch</text:span> and <text:span text:style-name="Source_20_Text">commit</text:span>.</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">modules: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>foo: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>namespaced: true,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>getters: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>// `getters` is localized to this module&apos;s getters</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>// you can use rootGetters via 4th argument of getters</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>someGetter (state, getters, rootState, rootGetters) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="8"/>getters.someOtherGetter // -&gt; &apos;foo/someOtherGetter&apos;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="8"/>rootGetters.someOtherGetter // -&gt; &apos;someOtherGetter&apos;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>},</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>someOtherGetter: state =&gt; { ... }</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>},</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:soft-page-break/><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>actions: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>// dispatch and commit are also localized for this module</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>// they will accept `root` option for the root dispatch/commit</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>someAction ({ dispatch, commit, getters, rootGetters }) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="8"/>getters.someGetter // -&gt; &apos;foo/someGetter&apos;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="8"/>rootGetters.someGetter // -&gt; &apos;someGetter&apos;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="8"/>dispatch(&apos;someOtherAction&apos;) // -&gt; &apos;foo/someOtherAction&apos;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="8"/>dispatch(&apos;someOtherAction&apos;, null, { root: true }) // -&gt; &apos;someOtherAction&apos;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="8"/>commit(&apos;someMutation&apos;) // -&gt; &apos;foo/someMutation&apos;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="8"/>commit(&apos;someMutation&apos;, null, { root: true }) // -&gt; &apos;someMutation&apos;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>},</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>someOtherAction (ctx, payload) { ... }</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>}</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:h text:style-name="Heading_20_4" text:outline-level="4"><text:bookmark text:name="binding-helpers-with-namespace"/>Binding Helpers with Namespace</text:h>
   <text:p text:style-name="Text_20_body">When binding a namespaced module to components with the <text:span text:style-name="Source_20_Text">mapState</text:span>, <text:span text:style-name="Source_20_Text">mapGetters</text:span>, <text:span text:style-name="Source_20_Text">mapActions</text:span> and <text:span text:style-name="Source_20_Text">mapMutations</text:span>helpers, it can get a bit verbose:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">computed: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>...mapState({</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>a: state =&gt; state.some.nested.module.a,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>b: state =&gt; state.some.nested.module.b</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>})</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">},</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">methods: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>...mapActions([</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>&apos;some/nested/module/foo&apos;,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>&apos;some/nested/module/bar&apos;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>])</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:p text:style-name="Text_20_body">In such cases, you can pass the module namespace string as the first argument to the helpers so that all bindings are done using that module as the context. The above can be simplified to:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">computed: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>...mapState(&apos;some/nested/module&apos;, {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>a: state =&gt; state.a,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>b: state =&gt; state.b</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>})</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">},</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">methods: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>...mapActions(&apos;some/nested/module&apos;, [</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>&apos;foo&apos;,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>&apos;bar&apos;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>])</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:h text:style-name="Heading_20_4" text:outline-level="4"><text:bookmark text:name="caveat-for-plugin-developers"/><text:soft-page-break/>Caveat for Plugin Developers</text:h>
   <text:p text:style-name="Text_20_body">You may care about unpredictable namespacing for your modules when you create a <text:a xlink:type="simple" xlink:href="https://vuex.vuejs.org/en/plugins.html" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">plugin</text:a> that provides the modules and let users add them to a Vuex store. Your modules will be also namespaced if the plugin users add your modules under a namespaced module. To adapt this situation, you may need to receive a namespace value via your plugin option:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">// get namespace value via plugin option</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">// and returns Vuex plugin function</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">export function createPlugin (options = {}) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>return function (store) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>// add namespace to plugin module&apos;s types</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>const namespace = options.namespace || &apos;&apos;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>store.dispatch(namespace + &apos;pluginAction&apos;)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>}</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3"><text:bookmark text:name="dynamic-module-registration"/>Dynamic Module Registration</text:h>
   <text:p text:style-name="Text_20_body">You can register a module <text:span text:style-name="Strong_20_Emphasis">after</text:span> the store has been created with the <text:span text:style-name="Source_20_Text">store.registerModule</text:span> method:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">store.registerModule(&apos;myModule&apos;, {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>// ...</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">})</text:span></text:p>
   <text:p text:style-name="Text_20_body">The module&apos;s state will be exposed as <text:span text:style-name="Source_20_Text">store.state.myModule</text:span>.</text:p>
   <text:p text:style-name="Text_20_body">Dynamic module registration makes it possible for other Vue plugins to also leverage Vuex for state management by attaching a module to the application&apos;s store. For example, the <text:a xlink:type="simple" xlink:href="https://github.com/vuejs/vuex-router-sync" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="Source_20_Text">vuex-router-sync</text:span></text:a> library integrates vue-router with vuex by managing the application&apos;s route state in a dynamically attached module.</text:p>
   <text:p text:style-name="Text_20_body">You can also remove a dynamically registered module with <text:span text:style-name="Source_20_Text">store.unregisterModule(moduleName)</text:span>. Note you cannot remove static modules (declared at store creation) with this method.</text:p>
   <text:h text:style-name="P22" text:outline-level="1"><text:bookmark text:name="plugins"/>Plugins</text:h>
   <text:p text:style-name="Text_20_body">Vuex stores accept the <text:span text:style-name="Source_20_Text">plugins</text:span> option that exposes hooks for each mutation. A Vuex plugin is simply a function that receives the store as the only argument:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const myPlugin = store =&gt; {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>// called when the store is initialized</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>store.subscribe((mutation, state) =&gt; {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>// called after every mutation.</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>// The mutation comes in the format of { type, payload }.</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>})</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:p text:style-name="Text_20_body">And can be used like this:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const store = new Vuex.Store({</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>// ...</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:soft-page-break/><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>plugins: [myPlugin]</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">})</text:span></text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3"><text:bookmark text:name="committing-mutations-inside-plugins"/>Committing Mutations Inside Plugins</text:h>
   <text:p text:style-name="Text_20_body">Plugins are not allowed to directly mutate state - similar to your components, they can only trigger changes by committing mutations.</text:p>
   <text:p text:style-name="Text_20_body">By committing mutations, a plugin can be used to sync a data source to the store. For example, to sync a websocket data source to the store (this is just a contrived example, in reality the <text:span text:style-name="Source_20_Text">createPlugin</text:span> function can take some additional options for more complex tasks):</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">export default function createWebSocketPlugin (socket) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>return store =&gt; {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>socket.on(&apos;data&apos;, data =&gt; {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>store.commit(&apos;receiveData&apos;, data)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>})</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>store.subscribe(mutation =&gt; {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>if (mutation.type === &apos;UPDATE_DATA&apos;) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="8"/>socket.emit(&apos;update&apos;, mutation.payload)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>})</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>}</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const plugin = createWebSocketPlugin(socket)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const store = new Vuex.Store({</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>state,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>mutations,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>plugins: [plugin]</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">})</text:span></text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3"><text:bookmark text:name="taking-state-snapshots"/>Taking State Snapshots</text:h>
   <text:p text:style-name="Text_20_body">Sometimes a plugin may want to receive &quot;snapshots&quot; of the state, and also compare the post-mutation state with pre-mutation state. To achieve that, you will need to perform a deep-copy on the state object:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const myPluginWithSnapshot = store =&gt; {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>let prevState = _.cloneDeep(store.state)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>store.subscribe((mutation, state) =&gt; {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>let nextState = _.cloneDeep(state)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>// compare prevState and nextState...</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>// save state for next mutation</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>prevState = nextState</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>})</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="Strong_20_Emphasis">Plugins that take state snapshots should be used only during development.</text:span> When using Webpack or Browserify, we can let our build tools handle that for us:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const store = new Vuex.Store({</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>// ...</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>plugins: process.env.NODE_ENV !== &apos;production&apos;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:soft-page-break/><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>? [myPluginWithSnapshot]</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>: []</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">})</text:span></text:p>
   <text:p text:style-name="Text_20_body">The plugin will be used by default. For production, you will need <text:a xlink:type="simple" xlink:href="https://webpack.github.io/docs/list-of-plugins.html#defineplugin" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">DefinePlugin</text:a> for Webpack or <text:a xlink:type="simple" xlink:href="https://github.com/hughsk/envify" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">envify</text:a> for Browserify to convert the value of <text:span text:style-name="Source_20_Text">process.env.NODE_ENV !== &apos;production&apos;</text:span> to <text:span text:style-name="Source_20_Text">false</text:span> for the final build.</text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3"><text:bookmark text:name="built-in-logger-plugin"/>Built-in Logger Plugin</text:h>
   <text:p text:style-name="Quotations">If you are using <text:a xlink:type="simple" xlink:href="https://github.com/vuejs/vue-devtools" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">vue-devtools</text:a> you probably don&apos;t need this.</text:p>
   <text:p text:style-name="Text_20_body">Vuex comes with a logger plugin for common debugging usage:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">import createLogger from &apos;vuex/dist/logger&apos;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const store = new Vuex.Store({</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>plugins: [createLogger()]</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">})</text:span></text:p>
   <text:p text:style-name="Text_20_body">The <text:span text:style-name="Source_20_Text">createLogger</text:span> function takes a few options:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const logger = createLogger({</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>collapsed: false, // auto-expand logged mutations</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>transformer (state) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>// transform the state before logging it.</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>// for example return only a specific sub-tree</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>return state.subTree</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>},</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>mutationTransformer (mutation) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>// mutations are logged in the format of { type, payload }</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>// we can format it any way we want.</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>return mutation.type</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>}</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">})</text:span></text:p>
   <text:p text:style-name="Text_20_body">The logger file can also be included directly via a <text:span text:style-name="Source_20_Text">&lt;script&gt;</text:span> tag, and will expose the <text:span text:style-name="Source_20_Text">createVuexLogger</text:span> function globally.</text:p>
   <text:p text:style-name="Text_20_body">Note the logger plugin takes state snapshots, so use it only during development.</text:p>
   <text:h text:style-name="P22" text:outline-level="1"><text:bookmark text:name="strict-mode"/>Strict Mode</text:h>
   <text:p text:style-name="Text_20_body">To enable strict mode, simply pass in <text:span text:style-name="Source_20_Text">strict: true</text:span> when creating a Vuex store:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const store = new Vuex.Store({</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>// ...</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>strict: true</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">})</text:span></text:p>
   <text:p text:style-name="Text_20_body">In strict mode, whenever Vuex state is mutated outside of mutation handlers, an error will be thrown. This ensures that all state mutations can be explicitly tracked by debugging tools.</text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3"><text:bookmark text:name="development-vs-production"/><text:soft-page-break/>Development vs. Production</text:h>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="Strong_20_Emphasis">Do not enable strict mode when deploying for production!</text:span> Strict mode runs a deep watch on the state tree for detecting inappropriate mutations - make sure to turn it off in production to avoid the performance cost.</text:p>
   <text:p text:style-name="Text_20_body">Similar to plugins, we can let the build tools handle that:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const store = new Vuex.Store({</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>// ...</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>strict: process.env.NODE_ENV !== &apos;production&apos;</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">})</text:span></text:p>
   <text:h text:style-name="P22" text:outline-level="1"><text:bookmark text:name="form-handling"/>Form Handling</text:h>
   <text:p text:style-name="Text_20_body">When using Vuex in strict mode, it could be a bit tricky to use <text:span text:style-name="Source_20_Text">v-model</text:span> on a piece of state that belongs to Vuex:</text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">&lt;input v-model=&quot;obj.message&quot;&gt;</text:span></text:p>
   <text:p text:style-name="Text_20_body">Assuming <text:span text:style-name="Source_20_Text">obj</text:span> is a computed property that returns an Object from the store, the <text:span text:style-name="Source_20_Text">v-model</text:span> here will attempt to directly mutate <text:span text:style-name="Source_20_Text">obj.message</text:span> when the user types in the input. In strict mode, this will result in an error because the mutation is not performed inside an explicit Vuex mutation handler.</text:p>
   <text:p text:style-name="Text_20_body">The &quot;Vuex way&quot; to deal with it is binding the <text:span text:style-name="Source_20_Text">&lt;input&gt;</text:span>&apos;s value and call an action on the <text:span text:style-name="Source_20_Text">input</text:span> or <text:span text:style-name="Source_20_Text">change</text:span> event:</text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">&lt;input :value=&quot;message&quot; @input=&quot;updateMessage&quot;&gt;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">// ...</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">computed: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>...mapState({</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>message: state =&gt; state.obj.message</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>})</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">},</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">methods: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>updateMessage (e) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>this.$store.commit(&apos;updateMessage&apos;, e.target.value)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>}</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:p text:style-name="Text_20_body">And here&apos;s the mutation handler:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">// ...</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">mutations: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>updateMessage (state, message) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>state.obj.message = message</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>}</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3"><text:bookmark text:name="two-way-computed-property"/><text:soft-page-break/>Two-way Computed Property</text:h>
   <text:p text:style-name="Text_20_body">Admittedly, the above is quite a bit more verbose than <text:span text:style-name="Source_20_Text">v-model</text:span> + local state, and we lose some of the useful features from <text:span text:style-name="Source_20_Text">v-model</text:span> as well. An alternative approach is using a two-way computed property with a setter:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">// ...</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">computed: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>message: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>get () {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>return this.$store.state.obj.message</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>},</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>set (value) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>this.$store.commit(&apos;updateMessage&apos;, value)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>}</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:h text:style-name="P22" text:outline-level="1"><text:bookmark text:name="testing"/>Testing</text:h>
   <text:p text:style-name="Text_20_body">The main parts we want to unit test in Vuex are mutations and actions.</text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3"><text:bookmark text:name="testing-mutations"/>Testing Mutations</text:h>
   <text:p text:style-name="Text_20_body">Mutations are very straightforward to test, because they are just functions that completely rely on their arguments. One trick is that if you are using ES2015 modules and put your mutations inside your <text:span text:style-name="Source_20_Text">store.js</text:span> file, in addition to the default export, you can also export the mutations as a named export:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const state = { ... }</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">// export mutations as a named export</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">export const mutations = { ... }</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">export default new Vuex.Store({</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>state,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>mutations</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">})</text:span></text:p>
   <text:p text:style-name="Text_20_body">Example testing a mutation using Mocha + Chai (you can use any framework/assertion libraries you like):</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">// mutations.js</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">export const mutations = {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>increment: state =&gt; state.count++</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">// mutations.spec.js</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">import { expect } from &apos;chai&apos;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">import { mutations } from &apos;./store&apos;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">// destructure assign mutations</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const { increment } = mutations</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:soft-page-break/><text:span text:style-name="Source_20_Text">describe(&apos;mutations&apos;, () =&gt; {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>it(&apos;INCREMENT&apos;, () =&gt; {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>// mock state</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>const state = { count: 0 }</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>// apply mutation</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>increment(state)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>// assert result</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>expect(state.count).to.equal(1)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>})</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">})</text:span></text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3"><text:bookmark text:name="testing-actions"/>Testing Actions</text:h>
   <text:p text:style-name="Text_20_body">Actions can be a bit more tricky because they may call out to external APIs. When testing actions, we usually need to do some level of mocking - for example, we can abstract the API calls into a service and mock that service inside our tests. In order to easily mock dependencies, we can use Webpack and <text:a xlink:type="simple" xlink:href="https://github.com/plasticine/inject-loader" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">inject-loader</text:a> to bundle our test files.</text:p>
   <text:p text:style-name="Text_20_body">Example testing an async action:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">// actions.js</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">import shop from &apos;../api/shop&apos;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">export const getAllProducts = ({ commit }) =&gt; {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>commit(&apos;REQUEST_PRODUCTS&apos;)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>shop.getProducts(products =&gt; {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>commit(&apos;RECEIVE_PRODUCTS&apos;, products)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>})</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">// actions.spec.js</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">// use require syntax for inline loaders.</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">// with inject-loader, this returns a module factory</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">// that allows us to inject mocked dependencies.</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">import { expect } from &apos;chai&apos;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const actionsInjector = require(&apos;inject!./actions&apos;)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">// create the module with our mocks</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const actions = actionsInjector({</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>&apos;../api/shop&apos;: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>getProducts (cb) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>setTimeout(() =&gt; {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="8"/>cb([ /* mocked response */ ])</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>}, 100)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">})</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">// helper for testing action with expected mutations</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const testAction = (action, payload, state, expectedMutations, done) =&gt; {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>let count = 0</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>// mock commit</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>const commit = (type, payload) =&gt; {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>const mutation = expectedMutations[count]</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:soft-page-break/><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>expect(mutation.type).to.equal(type)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>if (payload) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>expect(mutation.payload).to.deep.equal(payload)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>count++</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>if (count &gt;= expectedMutations.length) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>done()</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>// call the action with mocked store and arguments</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>action({ commit, state }, payload)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>// check if no mutations should have been dispatched</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>if (expectedMutations.length === 0) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>expect(count).to.equal(0)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>done()</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">describe(&apos;actions&apos;, () =&gt; {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>it(&apos;getAllProducts&apos;, done =&gt; {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>testAction(actions.getAllProducts, null, {}, [</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>{ type: &apos;REQUEST_PRODUCTS&apos; },</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>{ type: &apos;RECEIVE_PRODUCTS&apos;, payload: { /* mocked response */ } }</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>], done)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>})</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">})</text:span></text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3"><text:bookmark text:name="testing-getters"/>Testing Getters</text:h>
   <text:p text:style-name="Text_20_body">If your getters have complicated computation, it is worth testing them. Getters are also very straightforward to test as same reason as mutations.</text:p>
   <text:p text:style-name="Text_20_body">Example testing a getter:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">// getters.js</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">export const getters = {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>filteredProducts (state, { filterCategory }) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>return state.products.filter(product =&gt; {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>return product.category === filterCategory</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>})</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>}</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">// getters.spec.js</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">import { expect } from &apos;chai&apos;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">import { getters } from &apos;./getters&apos;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">describe(&apos;getters&apos;, () =&gt; {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>it(&apos;filteredProducts&apos;, () =&gt; {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>// mock state</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>const state = {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>products: [</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="8"/>{ id: 1, title: &apos;Apple&apos;, category: &apos;fruit&apos; },</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="8"/>{ id: 2, title: &apos;Orange&apos;, category: &apos;fruit&apos; },</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="8"/>{ id: 3, title: &apos;Carrot&apos;, category: &apos;vegetable&apos; }</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:soft-page-break/><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>]</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>// mock getter</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>const filterCategory = &apos;fruit&apos;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>// get the result from the getter</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>const result = getters.filteredProducts(state, { filterCategory })</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>// assert the result</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>expect(result).to.deep.equal([</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>{ id: 1, title: &apos;Apple&apos;, category: &apos;fruit&apos; },</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>{ id: 2, title: &apos;Orange&apos;, category: &apos;fruit&apos; }</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>])</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>})</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">})</text:span></text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3"><text:bookmark text:name="running-tests"/>Running Tests</text:h>
   <text:p text:style-name="Text_20_body">If your mutations and actions are written properly, the tests should have no direct dependency on Browser APIs after proper mocking. Thus you can simply bundle the tests with Webpack and run it directly in Node. Alternatively, you can use <text:span text:style-name="Source_20_Text">mocha-loader</text:span> or Karma + <text:span text:style-name="Source_20_Text">karma-webpack</text:span> to run the tests in real browsers.</text:p>
   <text:h text:style-name="Heading_20_4" text:outline-level="4"><text:bookmark text:name="running-in-node"/>Running in Node</text:h>
   <text:p text:style-name="Text_20_body">Create the following webpack config (together with proper <text:a xlink:type="simple" xlink:href="https://babeljs.io/docs/usage/babelrc/" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="Source_20_Text">.babelrc</text:span></text:a>):</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">// webpack.config.js</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">module.exports = {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>entry: &apos;./test.js&apos;,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>output: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>path: __dirname,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>filename: &apos;test-bundle.js&apos;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>},</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>module: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>loaders: [</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>{</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="8"/>test: /\.js$/,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="8"/>loader: &apos;babel&apos;,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="8"/>exclude: /node_modules/</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>]</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>}</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:p text:style-name="Text_20_body">Then:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">webpack</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">mocha test-bundle.js</text:span></text:p>
   <text:h text:style-name="Heading_20_4" text:outline-level="4"><text:bookmark text:name="running-in-browser"/>Running in Browser</text:h>
   <text:list xml:id="list5831797434157838685" text:style-name="L13">
    <text:list-item>
     <text:p text:style-name="P49">Install <text:span text:style-name="Source_20_Text">mocha-loader</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P49">Change the <text:span text:style-name="Source_20_Text">entry</text:span> from the Webpack config above to <text:span text:style-name="Source_20_Text">&apos;mocha!babel!./test.js&apos;</text:span>.</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P49">Start <text:span text:style-name="Source_20_Text">webpack-dev-server</text:span> using the config</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P37"><text:soft-page-break/>Go to <text:span text:style-name="Source_20_Text">localhost:8080/webpack-dev-server/test-bundle</text:span>.</text:p>
    </text:list-item>
   </text:list>
   <text:h text:style-name="Heading_20_4" text:outline-level="4"><text:bookmark text:name="running-in-browser-with-karma--karma-webpack"/>Running in Browser with Karma + karma-webpack</text:h>
   <text:p text:style-name="Text_20_body">Consult the setup in <text:a xlink:type="simple" xlink:href="http://vue-loader.vuejs.org/en/workflow/testing.html" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">vue-loader documentation</text:a>.</text:p>
   <text:h text:style-name="P22" text:outline-level="1"><text:bookmark text:name="hot-reloading"/>Hot Reloading</text:h>
   <text:p text:style-name="Text_20_body">Vuex supports hot-reloading mutations, modules, actions and getters during development, using Webpack&apos;s <text:a xlink:type="simple" xlink:href="https://webpack.github.io/docs/hot-module-replacement.html" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">Hot Module Replacement API</text:a>. You can also use it in Browserify with the <text:a xlink:type="simple" xlink:href="https://github.com/AgentME/browserify-hmr/" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">browserify-hmr</text:a> plugin.</text:p>
   <text:p text:style-name="Text_20_body">For mutations and modules, you need to use the <text:span text:style-name="Source_20_Text">store.hotUpdate()</text:span> API method:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">// store.js</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">import Vue from &apos;vue&apos;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">import Vuex from &apos;vuex&apos;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">import mutations from &apos;./mutations&apos;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">import moduleA from &apos;./modules/a&apos;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">Vue.use(Vuex)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const state = { ... }</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const store = new Vuex.Store({</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>state,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>mutations,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>modules: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>a: moduleA</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">})</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">if (module.hot) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>// accept actions and mutations as hot modules</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>module.hot.accept([&apos;./mutations&apos;, &apos;./modules/a&apos;], () =&gt; {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>// require the updated modules</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>// have to add .default here due to babel 6 module output</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>const newMutations = require(&apos;./mutations&apos;).default</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>const newModuleA = require(&apos;./modules/a&apos;).default</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>// swap in the new actions and mutations</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>store.hotUpdate({</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>mutations: newMutations,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>modules: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="8"/>a: newModuleA</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="6"/>}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="4"/>})</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/>})</text:span></text:p>
   <text:p text:style-name="P27"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:p text:style-name="Text_20_body">Checkout the <text:a xlink:type="simple" xlink:href="https://github.com/vuejs/vuex/tree/dev/examples/counter-hot" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">counter-hot example</text:a> to play with hot-reload.</text:p>
   <text:p text:style-name="P25"/>
  </office:text>
 </office:body>
</office:document>
